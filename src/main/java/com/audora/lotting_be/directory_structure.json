{
    "__files__": {
        "codes.py": null,
        "directory_structure.json": null,
        "example.txt": null,
        "LottingBeApplication.java": "package com.audora.lotting_be;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class LottingBeApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(LottingBeApplication.class, args);\n\t}\n\n}\n"
    },
    "config": {
        "__files__": {
            "SecurityConfig.java": "// src/main/java/com/audora/lotting_be/config/SecurityConfig.java\n\npackage com.audora.lotting_be.config;\n\nimport com.audora.lotting_be.security.AuthTokenFilter;\nimport com.audora.lotting_be.security.UserDetailsServiceImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Arrays;\n\n@Configuration\n@EnableMethodSecurity(prePostEnabled = true) // 메서드 단위 보안 활성화\npublic class SecurityConfig {\n\n    @Autowired\n    private UserDetailsServiceImpl userDetailsService;\n\n    @Autowired\n    private AuthTokenFilter authTokenFilter;\n\n    // AuthenticationManager 빈 정의\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {\n        return authConfig.getAuthenticationManager();\n    }\n\n    // PasswordEncoder 빈 정의\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    // CORS 설정 정의\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration configuration = new CorsConfiguration();\n\n        // 허용할 출처(Origin) 설정\n        configuration.setAllowedOrigins(Arrays.asList(\"http://localhost:3000\"));\n\n        // 허용할 HTTP 메서드 설정\n        configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\n\n        // 허용할 헤더 설정 (charset 추가)\n        configuration.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Cache-Control\", \"Content-Type\", \"charset\"));\n\n        // 인증 정보(쿠키 등)를 포함할지 여부\n        configuration.setAllowCredentials(true);\n\n        // 적용할 경로 설정\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", configuration);\n\n        return source;\n    }\n\n    // SecurityFilterChain 빈 정의\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n                .cors(cors -> cors.configurationSource(corsConfigurationSource()))\n                .csrf(csrf -> csrf.disable())\n                .authorizeHttpRequests(auth -> auth\n                        .anyRequest().permitAll() // 모든 요청에 대해 인증 없이 접근 허용\n                )\n                .sessionManagement(session -> session\n                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                );\n\n        // JWT 필터 추가 부분은 남겨두되, 현재는 인증을 요구하지 않으므로 실질적으로 효과가 없음\n        http.addFilterBefore(authTokenFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n\n}\n"
        }
    },
    "controller": {
        "__files__": {
            "AuthController.java": "// src/main/java/com/audora/lotting_be/controller/AuthController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.audora.lotting_be.payload.request.LoginRequest;\nimport com.audora.lotting_be.payload.request.SignupRequest;\nimport com.audora.lotting_be.payload.response.JwtResponse;\nimport com.audora.lotting_be.payload.response.MessageResponse;\nimport com.audora.lotting_be.repository.ManagerRepository;\nimport com.audora.lotting_be.security.JwtUtils;\nimport com.audora.lotting_be.security.UserDetailsImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.authentication.*;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/auth\")\npublic class AuthController {\n\n    private final AuthenticationManager authenticationManager;\n    private final ManagerRepository managerRepository;\n    private final PasswordEncoder encoder;\n    private final JwtUtils jwtUtils;\n\n    @Autowired\n    public AuthController(AuthenticationManager authenticationManager,\n                          ManagerRepository managerRepository,\n                          PasswordEncoder encoder,\n                          JwtUtils jwtUtils) {\n        this.authenticationManager = authenticationManager;\n        this.managerRepository = managerRepository;\n        this.encoder = encoder;\n        this.jwtUtils = jwtUtils;\n    }\n\n    @PostMapping(\"/signin\")\n    public ResponseEntity<?> authenticateManager(@RequestBody LoginRequest loginRequest) {\n\n        Authentication authentication = authenticationManager.authenticate(\n                new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));\n\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        String jwt = jwtUtils.generateJwtToken((UserDetailsImpl) authentication.getPrincipal());\n\n        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();\n        List<String> roles = userDetails.getAuthorities().stream()\n                .map(item -> item.getAuthority())\n                .collect(Collectors.toList());\n\n        return ResponseEntity.ok(new JwtResponse(jwt,\n                userDetails.getId(),\n                userDetails.getUsername(),\n                roles));\n    }\n\n    @PostMapping(\"/signup\")\n    public ResponseEntity<?> registerManager(@RequestBody SignupRequest signUpRequest) {\n        if (managerRepository.existsByUsername(signUpRequest.getUsername())) {\n            return ResponseEntity\n                    .badRequest()\n                    .body(new MessageResponse(\"Error: Username is already taken!\"));\n        }\n\n        // Create new manager's account\n        Manager manager = new Manager();\n        manager.setUsername(signUpRequest.getUsername());\n        manager.setPassword(encoder.encode(signUpRequest.getPassword()));\n        manager.setRoles(signUpRequest.getRoles());\n\n        managerRepository.save(manager);\n\n        return ResponseEntity.ok(new MessageResponse(\"Manager registered successfully!\"));\n    }\n}\n",
            "CustomerController.java": "// CustomerController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Loan;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.payload.response.MessageResponse;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.PhaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/customers\")\npublic class CustomerController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    @Autowired\n    private PhaseService phaseService;\n\n    // 고객 생성시 아이디 받아오기\n    @GetMapping(\"/nextId\")\n    public ResponseEntity<Integer> getNextCustomerId() {\n        Integer nextId = customerService.getNextCustomerId();\n        return ResponseEntity.ok(nextId);\n    }\n\n    // 고객 생성 엔드포인트\n    @PostMapping\n    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {\n        // 추가: 수신된 전체 데이터 출력\n        System.out.println(\"Received Customer Data: \" + customer);\n        if (customer.getDeposits() != null) {\n            System.out.println(\"Received Deposit Date: \" + customer.getDeposits().getDepositdate());\n        } else {\n            System.out.println(\"Deposits is null\");\n        }\n\n        Customer createdCustomer = customerService.createCustomer(customer);\n        return ResponseEntity.ok(createdCustomer);\n    }\n\n    // 고객 조회 엔드포인트\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Customer> getCustomerById(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer != null) {\n            return ResponseEntity.ok(customer);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    // Phase 조회 엔드포인트\n    @GetMapping(\"/{id}/phases\")\n    public ResponseEntity<List<Phase>> getPhasesByCustomerId(@PathVariable Integer id) {\n        List<Phase> phases = phaseService.getPhasesByCustomerId(id);\n        if (!phases.isEmpty()) {\n            return ResponseEntity.ok(phases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    // 고객 검색 페이지\n    @GetMapping(\"/search\")\n    public ResponseEntity<List<Customer>> searchCustomers(\n            @RequestParam(required = false) String name,\n            @RequestParam(required = false) String number) {\n\n        List<Customer> customers = customerService.searchCustomers(name, number);\n        return ResponseEntity.ok(customers);\n    }\n\n    // 고객 삭제 엔드포인트\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteCustomer(@PathVariable Integer id) {\n        customerService.deleteCustomer(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    //납입금 관리 페이지 미납차수\n    @GetMapping(\"/{customerId}/pending-phases\")\n    public ResponseEntity<List<Phase>> getPendingPhases(@PathVariable Integer customerId) {\n        List<Phase> pendingPhases = customerService.getPendingPhases(customerId);\n        if (pendingPhases != null) {\n            return ResponseEntity.ok(pendingPhases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    //납입금 관리 페이지 완납차수\n    @GetMapping(\"/{customerId}/completed-phases\")\n    public ResponseEntity<List<Phase>> getCompletedPhases(@PathVariable Integer customerId) {\n        List<Phase> completedPhases = customerService.getCompletedPhases(customerId);\n        if (completedPhases != null) {\n            return ResponseEntity.ok(completedPhases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/{id}/loan\")\n    public ResponseEntity<Loan> getLoanByCustomerId(@PathVariable Integer id) {\n        Optional<Customer> optionalCustomer = Optional.ofNullable(customerService.getCustomerById(id));\n        if (!optionalCustomer.isPresent()) {\n            return ResponseEntity.notFound().build();\n        }\n\n        Loan loan = optionalCustomer.get().getLoan();\n        return ResponseEntity.ok(loan);\n    }\n\n    @PutMapping(\"/{id}/loan\")\n    public ResponseEntity<Customer> updateLoanByCustomerId(@PathVariable Integer id, @RequestBody Loan updatedLoan) {\n        Optional<Customer> optionalCustomer = Optional.ofNullable(customerService.getCustomerById(id));\n        if (!optionalCustomer.isPresent()) {\n            return ResponseEntity.notFound().build();\n        }\n\n        Customer customer = optionalCustomer.get();\n        Loan loan = customer.getLoan();\n\n        // loan이 null이면 새로 생성해준다.\n        if (loan == null) {\n            loan = new Loan();\n        }\n\n        // Loan 필드 업데이트\n        loan.setLoandate(updatedLoan.getLoandate());\n        loan.setLoanbank(updatedLoan.getLoanbank());\n        loan.setLoanammount(updatedLoan.getLoanammount());\n        loan.setSelfdate(updatedLoan.getSelfdate());\n        loan.setSelfammount(updatedLoan.getSelfammount());\n        loan.setLoanselfsum(updatedLoan.getLoanselfsum());\n        loan.setLoanselfcurrent(updatedLoan.getLoanselfcurrent());\n\n        // 변경된 loan을 customer에 다시 세팅\n        customer.setLoan(loan);\n        customerService.saveCustomer(customer);\n\n        return ResponseEntity.ok(customer);\n    }\n\n\n    @PutMapping(\"/{id}/cancel\")\n    public ResponseEntity<?> cancelCustomer(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND)\n                    .body(new MessageResponse(\"Error: Customer not found.\"));\n        }\n\n        customer.setCustomertype(\"x\");\n        customerService.saveCustomer(customer);\n\n        return ResponseEntity.ok(new MessageResponse(\"Customer cancelled successfully.\"));\n    }\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Customer> updateCustomer(@PathVariable Integer id, @RequestBody Customer updatedCustomer) {\n        Customer existingCustomer = customerService.getCustomerById(id);\n        if (existingCustomer == null) {\n            return ResponseEntity.notFound().build();\n        }\n\n        // 필요한 필드들 업데이트\n        existingCustomer.setCustomertype(updatedCustomer.getCustomertype());\n        existingCustomer.setType(updatedCustomer.getType());\n        existingCustomer.setGroupname(updatedCustomer.getGroupname());\n        existingCustomer.setTurn(updatedCustomer.getTurn());\n        existingCustomer.setBatch(updatedCustomer.getBatch());\n        existingCustomer.setRegisterdate(updatedCustomer.getRegisterdate());\n        existingCustomer.setRegisterprice(updatedCustomer.getRegisterprice());\n        existingCustomer.setAdditional(updatedCustomer.getAdditional());\n        existingCustomer.setRegisterpath(updatedCustomer.getRegisterpath());\n        existingCustomer.setSpecialnote(updatedCustomer.getSpecialnote());\n        existingCustomer.setPrizewinning(updatedCustomer.getPrizewinning());\n\n        existingCustomer.getCustomerData().setName(updatedCustomer.getCustomerData().getName());\n        existingCustomer.getCustomerData().setPhone(updatedCustomer.getCustomerData().getPhone());\n        existingCustomer.getCustomerData().setResnumfront(updatedCustomer.getCustomerData().getResnumfront());\n        existingCustomer.getCustomerData().setResnumback(updatedCustomer.getCustomerData().getResnumback());\n        existingCustomer.getCustomerData().setEmail(updatedCustomer.getCustomerData().getEmail());\n\n        existingCustomer.getLegalAddress().setDetailaddress(updatedCustomer.getLegalAddress().getDetailaddress());\n        existingCustomer.getPostreceive().setDetailaddressreceive(updatedCustomer.getPostreceive().getDetailaddressreceive());\n\n        existingCustomer.getFinancial().setBankname(updatedCustomer.getFinancial().getBankname());\n        existingCustomer.getFinancial().setAccountnum(updatedCustomer.getFinancial().getAccountnum());\n        existingCustomer.getFinancial().setAccountholder(updatedCustomer.getFinancial().getAccountholder());\n\n        existingCustomer.getDeposits().setDepositdate(updatedCustomer.getDeposits().getDepositdate());\n        existingCustomer.getDeposits().setDepositammount(updatedCustomer.getDeposits().getDepositammount());\n\n        existingCustomer.getResponsible().setGeneralmanagement(updatedCustomer.getResponsible().getGeneralmanagement());\n        existingCustomer.getResponsible().setDivision(updatedCustomer.getResponsible().getDivision());\n        existingCustomer.getResponsible().setTeam(updatedCustomer.getResponsible().getTeam());\n        existingCustomer.getResponsible().setManagername(updatedCustomer.getResponsible().getManagername());\n\n        existingCustomer.getMgm().setMgmcompanyname(updatedCustomer.getMgm().getMgmcompanyname());\n        existingCustomer.getMgm().setMgmname(updatedCustomer.getMgm().getMgmname());\n        existingCustomer.getMgm().setMgminstitution(updatedCustomer.getMgm().getMgminstitution());\n        existingCustomer.getMgm().setMgmaccount(updatedCustomer.getMgm().getMgmaccount());\n\n        // Attachments 업데이트\n        existingCustomer.getAttachments().setIsuploaded(updatedCustomer.getAttachments().getIsuploaded());\n        existingCustomer.getAttachments().setSealcertificateprovided(updatedCustomer.getAttachments().getSealcertificateprovided());\n        existingCustomer.getAttachments().setSelfsignatureconfirmationprovided(updatedCustomer.getAttachments().getSelfsignatureconfirmationprovided());\n        existingCustomer.getAttachments().setCommitmentletterprovided(updatedCustomer.getAttachments().getCommitmentletterprovided());\n        existingCustomer.getAttachments().setIdcopyprovided(updatedCustomer.getAttachments().getIdcopyprovided());\n        existingCustomer.getAttachments().setFreeoption(updatedCustomer.getAttachments().getFreeoption());\n        existingCustomer.getAttachments().setForfounding(updatedCustomer.getAttachments().getForfounding());\n        existingCustomer.getAttachments().setAgreement(updatedCustomer.getAttachments().getAgreement());\n        existingCustomer.getAttachments().setPreferenceattachment(updatedCustomer.getAttachments().getPreferenceattachment());\n        existingCustomer.getAttachments().setPrizeattachment(updatedCustomer.getAttachments().getPrizeattachment());\n        existingCustomer.getAttachments().setExemption7(updatedCustomer.getAttachments().getExemption7());\n        existingCustomer.getAttachments().setInvestmentfile(updatedCustomer.getAttachments().getInvestmentfile());\n        existingCustomer.getAttachments().setContract(updatedCustomer.getAttachments().getContract());\n        existingCustomer.getAttachments().setFileinfo(updatedCustomer.getAttachments().getFileinfo());\n\n        // 기타 필요한 필드 업데이트\n\n\n        customerService.saveCustomer(existingCustomer);\n\n        return ResponseEntity.ok(existingCustomer);\n    }\n\n\n}\n",
            "FeeController.java": "// FeeController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.service.FeeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/fees\")\npublic class FeeController {\n\n    @Autowired\n    private FeeService feeService;\n\n    /**\n     * 새로운 Fee 생성\n     *\n     * @param fee 생성할 Fee 객체\n     * @return 생성된 Fee 객체\n     */\n    @PostMapping\n    public ResponseEntity<Fee> createFee(@RequestBody Fee fee) {\n        Fee createdFee = feeService.createFee(fee);\n        return ResponseEntity.ok(createdFee);\n    }\n\n    /**\n     * ID로 Fee 조회\n     *\n     * @param id Fee의 ID\n     * @return Fee 객체 (존재할 경우)\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Fee> getFeeById(@PathVariable Long id) {\n        Fee fee = feeService.getFeeById(id);\n        if (fee != null) {\n            return ResponseEntity.ok(fee);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    /**\n     * 모든 Fee 조회\n     *\n     * @return 모든 Fee의 리스트\n     */\n    @GetMapping\n    public ResponseEntity<List<Fee>> getAllFees() {\n        List<Fee> fees = feeService.getAllFees();\n        return ResponseEntity.ok(fees);\n    }\n}\n",
            "FileController.java": "// src/main/java/com/audora/lotting_be/controller/FileController.java\npackage com.audora.lotting_be.controller;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.core.io.*;\nimport org.springframework.http.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.util.UriUtils;\n\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.*;\n\n@RestController\n@RequestMapping(\"/files\")\npublic class FileController {\n\n    @Value(\"${file.upload-dir}\")\n    private String uploadDir;\n\n    // 기존 업로드 메서드\n    @PostMapping(\"/upload\")\n    public ResponseEntity<?> uploadFile(@RequestParam(\"file\") MultipartFile file) {\n        try {\n            String fileName = Paths.get(file.getOriginalFilename()).getFileName().toString();\n            Path path = Paths.get(uploadDir).resolve(fileName);\n            Files.createDirectories(path.getParent());\n            Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);\n            // 파일명을 반환\n            return ResponseEntity.ok(fileName);\n        } catch (IOException e) {\n            return ResponseEntity.status(500).body(\"Could not upload file: \" + e.getMessage());\n        }\n    }\n\n\n\n    // FileController.java\n    @GetMapping(\"/download\")\n    public ResponseEntity<Resource> downloadFile(@RequestParam(\"id\") Long id, @RequestParam(\"filename\") String filename) {\n        try {\n            Path filePath = Paths.get(uploadDir).resolve(filename).normalize();\n            Resource resource = new UrlResource(filePath.toUri());\n\n            if (!resource.exists()) {\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n            }\n\n            String contentType = Files.probeContentType(filePath);\n            if (contentType == null) {\n                // 확장자에 따른 MIME 타입 직접 설정\n                String extension = com.google.common.io.Files.getFileExtension(filePath.toString());\n                switch (extension.toLowerCase()) {\n                    case \"pdf\":\n                        contentType = \"application/pdf\";\n                        break;\n                    case \"jpg\":\n                    case \"jpeg\":\n                        contentType = \"image/jpeg\";\n                        break;\n                    case \"png\":\n                        contentType = \"image/png\";\n                        break;\n                    // 필요한 확장자 추가\n                    default:\n                        contentType = \"application/octet-stream\";\n                }\n            }\n\n            // 파일명 인코딩 (한글 등 비-ASCII 문자 지원)\n            String encodedFileName = UriUtils.encode(resource.getFilename(), StandardCharsets.UTF_8);\n\n            return ResponseEntity.ok()\n                    .contentType(MediaType.parseMediaType(contentType))\n                    .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFileName)\n                    .body(resource);\n\n        } catch (MalformedURLException e) {\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n    }\n\n}\n",
            "LateFeesController.java": "// src/main/java/com/audora/lotting_be/controller/LateFeesController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.payload.response.LateFeeInfo;\nimport com.audora.lotting_be.service.CustomerService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/latefees\")\npublic class LateFeesController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * GET /latefees\n     * 회원의 연체료 정보를 조회합니다.\n     *\n     * @param name   (선택 사항) 회원 이름\n     * @param number (선택 사항) 회원 번호\n     * @return LateFeeInfo 리스트\n     */\n    @GetMapping\n    public List<LateFeeInfo> getLateFees(\n            @RequestParam(required = false) String name,\n            @RequestParam(required = false) String number) {\n        return customerService.getLateFeeInfos(name, number);\n    }\n}\n",
            "PhaseController.java": "// PhaseController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.PhaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/phases\")\npublic class PhaseController {\n\n    @Autowired\n    private PhaseService phaseService;\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * Phase 업데이트 엔드포인트\n     * PUT /phases/{id}\n     */\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Phase> updatePhase(@PathVariable Long id, @RequestBody Phase phaseDetails) {\n        Optional<Phase> optionalPhase = phaseService.getPhaseById(id);\n        if (!optionalPhase.isPresent()) {\n            return ResponseEntity.notFound().build();\n        }\n\n        Phase phase = optionalPhase.get();\n        phase.setPlanneddate(phaseDetails.getPlanneddate());\n        phase.setFullpaiddate(phaseDetails.getFullpaiddate());\n        phase.setCharge(phaseDetails.getCharge());\n        phase.setDiscount(phaseDetails.getDiscount());\n        phase.setExemption(phaseDetails.getExemption());\n        phase.setService(phaseDetails.getService());\n        phase.setMove(phaseDetails.getMove());\n        phase.setFeesum(phaseDetails.getFeesum());\n        phase.setCharged(phaseDetails.getCharged());\n        phase.setSum(phaseDetails.getSum());\n\n        Phase updatedPhase = phaseService.savePhase(phase);\n\n        // 변경된 Phase를 바탕으로 Status 재계산\n        Customer customer = updatedPhase.getCustomer();\n        // Status 필드를 업데이트하는 메서드 (CustomerService에 존재한다고 가정)\n        customerService.updateStatusFields(customer);\n        // 업데이트된 상태를 DB에 반영\n        customerService.saveCustomer(customer);\n\n        return ResponseEntity.ok(updatedPhase);\n    }\n\n    /**\n     * Phase 조회 엔드포인트\n     * GET /phases/{id}\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Phase> getPhaseById(@PathVariable Long id) {\n        Optional<Phase> optionalPhase = phaseService.getPhaseById(id);\n        return optionalPhase.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n}\n"
        }
    },
    "model": {
        "customer": {
            "__files__": {
                "Attachments.java": "// Attachments.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Attachments {\n    private Boolean isuploaded; // 파일 제출했는지 여부\n    private String fileinfo; // 파일 주소, 이름, 확장자\n\n    private Boolean exemption7; // 7차 면제\n    private Boolean investmentfile; //출자금\n    private Boolean contract; //지산 A동 계약서\n    private Boolean agreement; //총회동의서\n\n    private Boolean sealcertificateprovided; // 인감증명서 제출 여부\n    private Boolean selfsignatureconfirmationprovided; // 본인서명확인서 제출 여부\n    private Boolean idcopyprovided; // 신분증 사본 제출 여부\n    private Boolean commitmentletterprovided; // 확약서 제출 여부\n    private Boolean forfounding; //창준위용 제출여부\n    private Boolean freeoption; //무상옵션 제출여부\n    private Boolean preferenceattachment; //선호도조사 제출여부\n    private Boolean generalmeetingconsentformprovided; // 총회 동의서 제출 여부\n    private Boolean prizeattachment; // 사은품 제출 여부\n\n}\n",
                "Customer.java": "// Customer.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Customer {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id; // 관리번호\n\n    private String customertype; //분류(회원)\n    private String type; // 타입\n    private String groupname; // 군\n    private String turn; // 순번\n    private String batch; // 가입차순\n    private LocalDate registerdate; // 가입일자\n    private Long registerprice; // 가입가\n    private String additional; // 비고\n    private String registerpath; // 가입경로\n    private String specialnote; // 특이사항\n    private String prizewinning; // 경품당첨\n\n    @Embedded\n    private CustomerData customerData = new CustomerData(); // 가입자\n\n    @Embedded\n    private LegalAddress legalAddress = new LegalAddress(); // 법정주소\n\n    @Embedded\n    private Postreceive postreceive = new Postreceive(); // 우편물 수령주소\n\n    @Embedded\n    private Financial financial = new Financial(); // 금융기관\n\n    @Embedded\n    private Deposit deposits = new Deposit(); // 예약금\n\n    @Embedded\n    private Attachments attachments = new Attachments(); // 부속서류\n\n    @Embedded\n    private Loan loan = new Loan(); // 대출, 자납\n\n    @Embedded\n    private Responsible responsible = new Responsible(); // 담당\n\n    @Embedded\n    private Dahim dahim = new Dahim(); // 다힘\n\n    @Embedded\n    private MGM mgm = new MGM(); // MGM\n\n    @Embedded\n    private Firstemp firstemp = new Firstemp(); // 1차(직원)\n\n    @Embedded\n    private Secondemp secondemp = new Secondemp(); // 2차\n\n    @Embedded\n    private Meetingattend meetingattend = new Meetingattend(); // 총회참석여부\n\n    @Embedded\n    private Votemachine votemachine = new Votemachine(); // 투표기기\n\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<Phase> phases; // n차\n\n    @OneToOne(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private Status status; // 현 상태\n}\n",
                "CustomerData.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class CustomerData {\n    private String name; //성명\n    private Integer resnumfront; //주민번호 앞자리\n    private Integer resnumback; //주민번호 뒷자리\n    private String phone; //휴대전화\n    private String email; // E-mail\n}",
                "Dahim.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Dahim {\n    private String dahimsisang; //시상\n    private LocalDate dahimdate; //일자\n    private String dahimprepaid; //6/30선지금\n    private String dahimfirst; //1회차청구\n    private String dahimfirstpay; //(1회차?)금액\n    private LocalDate dahimdate2; //일자2\n    private String dahimsource; //출처\n    private String dahimsecond; //2회차청구\n    private String dahimsecondpay; //(2회차?)금액\n    private LocalDate dahimdate3; //일자3\n    private String dahimsum; //합계\n}",
                "Deposit.java": "// src/main/java/com/audora/lotting_be/model/customer/Deposit.java\n\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Deposit {\n    private LocalDate depositdate; //납입일자\n    private Long depositammount; //금액\n\n}\n",
                "Financial.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Financial {\n    private String bankname; //은행명\n    private String accountnum; //계좌번호\n    private String accountholder; //예금주\n    private String trustcompany; //신탁사\n}",
                "Firstemp.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Firstemp {\n    private String firstemptimes; //차순\n    private LocalDate firstempdate; //지급일자\n}\n",
                "LegalAddress.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class LegalAddress {\n    private Integer postnumber; //우편번호\n    private String post; //도\n    private String detailaddress; //상세주소\n}",
                "Loan.java": "// Loan.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Loan {\n    private LocalDate loandate; //대출일자\n    private String loanbank; //은행\n    private Long loanammount; //대출액\n    private LocalDate selfdate; //자납일\n    private Long selfammount; //자납액\n    private Long loanselfsum; //합계\n    private Long loanselfcurrent; //잔액\n}\n",
                "Meetingattend.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Meetingattend {\n    private String howtoattend; //참석방법 ( 나중에 셀 합칠 때 대비 )\n    private Boolean ftofattend; //서면\n    private Boolean selfattend; //직접\n    private Boolean behalfattend; //대리\n}\n",
                "MGM.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class MGM {\n    private Long mgmfee; //수수료\n    private String mgmcompanyname; //업체명\n    private String mgmname; //이름\n    private String mgminstitution; //기관\n    private String mgmaccount; //계좌\n}",
                "Phase.java": "// Phase.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Entity\n@Data\npublic class Phase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber; //차수\n    private LocalDate planneddate; //예정일자\n    private String planneddateString; //원래 예정일자\n    private LocalDate fullpaiddate; //완납일자\n    private Long charge; //부담금\n    private Long discount; //할인액\n    private Long exemption; //면제금액\n    private Long service; //업무대행비\n    private String move; //이동\n    private Long feesum; //n차합\n    private Long charged; //낸 금액\n    private Long sum; //남은금액\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n",
                "Postreceive.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Postreceive {\n    private Integer postnumberreceive; //우편번호\n    private String postreceive; //도\n    private String detailaddressreceive; //상세주소\n}",
                "Responsible.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Responsible {\n    private String generalmanagement; //총괄\n    private String division; //본부\n    private String team; //팀\n    private String managername; //담당자 성명\n}",
                "Secondemp.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Secondemp {\n    private String secondemptimes; //차순\n    private LocalDate secondempdate; //지급일자\n}\n",
                "Status.java": "// Status.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class Status {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Long exemptionsum; //총면제금액\n    private Long unpaidammout; //미납금액\n    private String unpaidphase; //미납차순 (1,2,3,...)\n    private Long prepaidammount; //기납부금액\n    private Long ammountsum; //1~n차 납입총액\n    private Long percent40; //40%\n\n    @OneToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n",
                "Votemachine.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Votemachine {\n    private Boolean machine1; //제1호\n    private Boolean machine2_1; //제2-1호\n    private Boolean machine2_2; //제2-2호\n    private Boolean machine2_3; //제2-3호\n    private Boolean machine2_4; //제2-4호\n    private Boolean machine3; //제3호\n    private Boolean machine4; //제4호\n    private Boolean machine5; //제5호\n    private Boolean machine6; //제6호\n    private Boolean machine7; //제7호\n    private Boolean machine8; //제8호\n    private Boolean machine9; //제9호\n    private Boolean machine10; //제10호\n}"
            }
        },
        "Fee": {
            "__files__": {
                "Fee.java": "// Fee.java\npackage com.audora.lotting_be.model.Fee;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Fee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String groupname; //군\n    private String floor; //층\n    private String batch; //가입차순 (1차, 2차 등등)\n    private String type; //타입\n    private Double supplyarea; //공급면적\n    private Double priceperp; //평당가\n    private Long price; //금액\n    private Double paymentratio; //납입비율\n    private Long paysum; //합계\n\n    @OneToMany(mappedBy = \"fee\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<FeePerPhase> feePerPhases;\n}\n",
                "FeePerPhase.java": "// FeePerPhase.java\npackage com.audora.lotting_be.model.Fee;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class FeePerPhase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber; //n차\n    private Long phasefee; //금액\n    private String phasedate; //제출일\n\n    @ManyToOne\n    @JsonBackReference\n    @JoinColumn(name = \"fee_id\")\n    private Fee fee;\n}\n"
            }
        },
        "manager": {
            "__files__": {
                "Manager.java": "// src/main/java/com/audora/lotting_be/model/manager/Manager.java\npackage com.audora.lotting_be.model.manager;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.Set;\n\n@Entity\n@Data\n@Table(name = \"managers\")\npublic class Manager {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, unique = true)\n    private String username;\n\n    @Column(nullable = false)\n    private String password;\n\n    // 역할을 확장할 수 있도록 Set으로 정의\n    @ElementCollection(fetch = FetchType.EAGER)\n    @CollectionTable(name = \"manager_roles\", joinColumns = @JoinColumn(name = \"manager_id\"))\n    @Column(name = \"role\")\n    private Set<String> roles;\n}\n"
            }
        }
    },
    "payload": {
        "request": {
            "__files__": {
                "LoginRequest.java": "// src/main/java/com/audora/lotting_be/payload/request/LoginRequest.java\npackage com.audora.lotting_be.payload.request;\n\nimport lombok.Data;\n\n@Data\npublic class LoginRequest {\n    private String username;\n    private String password;\n}\n",
                "SignupRequest.java": "// src/main/java/com/audora/lotting_be/payload/request/SignupRequest.java\npackage com.audora.lotting_be.payload.request;\n\nimport lombok.Data;\nimport java.util.Set;\n\n@Data\npublic class SignupRequest {\n    private String username;\n    private String email; // 필요시 추가\n    private String password;\n    private Set<String> roles;\n}\n"
            }
        },
        "response": {
            "__files__": {
                "JwtResponse.java": "// src/main/java/com/audora/lotting_be/payload/response/JwtResponse.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\nimport java.util.List;\n\n@Data\npublic class JwtResponse {\n    private String token;\n    private String type = \"Bearer\";\n    private Long id;\n    private String username;\n    private List<String> roles;\n\n    public JwtResponse(String accessToken, Long id, String username, List<String> roles) {\n        this.token = accessToken;\n        this.id = id;\n        this.username = username;\n        this.roles = roles;\n    }\n}\n",
                "LateFeeInfo.java": "// src/main/java/com/audora/lotting_be/payload/response/LateFeeInfo.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Data\npublic class LateFeeInfo {\n    private Integer id; // 관리번호\n    private Integer lastUnpaidPhaseNumber; // 마지막 미납 차수\n    private String customertype; // 고객 유형\n    private String name; // 성명\n    private LocalDate registerdate; // 가입일자\n    private LocalDate lateBaseDate; // 연체기준일\n    private LocalDate recentPaymentDate; // 최근납부일자\n    private Long daysOverdue; // 일수\n    private Double lateRate; // 연체율 (%)\n    private Long overdueAmount; // 연체금액\n    private Long paidAmount; // 납입금액\n    private Double lateFee; // 연체료\n    private Long totalOwed; // 내야할 돈 합계\n}\n",
                "MessageResponse.java": "// src/main/java/com/audora/lotting_be/payload/response/MessageResponse.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\n\n@Data\npublic class MessageResponse {\n    private String message;\n\n    public MessageResponse(String message) {\n        this.message = message;\n    }\n}\n"
            }
        }
    },
    "repository": {
        "__files__": {
            "CustomerRepository.java": "// src/main/java/com/audora/lotting_be/repository/CustomerRepository.java\n\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport java.util.List;\n\npublic interface CustomerRepository extends JpaRepository<Customer, Integer> {\n    @Query(value = \"SELECT COALESCE(MAX(id), 0) + 1 FROM customer\", nativeQuery = true)\n    Integer getNextId();\n\n    List<Customer> findByCustomerDataNameContaining(String name);\n\n    List<Customer> findByCustomerDataNameAndId(String name, Integer id);\n}\n",
            "FeeRepository.java": "// FeeRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface FeeRepository extends JpaRepository<Fee, Long> {\n    Fee findByGroupnameAndBatch(String groupname, String batch);\n}\n",
            "ManagerRepository.java": "// src/main/java/com/audora/lotting_be/repository/ManagerRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.Optional;\n\npublic interface ManagerRepository extends JpaRepository<Manager, Long> {\n    Optional<Manager> findByUsername(String username);\n    Boolean existsByUsername(String username);\n}\n",
            "PhaseRepository.java": "package com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.List;\n\npublic interface PhaseRepository extends JpaRepository<Phase, Long> {\n    List<Phase> findByCustomerId(Integer customerId);\n}\n"
        }
    },
    "security": {
        "__files__": {
            "AuthTokenFilter.java": "// src/main/java/com/audora/lotting_be/security/AuthTokenFilter.java\npackage com.audora.lotting_be.security;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.security.authentication.*;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\n@Component\npublic class AuthTokenFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private JwtUtils jwtUtils;\n\n    @Autowired\n    private UserDetailsServiceImpl userDetailsService;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                    HttpServletResponse response,\n                                    FilterChain filterChain)\n            throws ServletException, IOException {\n        try {\n            String jwt = parseJwt(request);\n            if (jwt != null && jwtUtils.validateJwtToken(jwt)) {\n                String username = jwtUtils.getUserNameFromJwtToken(jwt);\n\n                UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n                UsernamePasswordAuthenticationToken authentication =\n                        new UsernamePasswordAuthenticationToken(\n                                userDetails, null, userDetails.getAuthorities());\n\n                authentication.setDetails(\n                        new WebAuthenticationDetailsSource().buildDetails(request));\n\n                SecurityContextHolder.getContext().setAuthentication(authentication);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Cannot set user authentication: \" + e);\n        }\n\n        filterChain.doFilter(request, response);\n    }\n\n    private String parseJwt(HttpServletRequest request) {\n        String headerAuth = request.getHeader(\"Authorization\");\n\n        if (StringUtils.hasText(headerAuth) &&\n                headerAuth.startsWith(\"Bearer \")) {\n            return headerAuth.substring(7);\n        }\n\n        return null;\n    }\n}\n",
            "JwtUtils.java": "// src/main/java/com/audora/lotting_be/security/JwtUtils.java\npackage com.audora.lotting_be.security;\n\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.security.Keys;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport java.nio.charset.StandardCharsets;\nimport java.security.Key;\nimport java.util.Date;\nimport jakarta.annotation.PostConstruct;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Component\npublic class JwtUtils {\n\n    private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);\n\n    @Value(\"${jwt.secret}\")\n    private String jwtSecret;\n\n    @Value(\"${jwt.expirationMs}\")\n    private int jwtExpirationMs;\n\n    private Key key;\n\n    @PostConstruct\n    public void init() {\n        if (jwtSecret == null || jwtSecret.length() < 32) {\n            throw new IllegalArgumentException(\"JWT Secret must be at least 32 characters long.\");\n        }\n        this.key = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));\n        logger.info(\"JWT Key initialized successfully.\");\n    }\n\n    public String generateJwtToken(UserDetailsImpl userDetails) {\n        return Jwts.builder()\n                .setSubject(userDetails.getUsername())\n                .setIssuedAt(new Date())\n                .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))\n                .signWith(key, SignatureAlgorithm.HS512)\n                .compact();\n    }\n\n    public String getUserNameFromJwtToken(String token) {\n        return Jwts.parserBuilder()\n                .setSigningKey(key)\n                .build()\n                .parseClaimsJws(token)\n                .getBody()\n                .getSubject();\n    }\n\n    public boolean validateJwtToken(String authToken) {\n        try {\n            Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(authToken);\n            return true;\n        } catch (JwtException e) {\n            logger.error(\"JWT validation error: {}\", e.getMessage());\n        }\n        return false;\n    }\n}\n",
            "UserDetailsImpl.java": "// src/main/java/com/audora/lotting_be/security/UserDetailsImpl.java\npackage com.audora.lotting_be.security;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport lombok.Data;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport java.util.Collection;\nimport java.util.stream.Collectors;\n\n@Data\npublic class UserDetailsImpl implements UserDetails {\n\n    private Long id;\n    private String username;\n\n    @JsonIgnore\n    private String password;\n\n    private Collection<? extends GrantedAuthority> authorities;\n\n    public UserDetailsImpl(Long id, String username, String password,\n                           Collection<? extends GrantedAuthority> authorities) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.authorities = authorities;\n    }\n\n    public static UserDetailsImpl build(Manager manager) {\n        Collection<GrantedAuthority> authorities = manager.getRoles().stream()\n                .map(role -> (GrantedAuthority) () -> \"ROLE_\" + role.toUpperCase())\n                .collect(Collectors.toList());\n\n        return new UserDetailsImpl(\n                manager.getId(),\n                manager.getUsername(),\n                manager.getPassword(),\n                authorities);\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return authorities;\n    }\n\n    // 기타 메서드는 기본 구현을 따릅니다\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n",
            "UserDetailsServiceImpl.java": "// src/main/java/com/audora/lotting_be/security/UserDetailsServiceImpl.java\npackage com.audora.lotting_be.security;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.audora.lotting_be.repository.ManagerRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.*;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Autowired\n    ManagerRepository managerRepository;\n\n    @Override\n    @Transactional\n    public UserDetails loadUserByUsername(String username)\n            throws UsernameNotFoundException {\n        Manager manager = managerRepository.findByUsername(username)\n                .orElseThrow(() ->\n                        new UsernameNotFoundException(\"Manager Not Found with username: \" + username));\n\n        return UserDetailsImpl.build(manager);\n    }\n}\n"
        }
    },
    "service": {
        "__files__": {
            "CustomerService.java": "// src/main/java/com/audora/lotting_be/service/CustomerService.java\npackage com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.model.customer.Status;\nimport com.audora.lotting_be.payload.response.LateFeeInfo;\nimport com.audora.lotting_be.repository.CustomerRepository;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Service\npublic class CustomerService {\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private FeeRepository feeRepository;\n\n    public Integer getNextCustomerId() {\n        return customerRepository.getNextId();\n    }\n\n    public Customer getCustomerById(Integer id) {\n        Optional<Customer> optionalCustomer = customerRepository.findById(id);\n        return optionalCustomer.orElse(null);\n    }\n\n    public Customer createCustomer(Customer customer) {\n\n        Fee fee = feeRepository.findByGroupnameAndBatch(\n                customer.getType() + customer.getGroupname(), customer.getBatch()); // 유저테이블 타입 = 차수테이블 군, 유저테이블 batch = 차수\n\n        if (fee != null) {\n            List<FeePerPhase> feePerPhases = fee.getFeePerPhases();\n            List<Phase> phases = new ArrayList<>();\n\n            for (FeePerPhase feePerPhase : feePerPhases) {\n                Phase phase = new Phase();\n                phase.setPhaseNumber(feePerPhase.getPhaseNumber());\n                phase.setCharge(feePerPhase.getPhasefee());\n\n                // discount과 exemption이 null일 수 있으므로 안전하게 처리\n                Long discount = 0L;\n                Long exemption = 0L;\n                Long service = 0L;\n\n                // feesum 계산: charge - discount - exemption + service\n                Long feesum = feePerPhase.getPhasefee() - discount - exemption + service;\n                phase.setFeesum(feesum);\n\n                // sum을 charge로 초기화 (기존 로직 유지)\n                phase.setSum(feePerPhase.getPhasefee());\n\n                LocalDate plannedDate = calculatePlannedDate(\n                        customer.getRegisterdate(), feePerPhase.getPhasedate());\n                phase.setPlanneddate(plannedDate);\n\n                phase.setCustomer(customer);\n                phases.add(phase);\n            }\n            customer.setPhases(phases);\n        }\n\n        // Status 객체가 null인 경우 새로운 Status 객체 생성\n        if (customer.getStatus() == null) {\n            Status status = new Status();\n            status.setCustomer(customer); // 양방향 관계 설정\n            customer.setStatus(status);\n        }\n\n        // Phase 생성 후 Status 필드 업데이트\n        updateStatusFields(customer);\n\n        return customerRepository.save(customer);\n    }\n\n    private LocalDate calculatePlannedDate(LocalDate registerDate, String phasedate) {\n        if (phasedate.endsWith(\"달\") || phasedate.endsWith(\"개월\")) {\n            int months = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusMonths(months);\n        } else if (phasedate.endsWith(\"년\")) {\n            int years = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusYears(years);\n        } else {\n            return registerDate;\n        }\n    }\n\n    /**\n     * Status 객체의 필드를 업데이트하는 메서드\n     */\n    public void updateStatusFields(Customer customer) {\n        Status status = customer.getStatus();\n\n        // exemptionsum: 모든 Phase의 exemption 합\n        Long exemptionsum = customer.getPhases().stream()\n                .mapToLong(phase -> phase.getExemption() != null ? phase.getExemption() : 0L)\n                .sum();\n        status.setExemptionsum(exemptionsum);\n\n        // unpaidammout: 모든 Phase의 sum 합\n        Long unpaidammout = customer.getPhases().stream()\n                .mapToLong(phase -> phase.getSum() != null ? phase.getSum() : 0L)\n                .sum();\n        status.setUnpaidammout(unpaidammout);\n\n\n\n        // unpaidphase: 미납된 Phase의 phaseNumber들을 콤마로 구분하여 저장\n        List<Integer> unpaidPhaseNumbers = customer.getPhases().stream()\n                .filter(phase -> phase.getPlanneddate() != null\n                        && phase.getPlanneddate().isBefore(LocalDate.now())\n                        && phase.getFullpaiddate() == null)\n                .map(Phase::getPhaseNumber)\n                .sorted()\n                .collect(Collectors.toList());\n\n        String unpaidPhaseStr = unpaidPhaseNumbers.stream()\n                .map(String::valueOf)\n                .collect(Collectors.joining(\",\"));\n        status.setUnpaidphase(unpaidPhaseStr);\n\n        // ammountsum: 모든 Phase의 feesum 합\n        Long ammountsum = customer.getPhases().stream()\n                .mapToLong(phase -> phase.getFeesum() != null ? phase.getFeesum() : 0L)\n                .sum();\n        status.setAmmountsum(ammountsum);\n\n\n        // Status 객체 저장\n        customer.setStatus(status);\n    }\n\n    public List<Customer> searchCustomers(String name, String number) {\n        if (name != null && number != null) {\n            return customerRepository.findByCustomerDataNameAndId(name, Integer.parseInt(number));\n        } else if (name != null) {\n            return customerRepository.findByCustomerDataNameContaining(name);\n        } else if (number != null) {\n            return customerRepository.findById(Integer.parseInt(number))\n                    .map(Collections::singletonList)\n                    .orElse(Collections.emptyList());\n        } else {\n            return customerRepository.findAll();\n        }\n    }\n\n    public void deleteCustomer(Integer id) {\n        customerRepository.deleteById(id);\n    }\n\n    public List<Phase> getPendingPhases(Integer customerId) {\n        Optional<Customer> customerOptional = customerRepository.findById(customerId);\n        if (customerOptional.isPresent()) {\n            Customer customer = customerOptional.get();\n            List<Phase> phases = customer.getPhases();\n            // sum 필드가 0이 아닌 Phase들만 필터링\n            List<Phase> pendingPhases = phases.stream()\n                    .filter(phase -> phase.getSum() != null && phase.getSum() > 0)\n                    .collect(Collectors.toList());\n            return pendingPhases;\n        } else {\n            return null;\n        }\n    }\n\n    public List<Phase> getCompletedPhases(Integer customerId) {\n        Optional<Customer> customerOptional = customerRepository.findById(customerId);\n        if (customerOptional.isPresent()) {\n            Customer customer = customerOptional.get();\n            List<Phase> phases = customer.getPhases();\n            // sum 필드가 0인 Phase들만 필터링 (완납된 Phase)\n            List<Phase> completedPhases = phases.stream()\n                    .filter(phase -> phase.getSum() == null || phase.getSum() == 0)\n                    .collect(Collectors.toList());\n            return completedPhases;\n        } else {\n            return null;\n        }\n    }\n\n    public Customer saveCustomer(Customer customer) {\n        return customerRepository.save(customer);\n    }\n\n    /**\n     * 고객 해약 처리\n     */\n    public boolean cancelCustomer(Integer id) {\n        Optional<Customer> optionalCustomer = customerRepository.findById(id);\n        if (optionalCustomer.isPresent()) {\n            Customer customer = optionalCustomer.get();\n            customer.setCustomertype(\"c\");\n            customerRepository.save(customer);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * 검색 기준에 따라 연체료 정보를 가져옵니다.\n     *\n     * @param name   검색할 이름 (선택 사항)\n     * @param number 검색할 회원번호 (선택 사항)\n     * @return LateFeeInfo 리스트\n     */\n    public List<LateFeeInfo> getLateFeeInfos(String name, String number) {\n        List<Customer> customers;\n\n        // 검색 조건에 따라 고객 리스트 가져오기\n        if (name != null && !name.isEmpty() && number != null && !number.isEmpty()) {\n            try {\n                Integer id = Integer.parseInt(number);\n                customers = customerRepository.findByCustomerDataNameAndId(name, id);\n            } catch (NumberFormatException e) {\n                customers = Collections.emptyList();\n            }\n        } else if (name != null && !name.isEmpty()) {\n            customers = customerRepository.findByCustomerDataNameContaining(name);\n        } else if (number != null && !number.isEmpty()) {\n            try {\n                Integer id = Integer.parseInt(number);\n                customers = customerRepository.findById(id)\n                        .map(Collections::singletonList)\n                        .orElse(Collections.emptyList());\n            } catch (NumberFormatException e) {\n                customers = Collections.emptyList();\n            }\n        } else {\n            customers = customerRepository.findAll();\n        }\n\n        List<LateFeeInfo> lateFeeInfos = new ArrayList<>();\n        LocalDate today = LocalDate.now();\n\n        for (Customer customer : customers) {\n            System.out.println(\"Processing Customer ID: \" + customer.getId());\n\n            List<Phase> phases = customer.getPhases();\n\n            if (phases == null || phases.isEmpty()) {\n                continue; // 차수가 없는 고객은 건너뜁니다.\n            }\n\n            // 미납 Phase 기준: plannedDate < today && fullpaiddate == null\n            List<Phase> unpaidPhases = phases.stream()\n                    .filter(phase -> phase.getPlanneddate() != null\n                            && phase.getPlanneddate().isBefore(today)\n                            && phase.getFullpaiddate() == null)\n                    .collect(Collectors.toList());\n\n            // 미납 일자 출력\n            unpaidPhases.forEach(phase -> {\n                System.out.println(\"Unpaid Phase for Customer ID \" + customer.getId() + \": Planned Date = \" + phase.getPlanneddate());\n            });\n\n            LateFeeInfo info = new LateFeeInfo();\n            info.setId(customer.getId());\n\n            if (unpaidPhases.isEmpty()) {\n                // 미납 Phase가 없는 경우 (완납된 고객)\n                info.setLastUnpaidPhaseNumber(null);\n                info.setCustomertype(customer.getCustomertype() != null ? customer.getCustomertype() : \"N/A\");\n                info.setName(customer.getCustomerData() != null && customer.getCustomerData().getName() != null\n                        ? customer.getCustomerData().getName()\n                        : \"N/A\");\n                info.setRegisterdate(customer.getRegisterdate() != null ? customer.getRegisterdate() : null);\n                info.setLateBaseDate(null);\n                info.setRecentPaymentDate(null);\n                info.setDaysOverdue(0L);\n                info.setLateRate(0.0);\n                info.setOverdueAmount(0L);\n                Long paidAmount = phases.stream()\n                        .mapToLong(phase -> phase.getCharged() != null ? phase.getCharged() : 0L)\n                        .sum();\n                info.setPaidAmount(paidAmount != null ? paidAmount : 0L);\n                info.setLateFee(0.0);\n                info.setTotalOwed(0L);\n                lateFeeInfos.add(info);\n                continue;\n            }\n\n            // 미납 Phase가 있는 경우\n            // 마지막 미납 Phase Number\n            Optional<Phase> lastUnpaidPhaseOpt = unpaidPhases.stream()\n                    .max(Comparator.comparing(Phase::getPhaseNumber));\n\n            Integer lastUnpaidPhaseNumber = lastUnpaidPhaseOpt.map(Phase::getPhaseNumber).orElse(null);\n            info.setLastUnpaidPhaseNumber(lastUnpaidPhaseNumber);\n\n            // 가장 오래된 plannedDate\n            Optional<Phase> earliestUnpaidPhaseOpt = unpaidPhases.stream()\n                    .min(Comparator.comparing(Phase::getPlanneddate));\n\n            LocalDate lateBaseDate = earliestUnpaidPhaseOpt.map(Phase::getPlanneddate).orElse(null);\n            info.setLateBaseDate(lateBaseDate);\n\n            // 최근 납부일자: 완납된 Phase 중 가장 최근 fullpaiddate\n            Optional<Phase> recentPaymentOpt = phases.stream()\n                    .filter(phase -> phase.getFullpaiddate() != null)\n                    .max(Comparator.comparing(Phase::getFullpaiddate));\n\n            LocalDate recentPaymentDate = recentPaymentOpt.map(Phase::getFullpaiddate).orElse(null);\n            info.setRecentPaymentDate(recentPaymentDate);\n\n            // 연체 일수\n            Long daysOverdue = (lateBaseDate != null) ? ChronoUnit.DAYS.between(lateBaseDate, today) : 0L;\n            info.setDaysOverdue(daysOverdue != null ? daysOverdue : 0L);\n\n            // 연체금액: 미납 Phase의 sum 합\n            Long overdueAmount = unpaidPhases.stream()\n                    .mapToLong(phase -> phase.getSum() != null ? phase.getSum() : 0L)\n                    .sum();\n            info.setOverdueAmount(overdueAmount != null ? overdueAmount : 0L);\n\n            // 납입금액: 모든 Phase의 charged 합\n            Long paidAmount = phases.stream()\n                    .mapToLong(phase -> phase.getCharged() != null ? phase.getCharged() : 0L)\n                    .sum();\n            info.setPaidAmount(paidAmount != null ? paidAmount : 0L);\n\n            // 연체율: overdueAmount / totalFeesum * 100\n            Long totalFeesum = phases.stream()\n                    .mapToLong(phase -> phase.getFeesum() != null ? phase.getFeesum() : 0L)\n                    .sum();\n\n            Double lateRate = (totalFeesum != 0) ? ((double) overdueAmount / totalFeesum) * 100 : 0.0;\n            info.setLateRate(lateRate != null ? Math.round(lateRate * 100.0) / 100.0 : 0.0);\n\n            // 연체료: overdueAmount * 1.4%\n            Double lateFee = overdueAmount * 0.014;\n            info.setLateFee(lateFee != null ? Math.round(lateFee * 100.0) / 100.0 : 0.0);\n\n            // 내야할 돈 합계: overdueAmount + lateFee\n            Long totalOwed = Math.round(overdueAmount + lateFee);\n            info.setTotalOwed(totalOwed != null ? totalOwed : 0L);\n\n            // 기타 필드 null 체크\n            info.setCustomertype(customer.getCustomertype() != null ? customer.getCustomertype() : \"N/A\");\n            info.setName(customer.getCustomerData() != null && customer.getCustomerData().getName() != null\n                    ? customer.getCustomerData().getName()\n                    : \"N/A\");\n            info.setRegisterdate(customer.getRegisterdate() != null ? customer.getRegisterdate() : null);\n\n            lateFeeInfos.add(info);\n        }\n\n        return lateFeeInfos;\n    }\n}\n",
            "FeeService.java": "// FeeService.java\npackage com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class FeeService {\n\n    @Autowired\n    private FeeRepository feeRepository;\n\n    /**\n     * 새로운 Fee와 연관된 FeePerPhase 생성\n     *\n     * @param fee 생성할 Fee 객체\n     * @return 생성된 Fee 객체\n     */\n    public Fee createFee(Fee fee) {\n        // 양방향 관계 설정\n        if (fee.getFeePerPhases() != null) {\n            for (FeePerPhase phase : fee.getFeePerPhases()) {\n                phase.setFee(fee);\n            }\n        }\n        return feeRepository.save(fee);\n    }\n\n    /**\n     * ID로 Fee 조회\n     *\n     * @param id Fee의 ID\n     * @return Fee 객체 (존재할 경우), 없을 경우 null\n     */\n    public Fee getFeeById(Long id) {\n        return feeRepository.findById(id).orElse(null);\n    }\n\n    /**\n     * 모든 Fee 조회\n     *\n     * @return 모든 Fee의 리스트\n     */\n    public List<Fee> getAllFees() {\n        return feeRepository.findAll();\n    }\n}\n",
            "PhaseService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.repository.PhaseRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class PhaseService {\n\n    @Autowired\n    private PhaseRepository phaseRepository;\n\n    // 특정 고객 ID로 Phase 리스트를 조회하는 메서드\n    public List<Phase> getPhasesByCustomerId(Integer customerId) {\n        return phaseRepository.findByCustomerId(customerId);\n    }\n\n    public Optional<Phase> getPhaseById(Long id) {\n        return phaseRepository.findById(id);\n    }\n\n    public Phase savePhase(Phase phase) {\n        return phaseRepository.save(phase);\n    }\n}\n"
        }
    }
}