{
    "__files__": {
        "codes.py": null,
        "directory_structure.json": null,
        "example.txt": null,
        "LottingBeApplication.java": "package com.audora.lotting_be;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class LottingBeApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(LottingBeApplication.class, args);\n\t}\n\n}\n"
    },
    "config": {
        "__files__": {
            "CorsConfig.java": "// CorsConfig.java\npackage com.audora.lotting_be.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOrigins(\"http://localhost:3000\") // 프론트엔드 도메인\n                .allowedMethods(\"*\")\n                .allowedHeaders(\"*\")\n                .allowCredentials(true);\n    }\n}\n",
            "SecurityConfig.java": "// SecurityConfig.java\npackage com.audora.lotting_be.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n                .csrf((csrf)->csrf.disable()) // CSRF 보호 비활성화 (테스트 시)\n                .authorizeHttpRequests(authorize -> authorize\n                        .anyRequest().permitAll() // 모든 요청에 대해 인증 없이 접근 허용\n                );\n\n        return http.build();\n    }\n}\n"
        }
    },
    "controller": {
        "__files__": {
            "CustomerController.java": "// CustomerController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Loan;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.PhaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/customers\")\n@CrossOrigin(origins = \"http://localhost:3000\")\npublic class CustomerController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    @Autowired\n    private PhaseService phaseService;\n\n    // 고객 생성시 아이디 받아오기\n    @GetMapping(\"/nextId\")\n    public ResponseEntity<Integer> getNextCustomerId() {\n        Integer nextId = customerService.getNextCustomerId();\n        return ResponseEntity.ok(nextId);\n    }\n\n    // 고객 생성 엔드포인트\n    @PostMapping\n    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {\n        Customer createdCustomer = customerService.createCustomer(customer);\n        return ResponseEntity.ok(createdCustomer);\n    }\n\n    // 고객 조회 엔드포인트\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Customer> getCustomerById(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer != null) {\n            return ResponseEntity.ok(customer);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    // Phase 조회 엔드포인트\n    @GetMapping(\"/{id}/phases\")\n    public ResponseEntity<List<Phase>> getPhasesByCustomerId(@PathVariable Integer id) {\n        List<Phase> phases = phaseService.getPhasesByCustomerId(id);\n        if (!phases.isEmpty()) {\n            return ResponseEntity.ok(phases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n    // 고객 검색 페이지\n    @GetMapping(\"/search\")\n    public ResponseEntity<List<Customer>> searchCustomers(\n            @RequestParam(required = false) String name,\n            @RequestParam(required = false) String number) {\n\n        List<Customer> customers = customerService.searchCustomers(name, number);\n        return ResponseEntity.ok(customers);\n    }\n\n    // 고객 삭제 엔드포인트\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteCustomer(@PathVariable Integer id) {\n        customerService.deleteCustomer(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    //납입금 관리 페이지 미납차수\n    @GetMapping(\"/{customerId}/pending-phases\")\n    public ResponseEntity<List<Phase>> getPendingPhases(@PathVariable Integer customerId) {\n        List<Phase> pendingPhases = customerService.getPendingPhases(customerId);\n        if (pendingPhases != null) {\n            return ResponseEntity.ok(pendingPhases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    //납입금 관리 페이지 완납차수\n    @GetMapping(\"/{customerId}/completed-phases\")\n    public ResponseEntity<List<Phase>> getCompletedPhases(@PathVariable Integer customerId) {\n        List<Phase> completedPhases = customerService.getCompletedPhases(customerId);\n        if (completedPhases != null) {\n            return ResponseEntity.ok(completedPhases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/{id}/loan\")\n    public ResponseEntity<Loan> getLoanByCustomerId(@PathVariable Integer id) {\n        Optional<Customer> optionalCustomer = Optional.ofNullable(customerService.getCustomerById(id));\n        if (!optionalCustomer.isPresent()) {\n            return ResponseEntity.notFound().build();\n        }\n\n        Loan loan = optionalCustomer.get().getLoan();\n        return ResponseEntity.ok(loan);\n    }\n\n    @PutMapping(\"/{id}/loan\")\n    public ResponseEntity<Customer> updateLoanByCustomerId(@PathVariable Integer id, @RequestBody Loan updatedLoan) {\n        Optional<Customer> optionalCustomer = Optional.ofNullable(customerService.getCustomerById(id));\n        if (!optionalCustomer.isPresent()) {\n            return ResponseEntity.notFound().build();\n        }\n\n        Customer customer = optionalCustomer.get();\n        Loan loan = customer.getLoan();\n\n        // Loan 필드 업데이트\n        loan.setLoandate(updatedLoan.getLoandate());\n        loan.setLoanammount(updatedLoan.getLoanammount());\n        loan.setSelfdate(updatedLoan.getSelfdate());\n        loan.setSelfammount(updatedLoan.getSelfammount());\n        loan.setLoanselfsum(updatedLoan.getLoanselfsum());\n        loan.setLoanselfcurrent(updatedLoan.getLoanselfcurrent());\n\n        customer.setLoan(loan);\n        customerService.saveCustomer(customer);\n\n        return ResponseEntity.ok(customer);\n    }\n}\n",
            "FeeController.java": "// FeeController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.service.FeeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/fees\")\npublic class FeeController {\n\n    @Autowired\n    private FeeService feeService;\n\n    /**\n     * 새로운 Fee 생성\n     *\n     * @param fee 생성할 Fee 객체\n     * @return 생성된 Fee 객체\n     */\n    @PostMapping\n    public ResponseEntity<Fee> createFee(@RequestBody Fee fee) {\n        Fee createdFee = feeService.createFee(fee);\n        return ResponseEntity.ok(createdFee);\n    }\n\n    /**\n     * ID로 Fee 조회\n     *\n     * @param id Fee의 ID\n     * @return Fee 객체 (존재할 경우)\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Fee> getFeeById(@PathVariable Long id) {\n        Fee fee = feeService.getFeeById(id);\n        if (fee != null) {\n            return ResponseEntity.ok(fee);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    /**\n     * 모든 Fee 조회\n     *\n     * @return 모든 Fee의 리스트\n     */\n    @GetMapping\n    public ResponseEntity<List<Fee>> getAllFees() {\n        List<Fee> fees = feeService.getAllFees();\n        return ResponseEntity.ok(fees);\n    }\n}\n",
            "FileController.java": "// FileController.java\npackage com.audora.lotting_be.controller;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.nio.file.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/files\")\n@CrossOrigin(origins = \"http://localhost:3000\")\npublic class FileController {\n\n    @PostMapping(\"/upload\")\n    public ResponseEntity<?> uploadFile(@RequestParam(\"file\") MultipartFile file) {\n        try {\n            String fileName = Paths.get(file.getOriginalFilename()).getFileName().toString();\n            Path path = Paths.get(\"uploads/\" + fileName);\n            Files.createDirectories(path.getParent());\n            Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);\n            // 파일 경로를 반환한다고 가정\n            return ResponseEntity.ok(path.toString());\n        } catch (IOException e) {\n            return ResponseEntity.status(500).body(\"Could not upload file: \" + e.getMessage());\n        }\n    }\n\n}\n",
            "PhaseController.java": "// PhaseController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.service.PhaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/phases\")\npublic class PhaseController {\n\n    @Autowired\n    private PhaseService phaseService;\n\n    /**\n     * Phase 업데이트 엔드포인트\n     * PUT /phases/{id}\n     */\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Phase> updatePhase(@PathVariable Long id, @RequestBody Phase phaseDetails) {\n        Optional<Phase> optionalPhase = phaseService.getPhaseById(id);\n        if (!optionalPhase.isPresent()) {\n            return ResponseEntity.notFound().build();\n        }\n\n        Phase phase = optionalPhase.get();\n        phase.setPlanneddate(phaseDetails.getPlanneddate());\n        phase.setFullpaiddate(phaseDetails.getFullpaiddate());\n        phase.setCharge(phaseDetails.getCharge());\n        phase.setDiscount(phaseDetails.getDiscount());\n        phase.setExemption(phaseDetails.getExemption());\n        phase.setService(phaseDetails.getService());\n        phase.setMove(phaseDetails.getMove());\n        phase.setFeesum(phaseDetails.getFeesum());\n        phase.setCharged(phaseDetails.getCharged());\n        phase.setSum(phaseDetails.getSum());\n\n        Phase updatedPhase = phaseService.savePhase(phase);\n        return ResponseEntity.ok(updatedPhase);\n    }\n\n    /**\n     * Phase 조회 엔드포인트\n     * GET /phases/{id}\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Phase> getPhaseById(@PathVariable Long id) {\n        Optional<Phase> optionalPhase = phaseService.getPhaseById(id);\n        return optionalPhase.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n}\n"
        }
    },
    "model": {
        "customer": {
            "__files__": {
                "Attachments.java": "// Attachments.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Attachments {\n    private Boolean isuploaded; // 파일 제출했는지 여부\n    private String fileinfo; // 파일 주소, 이름, 확장자\n\n    private Boolean exemption7; // 7차 면제\n    private Boolean investmentfile; //출자금\n    private Boolean contract; //지산 A동 계약서\n    private Boolean agreement; //총회동의서\n\n    private Boolean sealcertificateprovided; // 인감증명서 제출 여부\n    private Boolean selfsignatureconfirmationprovided; // 본인서명확인서 제출 여부\n    private Boolean idcopyprovided; // 신분증 사본 제출 여부\n    private Boolean commitmentletterprovided; // 확약서 제출 여부\n    private Boolean forfounding; //창준위용 제출여부\n    private Boolean freeoption; //무상옵션 제출여부\n    private Boolean preferenceattachment; //선호도조사 제출여부\n    private Boolean generalmeetingconsentformprovided; // 총회 동의서 제출 여부\n    private Boolean prizeattachment; // 사은품 제출 여부\n\n}\n",
                "Customer.java": "// Customer.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Customer {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id; // 관리번호\n\n    private String customertype; //분류(회원)\n    private String type; // 타입\n    private String groupname; // 군\n    private String turn; // 순번\n    private String batch; // 가입차순\n    private LocalDate registerdate; // 가입일자\n    private Long registerprice; // 가입가\n    private String additional; // 비고\n    private String registerpath; // 가입경로\n    private String specialnote; // 특이사항\n    private String prizewinning; // 경품당첨\n\n    @Embedded\n    private CustomerData customerData = new CustomerData(); // 가입자\n\n    @Embedded\n    private LegalAddress legalAddress = new LegalAddress(); // 법정주소\n\n    @Embedded\n    private Postreceive postreceive = new Postreceive(); // 우편물 수령주소\n\n    @Embedded\n    private Financial financial = new Financial(); // 금융기관\n\n    @Embedded\n    private Deposit deposits = new Deposit(); // 예약금\n\n    @Embedded\n    private Attachments attachments = new Attachments(); // 부속서류\n\n    @Embedded\n    private Loan loan = new Loan(); // 대출, 자납\n\n    @Embedded\n    private Responsible responsible = new Responsible(); // 담당\n\n    @Embedded\n    private Dahim dahim = new Dahim(); // 다힘\n\n    @Embedded\n    private MGM mgm = new MGM(); // MGM\n\n    @Embedded\n    private Firstemp firstemp = new Firstemp(); // 1차(직원)\n\n    @Embedded\n    private Secondemp secondemp = new Secondemp(); // 2차\n\n    @Embedded\n    private Meetingattend meetingattend = new Meetingattend(); // 총회참석여부\n\n    @Embedded\n    private Votemachine votemachine = new Votemachine(); // 투표기기\n\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<Phase> phases; // n차\n\n    @OneToOne(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private Status status; // 현 상태\n}\n",
                "CustomerData.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class CustomerData {\n    private String name; //성명\n    private Integer resnumfront; //주민번호 앞자리\n    private Integer resnumback; //주민번호 뒷자리\n    private String phone; //휴대전화\n    private String email; // E-mail\n}",
                "Dahim.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Dahim {\n    private String dahimsisang; //시상\n    private LocalDate dahimdate; //일자\n    private String dahimprepaid; //6/30선지금\n    private String dahimfirst; //1회차청구\n    private String dahimfirstpay; //(1회차?)금액\n    private LocalDate dahimdate2; //일자2\n    private String dahimsource; //출처\n    private String dahimsecond; //2회차청구\n    private String dahimsecondpay; //(2회차?)금액\n    private LocalDate dahimdate3; //일자3\n    private String dahimsum; //합계\n}",
                "Deposit.java": "// Deposit.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Deposit {\n    private LocalDate depositdate; //납입일자\n    private Long depositammount; //금액\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    private Customer customer;\n}\n",
                "Financial.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Financial {\n    private String bankname; //은행명\n    private String accountnum; //계좌번호\n    private String accountholder; //예금주\n    private String trustcompany; //신탁사\n}",
                "Firstemp.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Firstemp {\n    private String firstemptimes; //차순\n    private LocalDate firstempdate; //지급일자\n}\n",
                "LegalAddress.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class LegalAddress {\n    private Integer postnumber; //우편번호\n    private String province; //도\n    private String county; //군\n    private String detailaddress; //상세주소\n}",
                "Loan.java": "// Loan.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Loan {\n    private LocalDate loandate; //대출일자\n    private String loanbank; //은행\n    private Long loanammount; //대출액\n    private LocalDate selfdate; //자납일\n    private Long selfammount; //자납액\n    private Long loanselfsum; //합계\n    private Long loanselfcurrent; //잔액\n}\n",
                "Meetingattend.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Meetingattend {\n    private String howtoattend; //참석방법 ( 나중에 셀 합칠 때 대비 )\n    private Boolean ftofattend; //서면\n    private Boolean selfattend; //직접\n    private Boolean behalfattend; //대리\n}\n",
                "MGM.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class MGM {\n    private Long mgmfee; //수수료\n    private String mgmcompanyname; //업체명\n    private String mgmname; //이름\n    private String mgminstitution; //기관\n    private String mgmaccount; //계좌\n}",
                "Phase.java": "// Phase.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Entity\n@Data\npublic class Phase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber; //차수\n    private LocalDate planneddate; //예정일자\n    private LocalDate fullpaiddate; //완납일자\n    private Long charge; //부담금\n    private Long discount; //할인액\n    private Long exemption; //면제금액\n    private Long service; //업무대행비\n    private String move; //이동\n    private Long feesum; //n차합\n    private Long charged; //낸 금액\n    private Long sum; //남은금액\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n",
                "Postreceive.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Postreceive {\n    private Integer postnumberreceive; //우편번호\n    private String provincereceive; //도\n    private String countyreceive; //군\n    private String detailaddressreceive; //상세주소\n}",
                "Responsible.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Responsible {\n    private String generalmanagement; //총괄\n    private String division; //본부\n    private String team; //팀\n    private String managername; //담당자 성명\n}",
                "Secondemp.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Secondemp {\n    private String secondemptimes; //차순\n    private LocalDate secondempdate; //지급일자\n}\n",
                "Status.java": "// Status.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class Status {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Long exemptionsum; //총면제금액\n    private Long unpaidammout; //미납금액\n    private String unpaidphase; //미납차순 (1,2,3,...)\n    private Long prepaidammount; //기납부금액\n    private Long ammountsum; //1~n차 납입총액\n    private Long percent40; //40%\n\n    @OneToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n",
                "Votemachine.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Votemachine {\n    private Boolean machine1; //제1호\n    private Boolean machine2_1; //제2-1호\n    private Boolean machine2_2; //제2-2호\n    private Boolean machine2_3; //제2-3호\n    private Boolean machine2_4; //제2-4호\n    private Boolean machine3; //제3호\n    private Boolean machine4; //제4호\n    private Boolean machine5; //제5호\n    private Boolean machine6; //제6호\n    private Boolean machine7; //제7호\n    private Boolean machine8; //제8호\n    private Boolean machine9; //제9호\n    private Boolean machine10; //제10호\n}"
            }
        },
        "Fee": {
            "__files__": {
                "Fee.java": "// Fee.java\npackage com.audora.lotting_be.model.Fee;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Fee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String groupname; //군\n    private String floor; //층\n    private String batch; //가입차순 (1차, 2차 등등)\n    private String type; //타입\n    private Double supplyarea; //공급면적\n    private Double priceperp; //평당가\n    private Long price; //금액\n    private Double paymentratio; //납입비율\n    private Long paysum; //합계\n\n    @OneToMany(mappedBy = \"fee\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<FeePerPhase> feePerPhases;\n}\n",
                "FeePerPhase.java": "// FeePerPhase.java\npackage com.audora.lotting_be.model.Fee;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class FeePerPhase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber; //n차\n    private Long phasefee; //금액\n    private String phasedate; //제출일\n\n    @ManyToOne\n    @JsonBackReference\n    @JoinColumn(name = \"fee_id\")\n    private Fee fee;\n}\n"
            }
        }
    },
    "repository": {
        "__files__": {
            "CustomerRepository.java": "// CustomerRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\npublic interface CustomerRepository extends JpaRepository<Customer, Integer> {\n    @Query(value = \"SELECT COALESCE(MAX(id), 0) + 1 FROM customer\", nativeQuery = true)\n    Integer getNextId();\n\n    List<Customer> findByCustomerDataNameContaining(String name);\n\n    List<Customer> findByCustomerDataNameAndId(String name, Integer id);\n\n}\n",
            "FeeRepository.java": "// FeeRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface FeeRepository extends JpaRepository<Fee, Long> {\n    Fee findByGroupnameAndBatch(String groupname, String batch);\n}\n",
            "PhaseRepository.java": "package com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.List;\n\npublic interface PhaseRepository extends JpaRepository<Phase, Long> {\n    List<Phase> findByCustomerId(Integer customerId);\n}\n"
        }
    },
    "service": {
        "__files__": {
            "CustomerService.java": "// CustomerService.java\npackage com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.model.customer.Status;\nimport com.audora.lotting_be.repository.CustomerRepository;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\npublic class CustomerService {\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private FeeRepository feeRepository;\n\n    public Integer getNextCustomerId() {\n        return customerRepository.getNextId();\n    }\n\n    public Customer getCustomerById(Integer id) {\n        Optional<Customer> optionalCustomer = customerRepository.findById(id);\n        return optionalCustomer.orElse(null);\n    }\n\n    public Customer createCustomer(Customer customer) {\n\n        Fee fee = feeRepository.findByGroupnameAndBatch(\n                customer.getGroupname(), customer.getBatch()); // 유저테이블 타입 = 차수테이블 군, 유저테이블 batch = 차수\n\n        if (fee != null) {\n            List<FeePerPhase> feePerPhases = fee.getFeePerPhases();\n            List<Phase> phases = new ArrayList<>();\n\n            for (FeePerPhase feePerPhase : feePerPhases) {\n                Phase phase = new Phase();\n                phase.setPhaseNumber(feePerPhase.getPhaseNumber());\n                phase.setCharge(feePerPhase.getPhasefee());\n\n                LocalDate plannedDate = calculatePlannedDate(\n                        customer.getRegisterdate(), feePerPhase.getPhasedate());\n                phase.setPlanneddate(plannedDate);\n\n                phase.setCustomer(customer);\n                phases.add(phase);\n            }\n            customer.setPhases(phases);\n        }\n\n        // Status 객체가 null인 경우 새로운 Status 객체 생성\n        if (customer.getStatus() == null) {\n            Status status = new Status();\n            status.setCustomer(customer); // 양방향 관계 설정\n            customer.setStatus(status);\n        }\n\n        return customerRepository.save(customer);\n    }\n\n    private LocalDate calculatePlannedDate(LocalDate registerDate, String phasedate) {\n        if (phasedate.endsWith(\"달\") || phasedate.endsWith(\"개월\")) {\n            int months = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusMonths(months);\n        } else if (phasedate.endsWith(\"년\")) {\n            int years = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusYears(years);\n        } else {\n            return registerDate;\n        }\n    }\n\n    public List<Customer> searchCustomers(String name, String number) {\n        if (name != null && number != null) {\n            return customerRepository.findByCustomerDataNameAndId(name, Integer.parseInt(number));\n        } else if (name != null) {\n            return customerRepository.findByCustomerDataNameContaining(name);\n        } else if (number != null) {\n            return customerRepository.findById(Integer.parseInt(number))\n                    .map(Collections::singletonList)\n                    .orElse(Collections.emptyList());\n        } else {\n            return customerRepository.findAll();\n        }\n    }\n\n    public void deleteCustomer(Integer id) {\n        customerRepository.deleteById(id);\n    }\n\n    public List<Phase> getPendingPhases(Integer customerId) {\n        Optional<Customer> customerOptional = customerRepository.findById(customerId);\n        if (customerOptional.isPresent()) {\n            Customer customer = customerOptional.get();\n            List<Phase> phases = customer.getPhases();\n            // sum 필드가 0이 아닌 Phase들만 필터링\n            List<Phase> pendingPhases = phases.stream()\n                    .filter(phase -> phase.getSum() != null && phase.getSum() > 0)\n                    .collect(Collectors.toList());\n            return pendingPhases;\n        } else {\n            return null;\n        }\n    }\n\n    public List<Phase> getCompletedPhases(Integer customerId) {\n        Optional<Customer> customerOptional = customerRepository.findById(customerId);\n        if (customerOptional.isPresent()) {\n            Customer customer = customerOptional.get();\n            List<Phase> phases = customer.getPhases();\n            // sum 필드가 0인 Phase들만 필터링 (완납된 Phase)\n            List<Phase> completedPhases = phases.stream()\n                    .filter(phase -> phase.getSum() == null || phase.getSum() == 0)\n                    .collect(Collectors.toList());\n            return completedPhases;\n        } else {\n            return null;\n        }\n    }\n\n    public Customer saveCustomer(Customer customer) {\n        return customerRepository.save(customer);\n    }\n}\n",
            "FeeService.java": "// FeeService.java\npackage com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class FeeService {\n\n    @Autowired\n    private FeeRepository feeRepository;\n\n    /**\n     * 새로운 Fee와 연관된 FeePerPhase 생성\n     *\n     * @param fee 생성할 Fee 객체\n     * @return 생성된 Fee 객체\n     */\n    public Fee createFee(Fee fee) {\n        // 양방향 관계 설정\n        if (fee.getFeePerPhases() != null) {\n            for (FeePerPhase phase : fee.getFeePerPhases()) {\n                phase.setFee(fee);\n            }\n        }\n        return feeRepository.save(fee);\n    }\n\n    /**\n     * ID로 Fee 조회\n     *\n     * @param id Fee의 ID\n     * @return Fee 객체 (존재할 경우), 없을 경우 null\n     */\n    public Fee getFeeById(Long id) {\n        return feeRepository.findById(id).orElse(null);\n    }\n\n    /**\n     * 모든 Fee 조회\n     *\n     * @return 모든 Fee의 리스트\n     */\n    public List<Fee> getAllFees() {\n        return feeRepository.findAll();\n    }\n}\n",
            "PhaseService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.repository.PhaseRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class PhaseService {\n\n    @Autowired\n    private PhaseRepository phaseRepository;\n\n    // 특정 고객 ID로 Phase 리스트를 조회하는 메서드\n    public List<Phase> getPhasesByCustomerId(Integer customerId) {\n        return phaseRepository.findByCustomerId(customerId);\n    }\n\n    public Optional<Phase> getPhaseById(Long id) {\n        return phaseRepository.findById(id);\n    }\n\n    public Phase savePhase(Phase phase) {\n        return phaseRepository.save(phase);\n    }\n}\n"
        }
    }
}