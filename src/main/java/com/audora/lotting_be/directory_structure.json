{
    "__files__": {
        "codes.py": null,
        "directory_structure.json": null,
        "example.txt": null,
        "LottingBeApplication.java": "package com.audora.lotting_be;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class LottingBeApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(LottingBeApplication.class, args);\n\t}\n\n}\n"
    },
    "config": {
        "__files__": {
            "SecurityConfig.java": "// src/main/java/com/audora/lotting_be/config/SecurityConfig.java\n\npackage com.audora.lotting_be.config;\n\nimport com.audora.lotting_be.security.AuthTokenFilter;\nimport com.audora.lotting_be.security.UserDetailsServiceImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Arrays;\n\n@Configuration\n@EnableMethodSecurity(prePostEnabled = true) // 메서드 단위 보안 활성화\npublic class SecurityConfig {\n\n    @Autowired\n    private UserDetailsServiceImpl userDetailsService;\n\n    @Autowired\n    private AuthTokenFilter authTokenFilter;\n\n    // AuthenticationManager 빈 정의\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {\n        return authConfig.getAuthenticationManager();\n    }\n\n    // PasswordEncoder 빈 정의\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    // CORS 설정 정의\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration configuration = new CorsConfiguration();\n\n        // 허용할 출처(Origin) 설정\n        configuration.setAllowedOrigins(Arrays.asList(\"http://localhost:3000\",\"http://3.38.181.18:3000\"));\n\n        // 허용할 HTTP 메서드 설정\n        configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\n\n        // 허용할 헤더 설정 (charset 추가)\n        configuration.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Cache-Control\", \"Content-Type\", \"charset\"));\n\n        // 인증 정보(쿠키 등)를 포함할지 여부\n        configuration.setAllowCredentials(true);\n\n        // 적용할 경로 설정\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", configuration);\n\n        return source;\n    }\n\n    // SecurityFilterChain 빈 정의\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n                .cors(cors -> cors.configurationSource(corsConfigurationSource()))\n                .csrf(csrf -> csrf.disable())\n                .authorizeHttpRequests(auth -> auth\n                        .anyRequest().permitAll() // 모든 요청에 대해 인증 없이 접근 허용\n                )\n                .sessionManagement(session -> session\n                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                );\n\n        // JWT 필터 추가 부분은 남겨두되, 현재는 인증을 요구하지 않으므로 실질적으로 효과가 없음\n        http.addFilterBefore(authTokenFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n\n}\n"
        }
    },
    "controller": {
        "__files__": {
            "AuthController.java": "// src/main/java/com/audora/lotting_be/controller/AuthController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.audora.lotting_be.payload.request.LoginRequest;\nimport com.audora.lotting_be.payload.request.SignupRequest;\nimport com.audora.lotting_be.payload.response.JwtResponse;\nimport com.audora.lotting_be.payload.response.MessageResponse;\nimport com.audora.lotting_be.repository.ManagerRepository;\nimport com.audora.lotting_be.security.JwtUtils;\nimport com.audora.lotting_be.security.UserDetailsImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.authentication.*;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/auth\")\npublic class AuthController {\n\n    private final AuthenticationManager authenticationManager;\n    private final ManagerRepository managerRepository;\n    private final PasswordEncoder encoder;\n    private final JwtUtils jwtUtils;\n\n    @Autowired\n    public AuthController(AuthenticationManager authenticationManager,\n                          ManagerRepository managerRepository,\n                          PasswordEncoder encoder,\n                          JwtUtils jwtUtils) {\n        this.authenticationManager = authenticationManager;\n        this.managerRepository = managerRepository;\n        this.encoder = encoder;\n        this.jwtUtils = jwtUtils;\n    }\n\n    @PostMapping(\"/signin\")\n    public ResponseEntity<?> authenticateManager(@RequestBody LoginRequest loginRequest) {\n\n        Authentication authentication = authenticationManager.authenticate(\n                new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));\n\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        String jwt = jwtUtils.generateJwtToken((UserDetailsImpl) authentication.getPrincipal());\n\n        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();\n        List<String> roles = userDetails.getAuthorities().stream()\n                .map(item -> item.getAuthority())\n                .collect(Collectors.toList());\n\n        return ResponseEntity.ok(new JwtResponse(jwt,\n                userDetails.getId(),\n                userDetails.getUsername(),\n                roles));\n    }\n\n    @PostMapping(\"/signup\")\n    public ResponseEntity<?> registerManager(@RequestBody SignupRequest signUpRequest) {\n        if (managerRepository.existsByUsername(signUpRequest.getUsername())) {\n            return ResponseEntity\n                    .badRequest()\n                    .body(new MessageResponse(\"Error: Username is already taken!\"));\n        }\n\n        // Create new manager's account\n        Manager manager = new Manager();\n        manager.setUsername(signUpRequest.getUsername());\n        manager.setPassword(encoder.encode(signUpRequest.getPassword()));\n        manager.setRoles(signUpRequest.getRoles());\n\n        managerRepository.save(manager);\n\n        return ResponseEntity.ok(new MessageResponse(\"Manager registered successfully!\"));\n    }\n}\n",
            "CustomerController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.model.customer.minor.*;\nimport com.audora.lotting_be.payload.response.MessageResponse;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.PhaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/customers\")\npublic class CustomerController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    @Autowired\n    private PhaseService phaseService;\n\n    @GetMapping(\"/nextId\")\n    public ResponseEntity<Integer> getNextCustomerId() {\n        Integer nextId = customerService.getNextCustomerId();\n        return ResponseEntity.ok(nextId);\n    }\n\n    @PostMapping\n    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {\n        System.out.println(\"Received Customer Data: \" + customer);\n        if (customer.getDeposits() != null) {\n            System.out.println(\"Received Deposit Date: \" + customer.getDeposits().getDepositdate());\n        } else {\n            System.out.println(\"Deposits is null\");\n        }\n        Customer createdCustomer = customerService.createCustomer(customer);\n        return ResponseEntity.ok(createdCustomer);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Customer> getCustomerById(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer != null) {\n            return ResponseEntity.ok(customer);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/{id}/phases\")\n    public ResponseEntity<List<Phase>> getPhasesByCustomerId(@PathVariable Integer id) {\n        List<Phase> phases = phaseService.getPhasesByCustomerId(id);\n        if (!phases.isEmpty()) {\n            return ResponseEntity.ok(phases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/search\")\n    public ResponseEntity<List<Customer>> searchCustomers(\n            @RequestParam(required = false) String name,\n            @RequestParam(required = false) String number\n    ) {\n        List<Customer> customers = customerService.searchCustomers(name, number);\n        return ResponseEntity.ok(customers);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteCustomer(@PathVariable Integer id) {\n        customerService.deleteCustomer(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    @GetMapping(\"/{customerId}/pending-phases\")\n    public ResponseEntity<List<Phase>> getPendingPhases(@PathVariable Integer customerId) {\n        List<Phase> pendingPhases = customerService.getPendingPhases(customerId);\n        if (pendingPhases != null) {\n            return ResponseEntity.ok(pendingPhases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/{customerId}/completed-phases\")\n    public ResponseEntity<List<Phase>> getCompletedPhases(@PathVariable Integer customerId) {\n        List<Phase> completedPhases = customerService.getCompletedPhases(customerId);\n        if (completedPhases != null) {\n            return ResponseEntity.ok(completedPhases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/{id}/loan\")\n    public ResponseEntity<?> getLoanByCustomerId(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n        return ResponseEntity.ok(customer.getLoan());\n    }\n\n    /**\n     * [수정됨] 대출/자납 업데이트:\n     * 1) Loan 필드 업데이트\n     * 2) customerService.saveCustomer(...)\n     * 3) customerService.recalculateEverything(...)\n     */\n    @PutMapping(\"/{id}/loan\")\n    public ResponseEntity<Customer> updateLoanByCustomerId(@PathVariable Integer id, @RequestBody Loan updatedLoan) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n\n        Loan loan = customer.getLoan();\n        if (loan == null) {\n            loan = new Loan();\n        }\n        loan.setLoandate(updatedLoan.getLoandate());\n        loan.setLoanbank(updatedLoan.getLoanbank());\n        loan.setLoanammount(updatedLoan.getLoanammount());\n        loan.setSelfdate(updatedLoan.getSelfdate());\n        loan.setSelfammount(updatedLoan.getSelfammount());\n        customer.setLoan(loan);\n\n        System.out.println(\"============================================\");\n\n        // 우선 저장\n        customerService.saveCustomer(customer);\n        // 전체 재계산\n        customerService.recalculateEverything(customer);\n\n        return ResponseEntity.ok(customer);\n    }\n\n    @PutMapping(\"/{id}/cancel\")\n    public ResponseEntity<?> cancelCustomer(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.status(404)\n                    .body(new MessageResponse(\"Error: Customer not found.\"));\n        }\n        customer.setCustomertype(\"x\");\n        customerService.saveCustomer(customer);\n        return ResponseEntity.ok(new MessageResponse(\"Customer cancelled successfully.\"));\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Customer> updateCustomer(@PathVariable Integer id, @RequestBody Customer updatedCustomer) {\n        System.out.println(\"========== Updated Customer JSON Data ==========\");\n        System.out.println(updatedCustomer);\n        if (updatedCustomer.getAttachments() != null) {\n            System.out.println(\"Prize Name: \" + updatedCustomer.getAttachments().getPrizename());\n            System.out.println(\"Prize Date: \" + updatedCustomer.getAttachments().getPrizedate());\n        }\n        System.out.println(\"===============================================\");\n\n        Customer existingCustomer = customerService.getCustomerById(id);\n        if (existingCustomer == null) {\n            return ResponseEntity.notFound().build();\n        }\n\n        // 1. 최상위 필드 업데이트\n        existingCustomer.setCustomertype(updatedCustomer.getCustomertype());\n        existingCustomer.setType(updatedCustomer.getType());\n        existingCustomer.setGroupname(updatedCustomer.getGroupname());\n        existingCustomer.setTurn(updatedCustomer.getTurn());\n        existingCustomer.setBatch(updatedCustomer.getBatch());\n        existingCustomer.setRegisterdate(updatedCustomer.getRegisterdate());\n        existingCustomer.setRegisterprice(updatedCustomer.getRegisterprice());\n        existingCustomer.setAdditional(updatedCustomer.getAdditional());\n        existingCustomer.setRegisterpath(updatedCustomer.getRegisterpath());\n        existingCustomer.setSpecialnote(updatedCustomer.getSpecialnote());\n        existingCustomer.setPrizewinning(updatedCustomer.getPrizewinning());\n        existingCustomer.setVotemachine(updatedCustomer.getVotemachine());\n\n        // 2. CustomerData 업데이트 (기본 생성되어 있으므로 null이 아님)\n        existingCustomer.getCustomerData().setName(updatedCustomer.getCustomerData().getName());\n        existingCustomer.getCustomerData().setPhone(updatedCustomer.getCustomerData().getPhone());\n        existingCustomer.getCustomerData().setResnumfront(updatedCustomer.getCustomerData().getResnumfront());\n        existingCustomer.getCustomerData().setResnumback(updatedCustomer.getCustomerData().getResnumback());\n        existingCustomer.getCustomerData().setEmail(updatedCustomer.getCustomerData().getEmail());\n\n        // 3. LegalAddress 업데이트\n        existingCustomer.getLegalAddress().setPostnumber(updatedCustomer.getLegalAddress().getPostnumber());\n        existingCustomer.getLegalAddress().setPost(updatedCustomer.getLegalAddress().getPost());\n        existingCustomer.getLegalAddress().setDetailaddress(updatedCustomer.getLegalAddress().getDetailaddress());\n\n        // 4. Postreceive 업데이트\n        existingCustomer.getPostreceive().setPostnumberreceive(updatedCustomer.getPostreceive().getPostnumberreceive());\n        existingCustomer.getPostreceive().setPostreceive(updatedCustomer.getPostreceive().getPostreceive());\n        existingCustomer.getPostreceive().setDetailaddressreceive(updatedCustomer.getPostreceive().getDetailaddressreceive());\n\n        // 5. Financial 업데이트\n        existingCustomer.getFinancial().setBankname(updatedCustomer.getFinancial().getBankname());\n        existingCustomer.getFinancial().setAccountnum(updatedCustomer.getFinancial().getAccountnum());\n        existingCustomer.getFinancial().setAccountholder(updatedCustomer.getFinancial().getAccountholder());\n\n        // 6. Deposits 업데이트\n        existingCustomer.getDeposits().setDepositdate(updatedCustomer.getDeposits().getDepositdate());\n        existingCustomer.getDeposits().setDepositammount(updatedCustomer.getDeposits().getDepositammount());\n\n        // 7. Responsible 업데이트 (null 체크)\n        if (updatedCustomer.getResponsible() != null) {\n            if (existingCustomer.getResponsible() == null) {\n                existingCustomer.setResponsible(new Responsible());\n            }\n            existingCustomer.getResponsible().setGeneralmanagement(updatedCustomer.getResponsible().getGeneralmanagement());\n            existingCustomer.getResponsible().setDivision(updatedCustomer.getResponsible().getDivision());\n            existingCustomer.getResponsible().setTeam(updatedCustomer.getResponsible().getTeam());\n            existingCustomer.getResponsible().setManagername(updatedCustomer.getResponsible().getManagername());\n        }\n\n        // 8. Dahim 업데이트\n        if (updatedCustomer.getDahim() != null) {\n            if (existingCustomer.getDahim() == null) {\n                existingCustomer.setDahim(new Dahim());\n            }\n            existingCustomer.getDahim().setDahimsisang(updatedCustomer.getDahim().getDahimsisang());\n            existingCustomer.getDahim().setDahimdate(updatedCustomer.getDahim().getDahimdate());\n            existingCustomer.getDahim().setDahimprepaid(updatedCustomer.getDahim().getDahimprepaid());\n            existingCustomer.getDahim().setDahimfirst(updatedCustomer.getDahim().getDahimfirst());\n            existingCustomer.getDahim().setDahimfirstpay(updatedCustomer.getDahim().getDahimfirstpay());\n            existingCustomer.getDahim().setDahimdate2(updatedCustomer.getDahim().getDahimdate2());\n            existingCustomer.getDahim().setDahimsource(updatedCustomer.getDahim().getDahimsource());\n            existingCustomer.getDahim().setDahimsecond(updatedCustomer.getDahim().getDahimsecond());\n            existingCustomer.getDahim().setDahimsecondpay(updatedCustomer.getDahim().getDahimsecondpay());\n            existingCustomer.getDahim().setDahimdate3(updatedCustomer.getDahim().getDahimdate3());\n            existingCustomer.getDahim().setDahimsum(updatedCustomer.getDahim().getDahimsum());\n        }\n\n        // 9. MGM 업데이트\n        if (updatedCustomer.getMgm() != null) {\n            if (existingCustomer.getMgm() == null) {\n                existingCustomer.setMgm(new MGM());\n            }\n            existingCustomer.getMgm().setMgmcompanyname(updatedCustomer.getMgm().getMgmcompanyname());\n            existingCustomer.getMgm().setMgmname(updatedCustomer.getMgm().getMgmname());\n            existingCustomer.getMgm().setMgminstitution(updatedCustomer.getMgm().getMgminstitution());\n            existingCustomer.getMgm().setMgmaccount(updatedCustomer.getMgm().getMgmaccount());\n        }\n\n        // 10. Firstemp 업데이트\n        if (updatedCustomer.getFirstemp() != null) {\n            if (existingCustomer.getFirstemp() == null) {\n                existingCustomer.setFirstemp(new Firstemp());\n            }\n            existingCustomer.getFirstemp().setFirstemptimes(updatedCustomer.getFirstemp().getFirstemptimes());\n            existingCustomer.getFirstemp().setFirstempdate(updatedCustomer.getFirstemp().getFirstempdate());\n        }\n\n        // 11. Secondemp 업데이트\n        if (updatedCustomer.getSecondemp() != null) {\n            if (existingCustomer.getSecondemp() == null) {\n                existingCustomer.setSecondemp(new Secondemp());\n            }\n            existingCustomer.getSecondemp().setSecondemptimes(updatedCustomer.getSecondemp().getSecondemptimes());\n            existingCustomer.getSecondemp().setSecondempdate(updatedCustomer.getSecondemp().getSecondempdate());\n        }\n\n        // 12. Meetingattend 업데이트\n        if (updatedCustomer.getMeetingattend() != null) {\n            if (existingCustomer.getMeetingattend() == null) {\n                existingCustomer.setMeetingattend(new Meetingattend());\n            }\n            existingCustomer.getMeetingattend().setHowtoattend(updatedCustomer.getMeetingattend().getHowtoattend());\n            existingCustomer.getMeetingattend().setFtofattend(updatedCustomer.getMeetingattend().getFtofattend());\n            existingCustomer.getMeetingattend().setSelfattend(updatedCustomer.getMeetingattend().getSelfattend());\n            existingCustomer.getMeetingattend().setBehalfattend(updatedCustomer.getMeetingattend().getBehalfattend());\n        }\n\n        // 13. Agenda 업데이트\n        if (updatedCustomer.getAgenda() != null) {\n            if (existingCustomer.getAgenda() == null) {\n                existingCustomer.setAgenda(new Agenda());\n            }\n            existingCustomer.getAgenda().setAgenda1(updatedCustomer.getAgenda().getAgenda1());\n            existingCustomer.getAgenda().setAgenda2_1(updatedCustomer.getAgenda().getAgenda2_1());\n            existingCustomer.getAgenda().setAgenda2_2(updatedCustomer.getAgenda().getAgenda2_2());\n            existingCustomer.getAgenda().setAgenda2_3(updatedCustomer.getAgenda().getAgenda2_3());\n            existingCustomer.getAgenda().setAgenda2_4(updatedCustomer.getAgenda().getAgenda2_4());\n            existingCustomer.getAgenda().setAgenda3(updatedCustomer.getAgenda().getAgenda3());\n            existingCustomer.getAgenda().setAgenda4(updatedCustomer.getAgenda().getAgenda4());\n            existingCustomer.getAgenda().setAgenda5(updatedCustomer.getAgenda().getAgenda5());\n            existingCustomer.getAgenda().setAgenda6(updatedCustomer.getAgenda().getAgenda6());\n            existingCustomer.getAgenda().setAgenda7(updatedCustomer.getAgenda().getAgenda7());\n            existingCustomer.getAgenda().setAgenda8(updatedCustomer.getAgenda().getAgenda8());\n            existingCustomer.getAgenda().setAgenda9(updatedCustomer.getAgenda().getAgenda9());\n            existingCustomer.getAgenda().setAgenda10(updatedCustomer.getAgenda().getAgenda10());\n        }\n\n        // 14. Attachments 업데이트 (첨부파일, 체크박스, 사은품 관련 등)\\n\n        existingCustomer.getAttachments().setIsuploaded(updatedCustomer.getAttachments().getIsuploaded());\n        existingCustomer.getAttachments().setSealcertificateprovided(updatedCustomer.getAttachments().getSealcertificateprovided());\n        existingCustomer.getAttachments().setSelfsignatureconfirmationprovided(updatedCustomer.getAttachments().getSelfsignatureconfirmationprovided());\n        existingCustomer.getAttachments().setCommitmentletterprovided(updatedCustomer.getAttachments().getCommitmentletterprovided());\n        existingCustomer.getAttachments().setIdcopyprovided(updatedCustomer.getAttachments().getIdcopyprovided());\n        existingCustomer.getAttachments().setFreeoption(updatedCustomer.getAttachments().getFreeoption());\n        existingCustomer.getAttachments().setForfounding(updatedCustomer.getAttachments().getForfounding());\n        existingCustomer.getAttachments().setAgreement(updatedCustomer.getAttachments().getAgreement());\n        existingCustomer.getAttachments().setPreferenceattachment(updatedCustomer.getAttachments().getPreferenceattachment());\n        existingCustomer.getAttachments().setPrizeattachment(updatedCustomer.getAttachments().getPrizeattachment());\n        existingCustomer.getAttachments().setExemption7(updatedCustomer.getAttachments().getExemption7());\n        existingCustomer.getAttachments().setInvestmentfile(updatedCustomer.getAttachments().getInvestmentfile());\n        existingCustomer.getAttachments().setContract(updatedCustomer.getAttachments().getContract());\n        existingCustomer.getAttachments().setFileinfo(updatedCustomer.getAttachments().getFileinfo());\n        existingCustomer.getAttachments().setPrizename(updatedCustomer.getAttachments().getPrizename());\n        existingCustomer.getAttachments().setPrizedate(updatedCustomer.getAttachments().getPrizedate());\n\n        customerService.saveCustomer(existingCustomer);\n        customerService.recalculateEverything(existingCustomer);\n\n        return ResponseEntity.ok(existingCustomer);\n    }\n\n\n    @GetMapping(\"/count/contracted\")\n    public ResponseEntity<Long> countContractedCustomers() {\n        long count = customerService.countContractedCustomers();\n        return ResponseEntity.ok(count);\n    }\n\n    @GetMapping(\"/count/fullypaid\")\n    public ResponseEntity<Long> countFullyPaidCustomers() {\n        long count = customerService.countFullyPaidOrNotOverdueCustomers();\n        return ResponseEntity.ok(count);\n    }\n}\n",
            "DepositHistoryController.java": "// src/main/java/com/audora/lotting_be/controller/DepositHistoryController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.repository.DepositHistoryRepository;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.DepositHistoryService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/deposit\") // 입금내역 관련 엔드포인트\npublic class DepositHistoryController {\n\n    @Autowired\n    private DepositHistoryService depositHistoryService;\n\n    @Autowired\n    private CustomerService customerService;\n\n    @Autowired\n    private DepositHistoryRepository depositHistoryRepository;\n\n    // [GET] 특정 고객의 입금내역 조회\n    // URL 예: GET /deposit/customer/123\n    @GetMapping(\"/customer/{userId}\")\n    public ResponseEntity<List<DepositHistory>> getDepositHistoriesByCustomerId(@PathVariable Integer userId) {\n        Customer customer = customerService.getCustomerById(userId);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n        List<DepositHistory> depositHistories = customer.getDepositHistories();\n        return ResponseEntity.ok(depositHistories);\n    }\n\n    // [GET] 단일 입금내역 조회\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<DepositHistory> getDepositHistoryById(@PathVariable Long id) {\n        Optional<DepositHistory> depositHistoryOpt = depositHistoryRepository.findById(id);\n        return depositHistoryOpt.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    // [POST] 입금내역 생성\n    @PostMapping\n    public ResponseEntity<DepositHistory> createDepositHistory(@RequestBody DepositHistory depositHistory) {\n        DepositHistory saved = depositHistoryService.createDepositHistory(depositHistory);\n        return ResponseEntity.ok(saved);\n    }\n\n    // [PUT] 입금내역 수정\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<DepositHistory> updateDepositHistory(\n            @PathVariable Long id,\n            @RequestBody DepositHistory updatedDepositHistory) {\n        DepositHistory updated = depositHistoryService.updateDepositHistory(id, updatedDepositHistory);\n        return ResponseEntity.ok(updated);\n    }\n\n    // [DELETE] 입금내역 삭제\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteDepositHistory(@PathVariable Long id) {\n        depositHistoryService.deleteDepositHistory(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n",
            "DepositListController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.service.DepositHistoryService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/depositlist\") // 입금 여부 한눈에 보는 페이지 전용\npublic class DepositListController {\n\n    private final DepositHistoryService depositHistoryService;\n\n    @Autowired\n    public DepositListController(DepositHistoryService depositHistoryService) {\n        this.depositHistoryService = depositHistoryService;\n    }\n\n    /**\n     * 모든 DepositHistory를 반환\n     */\n    @GetMapping\n    public ResponseEntity<List<DepositHistory>> getAllDepositHistory() {\n        List<DepositHistory> depositHistories = depositHistoryService.getAllDepositHistories();\n        return ResponseEntity.ok(depositHistories);\n    }\n}\n",
            "FeeController.java": "// FeeController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.service.FeeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/fees\")\npublic class FeeController {\n\n    @Autowired\n    private FeeService feeService;\n\n    /**\n     * 새로운 Fee 생성\n     *\n     * @param fee 생성할 Fee 객체\n     * @return 생성된 Fee 객체\n     */\n    @PostMapping\n    public ResponseEntity<Fee> createFee(@RequestBody Fee fee) {\n        Fee createdFee = feeService.createFee(fee);\n        return ResponseEntity.ok(createdFee);\n    }\n\n    /**\n     * ID로 Fee 조회\n     *\n     * @param id Fee의 ID\n     * @return Fee 객체 (존재할 경우)\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Fee> getFeeById(@PathVariable Long id) {\n        Fee fee = feeService.getFeeById(id);\n        if (fee != null) {\n            return ResponseEntity.ok(fee);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    /**\n     * 모든 Fee 조회\n     *\n     * @return 모든 Fee의 리스트\n     */\n    @GetMapping\n    public ResponseEntity<List<Fee>> getAllFees() {\n        List<Fee> fees = feeService.getAllFees();\n        return ResponseEntity.ok(fees);\n    }\n}\n",
            "FileController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.payload.response.MessageResponse;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.ExcelService;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.util.UriUtils;\n\nimport java.io.*;\nimport java.net.MalformedURLException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.*;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/files\")\npublic class FileController {\n\n    @Value(\"${file.upload-dir}\")\n    private String uploadDir;\n\n    // CustomerService 주입\n    @Autowired\n    private CustomerService customerService;\n\n    // 새로 추가된 ExcelService 주입\n    @Autowired\n    private ExcelService excelService;\n\n    /**\n     * 파일 업로드 예시 메서드\n     */\n    @PostMapping(\"/upload\")\n    public ResponseEntity<?> uploadFile(@RequestParam(\"file\") MultipartFile file) {\n        try {\n            String fileName = Paths.get(file.getOriginalFilename()).getFileName().toString();\n            Path path = Paths.get(uploadDir).resolve(fileName);\n            Files.createDirectories(path.getParent());\n            Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);\n            return ResponseEntity.ok(fileName); // 파일명 반환\n        } catch (IOException e) {\n            return ResponseEntity.status(500).body(\"Could not upload file: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * 파일 다운로드 예시 메서드\n     */\n    @GetMapping(\"/download\")\n    public ResponseEntity<Resource> downloadFile(@RequestParam(\"id\") Long id,\n                                                 @RequestParam(\"filename\") String filename) {\n        try {\n            Path filePath = Paths.get(uploadDir).resolve(filename).normalize();\n            Resource resource = new org.springframework.core.io.UrlResource(filePath.toUri());\n            if (!resource.exists()) {\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n            }\n\n            String contentType = Files.probeContentType(filePath);\n            if (contentType == null) {\n                // 확장자별 MIME 타입 지정\n                String extension = com.google.common.io.Files.getFileExtension(filePath.toString());\n                switch (extension.toLowerCase()) {\n                    case \"pdf\":\n                        contentType = \"application/pdf\";\n                        break;\n                    case \"jpg\":\n                    case \"jpeg\":\n                        contentType = \"image/jpeg\";\n                        break;\n                    case \"png\":\n                        contentType = \"image/png\";\n                        break;\n                    default:\n                        contentType = \"application/octet-stream\";\n                }\n            }\n\n            String encodedFileName = UriUtils.encode(resource.getFilename(), StandardCharsets.UTF_8);\n            return ResponseEntity.ok()\n                    .contentType(MediaType.parseMediaType(contentType))\n                    .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFileName)\n                    .body(resource);\n\n        } catch (MalformedURLException e) {\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n    }\n\n    /**\n     * 파일 삭제 예시 메서드\n     */\n    @DeleteMapping(\"/delete\")\n    public ResponseEntity<?> deleteFile(@RequestParam(\"filename\") String filename) {\n        try {\n            Path filePath = Paths.get(uploadDir).resolve(filename).normalize();\n            if (Files.exists(filePath)) {\n                Files.delete(filePath);\n                return ResponseEntity.ok(\"파일이 성공적으로 삭제되었습니다.\");\n            } else {\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"파일을 찾을 수 없습니다.\");\n            }\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"파일 삭제 중 오류가 발생했습니다: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * [신규] /format1/{id} 로 GET 요청이 들어올 때,\n     * - format1.xlsx 복사(TempFile)\n     * - {id}로 고객 정보 조회 & 엑셀 특정 셀들에 채워넣기 (ExcelService로 위임)\n     * - 완성본을 다운로드 응답 후, 복사본 파일은 삭제\n     * ------------------------------------------------------------------------\n     */\n    @GetMapping(\"/format1/{id}\")\n    public ResponseEntity<Resource> generateFormat1AndDownload(@PathVariable(\"id\") Integer id) {\n        // 1) 고객 조회\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        }\n\n        // 2) 템플릿 파일을 ClassPathResource로 불러오기\n        ClassPathResource templateResource = new ClassPathResource(\"excel_templates/format1.xlsx\");\n        if (!templateResource.exists()) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 3) 임시 파일 복사\n        File tempFile;\n        try {\n            tempFile = Files.createTempFile(\"format1-\", \".xlsx\").toFile();\n            try (InputStream is = templateResource.getInputStream()) {\n                Files.copy(is, tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n            }\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 4) ExcelService로 위임하여 엑셀에 데이터 기입\n        try {\n            excelService.fillFormat1(tempFile, customer);\n        } catch (IOException e) {\n            // 작업 실패 시 tempFile 삭제 후 에러 반환\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 5) tempFile -> 메모리에 올려 Resource로 변환, tempFile 삭제 후 반환\n        ByteArrayResource resource;\n        try {\n            byte[] fileBytes = Files.readAllBytes(tempFile.toPath());\n            resource = new ByteArrayResource(fileBytes);\n        } catch (IOException e) {\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        tempFile.delete();\n\n        String downloadFilename = \"일반 신청서.xlsx\";\n        String encodedFilename = UriUtils.encode(downloadFilename, StandardCharsets.UTF_8);\n\n        MediaType mediaType = MediaType.parseMediaType(\n                \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        );\n\n        return ResponseEntity.ok()\n                .contentType(mediaType)\n                .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFilename)\n                .body(resource);\n    }\n\n    @GetMapping(\"/format2/{id}\")\n    public ResponseEntity<Resource> generateFormat2AndDownload(@PathVariable(\"id\") Integer id) {\n        // 1) 고객 조회\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        }\n\n        // 2) 템플릿 파일을 ClassPathResource로 불러오기\n        ClassPathResource templateResource = new ClassPathResource(\"excel_templates/format2.xlsx\");\n        if (!templateResource.exists()) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 3) 임시 파일 복사\n        File tempFile;\n        try {\n            tempFile = Files.createTempFile(\"format2-\", \".xlsx\").toFile();\n            try (InputStream is = templateResource.getInputStream()) {\n                Files.copy(is, tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n            }\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 4) ExcelService로 위임하여 엑셀에 데이터 기입\n        try {\n            excelService.fillFormat2(tempFile, customer);\n        } catch (IOException e) {\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 5) 메모리에 올려서 다운로드 응답\n        ByteArrayResource resource;\n        try {\n            byte[] fileBytes = Files.readAllBytes(tempFile.toPath());\n            resource = new ByteArrayResource(fileBytes);\n        } catch (IOException e) {\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 임시 파일 삭제\n        tempFile.delete();\n\n        String downloadFilename = \"일반 부속 서류.xlsx\";\n        String encodedFilename = UriUtils.encode(downloadFilename, StandardCharsets.UTF_8);\n\n        MediaType mediaType = MediaType.parseMediaType(\n                \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        );\n\n        return ResponseEntity.ok()\n                .contentType(mediaType)\n                .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFilename)\n                .body(resource);\n    }\n\n    @PostMapping(\"/uploadExcel\")\n    public ResponseEntity<?> uploadExcelFile(@RequestParam(\"file\") MultipartFile file) {\n        try {\n            // ExcelService의 새로운 메서드를 호출하여 파일 파싱 및 DB 저장\n            System.out.println(\"엑셀파일 감지됨\");\n            excelService.processExcelFile(file);\n            return ResponseEntity.ok(new MessageResponse(\"엑셀 파일이 성공적으로 처리되었습니다.\"));\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(new MessageResponse(\"엑셀 파일 처리 중 오류가 발생했습니다.\"));\n        }\n    }\n}\n",
            "LateFeesController.java": "// src/main/java/com/audora/lotting_be/controller/LateFeesController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.payload.response.LateFeeInfo;\nimport com.audora.lotting_be.service.CustomerService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/latefees\")\npublic class LateFeesController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * GET /latefees\n     * 회원의 연체료 정보를 조회합니다.\n     *\n     * @param name   (선택 사항) 회원 이름\n     * @param number (선택 사항) 회원 번호\n     * @return LateFeeInfo 리스트\n     */\n    @GetMapping\n    public List<LateFeeInfo> getLateFees(\n            @RequestParam(required = false) String name,\n            @RequestParam(required = false) String number) {\n        return customerService.getLateFeeInfos(name, number);\n    }\n}\n",
            "PhaseController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.payload.request.PhaseModificationRequest;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.PhaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/phases\")\npublic class PhaseController {\n\n    @Autowired\n    private PhaseService phaseService;\n\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * Phase 업데이트 엔드포인트 (전체 필드 업데이트)\n     * PUT /phases/{id}\n     */\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Phase> updatePhase(@PathVariable Long id, @RequestBody Phase phaseDetails) {\n        Optional<Phase> optionalPhase = phaseService.getPhaseById(id);\n        if (!optionalPhase.isPresent()) {\n            return ResponseEntity.notFound().build();\n        }\n        Phase phase = optionalPhase.get();\n        phase.setPlanneddate(phaseDetails.getPlanneddate());\n        phase.setFullpaiddate(phaseDetails.getFullpaiddate());\n        phase.setCharge(phaseDetails.getCharge());\n        phase.setDiscount(phaseDetails.getDiscount());\n        phase.setExemption(phaseDetails.getExemption());\n        phase.setService(phaseDetails.getService());\n        phase.setMove(phaseDetails.getMove());\n        phase.setFeesum(phaseDetails.getFeesum());\n        phase.setCharged(phaseDetails.getCharged());\n        phase.setSum(phaseDetails.getSum());\n\n        Phase updatedPhase = phaseService.savePhase(phase);\n\n        // 변경된 Phase를 바탕으로 고객의 상태(Status) 업데이트\n        Customer customer = updatedPhase.getCustomer();\n        customerService.updateStatusFields(customer);\n        customerService.saveCustomer(customer);\n\n        return ResponseEntity.ok(updatedPhase);\n    }\n\n    /**\n     * Phase 조회 엔드포인트\n     * GET /phases/{id}\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Phase> getPhaseById(@PathVariable Long id) {\n        Optional<Phase> optionalPhase = phaseService.getPhaseById(id);\n        return optionalPhase.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    /**\n     * @param customerId  고객 id\n     * @param phaseNumber 수정할 phase 번호 (예: 1, 2, …)\n     * @param request     수정할 필드들을 담은 요청 DTO\n     * @return 수정된 Phase 객체\n     */\n    @PutMapping(\"/customer/{customerId}/phase/{phaseNumber}/modify\")\n    public ResponseEntity<Phase> modifyPhaseByCustomerAndPhaseNumber(@PathVariable Integer customerId,\n                                                                     @PathVariable Integer phaseNumber,\n                                                                     @RequestBody PhaseModificationRequest request) {\n        // 1. 고객 조회\n        Customer customer = customerService.getCustomerById(customerId);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n        // 2. 해당 고객의 phase 목록 중 phaseNumber에 해당하는 phase 찾기\n        Phase phase = null;\n        if (customer.getPhases() != null) {\n            phase = customer.getPhases().stream()\n                    .filter(p -> p.getPhaseNumber() != null && p.getPhaseNumber().equals(phaseNumber))\n                    .findFirst().orElse(null);\n        }\n        if (phase == null) {\n            return ResponseEntity.notFound().build();\n        }\n        // 3. 수정 허용 필드 업데이트\n        phase.setCharge(request.getCharge());\n        phase.setService(request.getService());\n        phase.setDiscount(request.getDiscount());\n        phase.setExemption(request.getExemption());\n        phase.setMove(request.getMove());\n\n        // 4. 전체 재계산 실행하여 납입금액, 대출/자납 관련 금액 등을 다시 계산\n        customerService.recalculateEverything(customer);\n\n        // 5. 수정된 phase 반환\n        return ResponseEntity.ok(phase);\n    }\n}\n"
        }
    },
    "model": {
        "__files__": {
            "codes.py": null,
            "directory_structure.json": null
        },
        "customer": {
            "__files__": {
                "Attachments.java": "// Attachments.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Attachments {\n    private Boolean isuploaded; // 파일 제출했는지 여부\n    private String fileinfo; // 파일 주소, 이름, 확장자\n\n    private Boolean exemption7; // 7차 면제\n    private Boolean investmentfile; //출자금\n    private Boolean contract; //지산 A동 계약서\n    private Boolean agreement; //총회동의서\n\n    private Boolean sealcertificateprovided; // 인감증명서 제출 여부\n    private Boolean selfsignatureconfirmationprovided; // 본인서명확인서 제출 여부\n    private Boolean idcopyprovided; // 신분증 사본 제출 여부\n    private Boolean commitmentletterprovided; // 확약서 제출 여부\n    private Boolean forfounding; //창준위용 제출여부\n    private Boolean freeoption; //무상옵션 제출여부\n    private Boolean preferenceattachment; //선호도조사 제출여부\n    private Boolean generalmeetingconsentformprovided; // 총회 동의서 제출 여부\n    private Boolean prizeattachment; // 사은품 제출 여부\n\n    private String prizename; //사은품명 *새로 추가한 항목\n    private LocalDate prizedate; //사은품지급일자 *새로 추가한 항목\n\n}\n",
                "Customer.java": "// src/main/java/com/audora/lotting_be/model/customer/Customer.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.audora.lotting_be.model.customer.minor.*;\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Data\n@EqualsAndHashCode(exclude = \"status\")\npublic class Customer {\n    @Id\n    private Integer id; // 관리번호\n\n    private String customertype; // 분류(회원)\n    private String type;         // 타입\n    private String groupname;    // 군\n    private String turn;         // 순번\n    private String temptype;     //임시동호\n    private String batch;        // 가입차순\n    private LocalDate registerdate; // 가입일자\n    private Long registerprice;     // 가입가\n    private String additional;      // 비고\n    private String registerpath;    // 가입경로\n    private String specialnote;     // 특이사항\n    private String prizewinning;    // 경품당첨\n    private String votemachine; //투표기기\n\n    @Embedded\n    private CustomerData customerData = new CustomerData(); // 가입자\n\n    @Embedded\n    private LegalAddress legalAddress = new LegalAddress();   // 법정주소\n\n    @Embedded\n    private Postreceive postreceive = new Postreceive();      // 우편물 수령주소\n\n    @Embedded\n    private Financial financial = new Financial();            // 금융기관\n\n    @Embedded\n    private Deposit deposits = new Deposit();                 // 예약금\n\n    @Embedded\n    private Attachments attachments = new Attachments();        // 부속서류\n\n    @Embedded\n    private Cancel cancel=new Cancel();                       //해약\n\n    // 기존 대출/자납 기록용 loan 필드\n    @Embedded\n    private Loan loan = new Loan();                           // 대출, 자납\n\n    @Embedded\n    private Responsible responsible = new Responsible();      // 담당\n\n    @Embedded\n    private Dahim dahim = new Dahim();                        // 다힘\n\n    @Embedded\n    private MGM mgm = new MGM();                              // MGM\n\n    @Embedded\n    private Firstemp firstemp = new Firstemp();               // 1차(직원)\n\n    @Embedded\n    private Secondemp secondemp = new Secondemp();            // 2차\n\n    @Embedded\n    private Meetingattend meetingattend = new Meetingattend();  // 총회참석여부\n\n    @Embedded\n    private Agenda agenda = new Agenda();        // 안건\n\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<Phase> phases; // n차\n\n    @OneToOne(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private Status status; // 현 상태\n\n    // 여러 입금내역\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference(value = \"customer-depositHistories\")\n    private List<DepositHistory> depositHistories;\n}\n",
                "DepositHistory.java": "package com.audora.lotting_be.model.customer;\n\nimport com.audora.lotting_be.model.customer.minor.Loan;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Entity\n@Data\npublic class DepositHistory {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    // 거래일시\n    private LocalDateTime transactionDateTime;\n\n    // 적요\n    private String description;\n\n    // 기재내용 (예: 고객명 + 상태)\n    private String details;\n\n    // 계약자 (고객명 등)\n    private String contractor;\n\n    // 찾으신금액 (예: 다시 뽑은 금액)\n    private Long withdrawnAmount;\n\n    // 맡기신금액 (입금액)\n    private Long depositAmount;\n\n    // 거래후 잔액 (계산된 잔액 등, 우선 단순 기재)\n    private Long balanceAfter;\n\n    // 취급점 (은행/지점)\n    private String branch;\n\n    // 계좌 (알파벳 단축어 등)\n    private String account;\n\n    // 1~10차 입금여부 (기존 depositPhaseN 필드들)\n    // \"1\": 이번 입금에서 해당 차수에 '처음' 돈이 들어감\n    // \"0\": 이번 입금에서 해당 차수에 '추가' 돈이 들어감\n    // null 또는 \"\" : 이번 입금에서 해당 차수에 분배되지 않음\n    private String depositPhase1;\n    private String depositPhase2;\n    private String depositPhase3;\n    private String depositPhase4;\n    private String depositPhase5;\n    private String depositPhase6;\n    private String depositPhase7;\n    private String depositPhase8;\n    private String depositPhase9;\n    private String depositPhase10;\n\n    // 대출/자납 여부: \"o\" = 대출/자납 입금, 아니면 일반 입금\n    private String loanStatus;\n\n    // 대출 일자\n    private LocalDate loanDate;\n\n    // 비고 (메모)\n    private String remarks;\n\n    // ★ [임베디드] 대출/자납 상세 정보\n    @Embedded\n    @AttributeOverrides({\n            @AttributeOverride(name = \"loandate\", column = @Column(name = \"loan_details_loandate\")),\n            @AttributeOverride(name = \"loanbank\", column = @Column(name = \"loan_details_loanbank\")),\n            @AttributeOverride(name = \"loanammount\", column = @Column(name = \"loan_details_loanammount\")),\n            @AttributeOverride(name = \"selfdate\", column = @Column(name = \"loan_details_selfdate\")),\n            @AttributeOverride(name = \"selfammount\", column = @Column(name = \"loan_details_selfammount\")),\n            @AttributeOverride(name = \"loanselfsum\", column = @Column(name = \"loan_details_loanselfsum\")),\n            @AttributeOverride(name = \"loanselfcurrent\", column = @Column(name = \"loan_details_loanselfcurrent\"))\n    })\n    private Loan loanDetails;\n\n    // ★ [신규] 어느 phase에 얼마를 분배할지 지정 (대출/자납용)\n    @ElementCollection\n    @CollectionTable(name = \"deposit_history_target_phases\",\n            joinColumns = @JoinColumn(name = \"deposit_history_id\"))\n    @Column(name = \"target_phase\")\n    private List<Integer> targetPhases;\n\n    // ★ [신규] 첫 번째 대출이면 \"1\", 두 번째 이상이면 \"0\"\n    private String loanRecord;\n\n    // ★ [신규] 첫 번째 자납이면 \"1\", 두 번째 이상이면 \"0\"\n    private String selfRecord;\n\n    // DepositHistory는 하나의 고객에 종속됨\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference(value = \"customer-depositHistories\")\n    private Customer customer;\n}\n",
                "Phase.java": "package com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Entity\n@Data\npublic class Phase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber;      // 차수\n    private LocalDate planneddate;      // 예정일자\n    private String planneddateString;   // 원래 예정일자 (문자열)\n    private LocalDate fullpaiddate;     // 완납일자\n    private Long charge;              // 부담금 (원금)\n    private Long discount;            // 할인액 (실제 납부액에서는 차감)\n    private Long exemption;           // 면제금액\n    private Long service;             // 업무대행비\n    private Long feesum;              // 총 부담금 = charge + service - exemption\n    private String move;//이동\n    private Long charged;           // 입금(Deposit)으로 지급된 금액 (할인액 반영)\n    private Long loanCharged;       // 대출/자납으로 지급된 금액 (할인액 무시; 인정금액)\n    private Long sum;               // 미납금 = (feesum - discount) - charged\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n",
                "Status.java": "// Status.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n@Entity\n@Data\n@EqualsAndHashCode(exclude = \"customer\") // customer 필드 제외\npublic class Status {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Long exemptionsum; // 총면제금액\n    private Long unpaidammout; // 미납금액\n    private String unpaidphase; // 미납차순 (1,2,3,...)\n    private Long prepaidammount; // 기납부금액\n    private Long ammountsum; // 1~n차 납입총액\n    private Long percent40; // 40%\n\n    // 새로 추가된 필드들\n    private Long exceedamount;      // 초과된 예약금(입금) 금액\n    private Long loanExceedAmount;  // 초과된 대출/자납 금액\n\n    @OneToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n"
            },
            "minor": {
                "__files__": {
                    "Agenda.java": "package com.audora.lotting_be.model.customer.minor;\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Agenda {\n\n    private String agenda1;     // 제1호\n    private String agenda2_1;   // 제2-1호\n    private String agenda2_2;   // 제2-2호\n    private String agenda2_3;   // 제2-3호\n    private String agenda2_4;   // 제2-4호\n    private String agenda3;     // 제3호\n    private String agenda4;     // 제4호\n    private String agenda5;     // 제5호\n    private String agenda6;     // 제6호\n    private String agenda7;     // 제7호\n    private String agenda8;     // 제8호\n    private String agenda9;     // 제9호\n    private String agenda10;    // 제10호\n\n    @OneToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n",
                    "Cancel.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Cancel {\n\n    private LocalDate canceldate; //해지일자\n    private LocalDate refunddate; //환급일자\n    private Integer refundamount; //환급금\n}",
                    "CustomerData.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class CustomerData {\n    private String name; //성명\n    private Integer resnumfront; //주민번호 앞자리\n    private Integer resnumback; //주민번호 뒷자리\n    private String phone; //휴대전화\n    private String email; // E-mail\n}",
                    "Dahim.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Dahim {\n    private String dahimsisang; //시상\n    private LocalDate dahimdate; //일자\n    private String dahimprepaid; //6/30선지금\n    private String dahimfirst; //1회차청구\n    private String dahimfirstpay; //(1회차?)금액\n    private LocalDate dahimdate2; //일자2\n    private String dahimsource; //출처\n    private String dahimsecond; //2회차청구\n    private String dahimsecondpay; //(2회차?)금액\n    private LocalDate dahimdate3; //일자3\n    private String dahimsum; //합계\n}",
                    "Deposit.java": "// src/main/java/com/audora/lotting_be/model/customer/Deposit.java\n\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Deposit {\n    private LocalDate depositdate; //납입일자\n    private Long depositammount; //금액\n\n}\n",
                    "Financial.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Financial {\n    private String bankname; //은행명\n    private String accountnum; //계좌번호\n    private String accountholder; //예금주\n    private String trustcompany; //신탁사\n}",
                    "Firstemp.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Firstemp {\n    private String firstemptimes; //차순\n    private LocalDate firstempdate; //지급일자\n}\n",
                    "LegalAddress.java": "// src/main/java/com/audora/lotting_be/model/customer/LegalAddress.java\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class LegalAddress {\n    private String postnumber; //우편번호\n    private String post; //주소\n    private String detailaddress; //상세주소\n}\n\n",
                    "Loan.java": "// Loan.java\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Loan {\n    private LocalDate loandate; //대출일자\n    private String loanbank; //은행\n    private Long loanammount; //대출액\n    private LocalDate selfdate; //자납일\n    private Long selfammount; //자납액\n    private Long loanselfsum; //합계\n    private Long loanselfcurrent; //잔액\n}\n",
                    "Meetingattend.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Meetingattend {\n    private String howtoattend;    // 참석방법 (나중에 셀 합칠 때 대비)\n    private String ftofattend;     // 서면\n    private String selfattend;     // 직접\n    private String behalfattend;   // 대리\n}\n",
                    "MGM.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class MGM {\n    private Long mgmfee; //수수료\n    private String mgmcompanyname; //업체명\n    private String mgmname; //이름\n    private String mgminstitution; //기관\n    private String mgmaccount; //계좌\n}",
                    "Postreceive.java": "// src/main/java/com/audora/lotting_be/model/customer/Postreceive.java\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Postreceive {\n    private String postnumberreceive; //우편번호\n    private String postreceive; //주소\n    private String detailaddressreceive; //상세주소\n}\n",
                    "Responsible.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Responsible {\n    private String generalmanagement; //총괄\n    private String division; //본부\n    private String team; //팀\n    private String managername; //담당자 성명\n    private String feepaid; //수수료 지급\n}",
                    "Secondemp.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Secondemp {\n    private String secondemptimes; //차순\n    private LocalDate secondempdate; //지급일자\n}\n"
                }
            }
        },
        "Fee": {
            "__files__": {
                "Fee.java": "// Fee.java\npackage com.audora.lotting_be.model.Fee;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Fee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String groupname; //군\n    private String floor; //층\n    private String batch; //가입차순 (1차, 2차 등등)\n    private String type; //타입\n    private Double supplyarea; //공급면적\n    private Double priceperp; //평당가\n    private Long price; //금액\n    private Double paymentratio; //납입비율\n    private Long paysum; //합계\n\n    @OneToMany(mappedBy = \"fee\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<FeePerPhase> feePerPhases;\n}\n",
                "FeePerPhase.java": "// FeePerPhase.java\npackage com.audora.lotting_be.model.Fee;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class FeePerPhase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber; //n차\n    private Long phasefee; //금액\n    private String phasedate; //제출일\n\n    @ManyToOne\n    @JsonBackReference\n    @JoinColumn(name = \"fee_id\")\n    private Fee fee;\n}\n"
            }
        },
        "manager": {
            "__files__": {
                "Manager.java": "// src/main/java/com/audora/lotting_be/model/manager/Manager.java\npackage com.audora.lotting_be.model.manager;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.Set;\n\n@Entity\n@Data\n@Table(name = \"managers\")\npublic class Manager {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, unique = true)\n    private String username;\n\n    @Column(nullable = false)\n    private String password;\n\n    // 역할을 확장할 수 있도록 Set으로 정의\n    @ElementCollection(fetch = FetchType.EAGER)\n    @CollectionTable(name = \"manager_roles\", joinColumns = @JoinColumn(name = \"manager_id\"))\n    @Column(name = \"role\")\n    private Set<String> roles;\n}\n"
            }
        }
    },
    "payload": {
        "request": {
            "__files__": {
                "LoginRequest.java": "// src/main/java/com/audora/lotting_be/payload/request/LoginRequest.java\npackage com.audora.lotting_be.payload.request;\n\nimport lombok.Data;\n\n@Data\npublic class LoginRequest {\n    private String username;\n    private String password;\n}\n",
                "PhaseModificationRequest.java": "package com.audora.lotting_be.payload.request;\n\nimport lombok.Data;\n\n@Data\npublic class PhaseModificationRequest {\n    // 수정 허용 필드\n    private Long charge;      // 부담금\n    private Long service;     // 업무대행비\n    private Long discount;    // 할인액\n    private Long exemption;   // 면제액\n    private String move;      // 이동\n}\n",
                "SignupRequest.java": "// src/main/java/com/audora/lotting_be/payload/request/SignupRequest.java\npackage com.audora.lotting_be.payload.request;\n\nimport lombok.Data;\nimport java.util.Set;\n\n@Data\npublic class SignupRequest {\n    private String username;\n    private String email; // 필요시 추가\n    private String password;\n    private Set<String> roles;\n}\n"
            }
        },
        "response": {
            "__files__": {
                "CustomerDepositDTO.java": "package com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\n\n@Data\npublic class CustomerDepositDTO {\n\n    // 회원번호\n    private Integer memberNumber;\n\n    // 마지막 거래 일시\n    private LocalDateTime lastTransactionDateTime;\n\n    // 적요 (임시)\n    private String remarks;\n\n    // 기재내용 (메모 역할)\n    private String memo;\n\n    // 계약자\n    private String contractor;\n\n    // 찾으신 금액 (환불받은 금액)\n    private Long withdrawnAmount;\n\n    // 맡기신 금액 (지금까지 입금한 금액)\n    private Long depositAmount;\n\n    // 취급점(은행/지점)\n    private String bankBranch;\n\n    // 계좌 (h, g, f, e 중 하나)\n    private String account;\n\n    // 예약 (의미 불명확, 임시)\n    private String reservation;\n\n    // 1차~10차 입금 상태\n    private String depositPhase1;\n    private String depositPhase2;\n    private String depositPhase3;\n    private String depositPhase4;\n    private String depositPhase5;\n    private String depositPhase6;\n    private String depositPhase7;\n    private String depositPhase8;\n    private String depositPhase9;\n    private String depositPhase10;\n\n    // 대출금액\n    private Long loanAmount;\n\n    // 대출일자\n    private LocalDate loanDate;\n\n    // 임시\n    private String temporary;\n\n    // 비고\n    private String note;\n}\n",
                "JwtResponse.java": "// src/main/java/com/audora/lotting_be/payload/response/JwtResponse.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\nimport java.util.List;\n\n@Data\npublic class JwtResponse {\n    private String token;\n    private String type = \"Bearer\";\n    private Long id;\n    private String username;\n    private List<String> roles;\n\n    public JwtResponse(String accessToken, Long id, String username, List<String> roles) {\n        this.token = accessToken;\n        this.id = id;\n        this.username = username;\n        this.roles = roles;\n    }\n}\n",
                "LateFeeInfo.java": "// src/main/java/com/audora/lotting_be/payload/response/LateFeeInfo.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Data\npublic class LateFeeInfo {\n    private Integer id; // 관리번호\n    private Integer lastUnpaidPhaseNumber; // 마지막 미납 차수\n    private String customertype; // 고객 유형\n    private String name; // 성명\n    private LocalDate registerdate; // 가입일자\n    private LocalDate lateBaseDate; // 연체기준일\n    private LocalDate recentPaymentDate; // 최근납부일자\n    private Long daysOverdue; // 일수\n    private Double lateRate; // 연체율 (%)\n    private Long overdueAmount; // 연체금액\n    private Long paidAmount; // 납입금액\n    private Double lateFee; // 연체료\n    private Long totalOwed; // 내야할 돈 합계\n}\n",
                "MessageResponse.java": "// src/main/java/com/audora/lotting_be/payload/response/MessageResponse.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\n\n@Data\npublic class MessageResponse {\n    private String message;\n\n    public MessageResponse(String message) {\n        this.message = message;\n    }\n}\n"
            }
        }
    },
    "repository": {
        "__files__": {
            "CustomerRepository.java": "// src/main/java/com/audora/lotting_be/repository/CustomerRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\n\npublic interface CustomerRepository extends JpaRepository<Customer, Integer> {\n    @Query(value = \"SELECT COALESCE(MAX(id), 0) + 1 FROM customer\", nativeQuery = true)\n    Integer getNextId();\n\n    List<Customer> findByCustomerDataNameContaining(String name);\n\n    List<Customer> findByCustomerDataNameAndId(String name, Integer id);\n\n    // 정계약한(customertype = 'c') 고객의 수를 세는 쿼리\n    long countByCustomertype(String customertype);\n\n    /**\n     * ID가 특정 부분 문자열을 포함하는 고객을 찾습니다.\n     *\n     * 주의: 사용하는 데이터베이스에 따라 CAST 함수의 문법을 조정해야 합니다.\n     * 예를 들어, PostgreSQL에서는 CAST(id AS TEXT)를 사용합니다.\n     */\n    @Query(value = \"SELECT * FROM customer WHERE CAST(id AS CHAR) LIKE %:idPart%\", nativeQuery = true)\n    List<Customer> findByIdContaining(@Param(\"idPart\") String idPart);\n\n    @Query(value = \"SELECT * FROM customer WHERE name LIKE CONCAT('%', :name, '%') AND CAST(id AS CHAR) LIKE CONCAT('%', :idPart, '%')\", nativeQuery = true)\n    List<Customer> findByNameContainingAndIdContaining(@Param(\"name\") String name, @Param(\"idPart\") String idPart);\n\n}\n",
            "DepositHistoryRepository.java": "// src/main/java/com/audora/lotting_be/repository/DepositHistoryRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface DepositHistoryRepository extends JpaRepository<DepositHistory, Long> {\n}\n",
            "FeeRepository.java": "// FeeRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface FeeRepository extends JpaRepository<Fee, Long> {\n    Fee findByGroupnameAndBatch(String groupname, String batch);\n}\n",
            "ManagerRepository.java": "// src/main/java/com/audora/lotting_be/repository/ManagerRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.Optional;\n\npublic interface ManagerRepository extends JpaRepository<Manager, Long> {\n    Optional<Manager> findByUsername(String username);\n    Boolean existsByUsername(String username);\n}\n",
            "PhaseRepository.java": "package com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.List;\n\npublic interface PhaseRepository extends JpaRepository<Phase, Long> {\n    List<Phase> findByCustomerId(Integer customerId);\n}\n"
        }
    },
    "security": {
        "__files__": {
            "AuthTokenFilter.java": "// src/main/java/com/audora/lotting_be/security/AuthTokenFilter.java\npackage com.audora.lotting_be.security;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.security.authentication.*;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\n@Component\npublic class AuthTokenFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private JwtUtils jwtUtils;\n\n    @Autowired\n    private UserDetailsServiceImpl userDetailsService;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                    HttpServletResponse response,\n                                    FilterChain filterChain)\n            throws ServletException, IOException {\n        try {\n            String jwt = parseJwt(request);\n            if (jwt != null && jwtUtils.validateJwtToken(jwt)) {\n                String username = jwtUtils.getUserNameFromJwtToken(jwt);\n\n                UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n                UsernamePasswordAuthenticationToken authentication =\n                        new UsernamePasswordAuthenticationToken(\n                                userDetails, null, userDetails.getAuthorities());\n\n                authentication.setDetails(\n                        new WebAuthenticationDetailsSource().buildDetails(request));\n\n                SecurityContextHolder.getContext().setAuthentication(authentication);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Cannot set user authentication: \" + e);\n        }\n\n        filterChain.doFilter(request, response);\n    }\n\n    private String parseJwt(HttpServletRequest request) {\n        String headerAuth = request.getHeader(\"Authorization\");\n\n        if (StringUtils.hasText(headerAuth) &&\n                headerAuth.startsWith(\"Bearer \")) {\n            return headerAuth.substring(7);\n        }\n\n        return null;\n    }\n}\n",
            "JwtUtils.java": "// src/main/java/com/audora/lotting_be/security/JwtUtils.java\npackage com.audora.lotting_be.security;\n\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.security.Keys;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport java.nio.charset.StandardCharsets;\nimport java.security.Key;\nimport java.util.Date;\nimport jakarta.annotation.PostConstruct;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Component\npublic class JwtUtils {\n\n    private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);\n\n    @Value(\"${jwt.secret}\")\n    private String jwtSecret;\n\n    @Value(\"${jwt.expirationMs}\")\n    private int jwtExpirationMs;\n\n    private Key key;\n\n    @PostConstruct\n    public void init() {\n        if (jwtSecret == null || jwtSecret.length() < 32) {\n            throw new IllegalArgumentException(\"JWT Secret must be at least 32 characters long.\");\n        }\n        this.key = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));\n        logger.info(\"JWT Key initialized successfully.\");\n    }\n\n    public String generateJwtToken(UserDetailsImpl userDetails) {\n        return Jwts.builder()\n                .setSubject(userDetails.getUsername())\n                .setIssuedAt(new Date())\n                .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))\n                .signWith(key, SignatureAlgorithm.HS512)\n                .compact();\n    }\n\n    public String getUserNameFromJwtToken(String token) {\n        return Jwts.parserBuilder()\n                .setSigningKey(key)\n                .build()\n                .parseClaimsJws(token)\n                .getBody()\n                .getSubject();\n    }\n\n    public boolean validateJwtToken(String authToken) {\n        try {\n            Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(authToken);\n            return true;\n        } catch (JwtException e) {\n            logger.error(\"JWT validation error: {}\", e.getMessage());\n        }\n        return false;\n    }\n}\n",
            "UserDetailsImpl.java": "// src/main/java/com/audora/lotting_be/security/UserDetailsImpl.java\npackage com.audora.lotting_be.security;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport lombok.Data;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport java.util.Collection;\nimport java.util.stream.Collectors;\n\n@Data\npublic class UserDetailsImpl implements UserDetails {\n\n    private Long id;\n    private String username;\n\n    @JsonIgnore\n    private String password;\n\n    private Collection<? extends GrantedAuthority> authorities;\n\n    public UserDetailsImpl(Long id, String username, String password,\n                           Collection<? extends GrantedAuthority> authorities) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.authorities = authorities;\n    }\n\n    public static UserDetailsImpl build(Manager manager) {\n        Collection<GrantedAuthority> authorities = manager.getRoles().stream()\n                .map(role -> (GrantedAuthority) () -> \"ROLE_\" + role.toUpperCase())\n                .collect(Collectors.toList());\n\n        return new UserDetailsImpl(\n                manager.getId(),\n                manager.getUsername(),\n                manager.getPassword(),\n                authorities);\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return authorities;\n    }\n\n    // 기타 메서드는 기본 구현을 따릅니다\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n",
            "UserDetailsServiceImpl.java": "// src/main/java/com/audora/lotting_be/security/UserDetailsServiceImpl.java\npackage com.audora.lotting_be.security;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.audora.lotting_be.repository.ManagerRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.*;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Autowired\n    ManagerRepository managerRepository;\n\n    @Override\n    @Transactional\n    public UserDetails loadUserByUsername(String username)\n            throws UsernameNotFoundException {\n        Manager manager = managerRepository.findByUsername(username)\n                .orElseThrow(() ->\n                        new UsernameNotFoundException(\"Manager Not Found with username: \" + username));\n\n        return UserDetailsImpl.build(manager);\n    }\n}\n"
        }
    },
    "service": {
        "__files__": {
            "CustomerService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.model.customer.Status;\nimport com.audora.lotting_be.model.customer.minor.Loan;\nimport com.audora.lotting_be.payload.response.CustomerDepositDTO;\nimport com.audora.lotting_be.payload.response.LateFeeInfo;\nimport com.audora.lotting_be.repository.CustomerRepository;\nimport com.audora.lotting_be.repository.DepositHistoryRepository;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.stream.Collectors;\nimport java.util.Comparator;\n\n@Service\npublic class CustomerService {\n\n    @Autowired\n    private CustomerRepository customerRepository;\n    @Autowired\n    private FeeRepository feeRepository;\n    @Autowired\n    private DepositHistoryRepository depositHistoryRepository;\n\n    // ================================================\n    // 1) 고객 생성 및 초기 Phase 설정\n    // ================================================\n    public Customer createCustomer(Customer customer) {\n        if (customerRepository.existsById(customer.getId())) {\n            throw new IllegalArgumentException(\"이미 존재하는 관리번호입니다.\");\n        }\n        // Fee 조회 (groupname = type+groupname, batch = 가입차순)\n        Fee fee = feeRepository.findByGroupnameAndBatch(\n                customer.getType() + customer.getGroupname(),\n                customer.getBatch()\n        );\n        // FeePerPhase 정보를 바탕으로 Phase 초기화\n        if (fee != null) {\n            List<FeePerPhase> feePerPhases = fee.getFeePerPhases();\n            List<Phase> phases = new ArrayList<>();\n            for (FeePerPhase fpp : feePerPhases) {\n                Phase phase = new Phase();\n                phase.setPhaseNumber(fpp.getPhaseNumber());\n                long charge = (fpp.getPhasefee() != null) ? fpp.getPhasefee() : 0L;\n                phase.setCharge(charge);\n                phase.setService(0L);\n                phase.setExemption(0L);\n                long feesum = charge; // (service=0, exemption=0이므로)\n                phase.setFeesum(feesum);\n                phase.setCharged(0L);\n                long discountVal = (phase.getDiscount() != null) ? phase.getDiscount() : 0L;\n                phase.setSum(feesum - discountVal);\n                // 예정일자 문자열을 LocalDate로 변환\n                phase.setPlanneddateString(fpp.getPhasedate());\n                LocalDate plannedDate = calculatePlannedDate(customer.getRegisterdate(), fpp.getPhasedate());\n                phase.setPlanneddate(plannedDate);\n                phase.setFullpaiddate(null);\n                // 양방향 관계 설정\n                phase.setCustomer(customer);\n                phases.add(phase);\n            }\n            customer.setPhases(phases);\n        }\n        // Status가 없으면 새로 생성\n        if (customer.getStatus() == null) {\n            Status status = new Status();\n            status.setCustomer(customer);\n            customer.setStatus(status);\n        }\n        // 고객 저장 후 전체 재계산\n        customer = customerRepository.save(customer);\n        recalculateEverything(customer);\n        return customer;\n    }\n\n    // ================================================\n    // 2) 전체 재계산 (핵심 로직)\n    // ================================================\n    /**\n     * 전체 재계산:\n     * (1) 각 Phase의 charged, feesum, fullpaiddate 초기화\n     * (2) 모든 DepositHistory를 순차 처리하여 입금액을 Phase에 배분\n     *     단, 해당 DepositHistory의 depositPhase 필드에 예상치 못한 값이 있으면\n     *     해당 기록은 배분 계산에서 제외합니다.\n     * (3) 대출/자납 입금의 경우, 누적 금액(runningLoanPool)을 targetPhases에 배분하고,\n     *     동시에 해당 거래가 대출, 자납, 또는 둘 다인지를 loan_details 값을 통해 판단하여,\n     *     대출이면 loan_record, 자납이면 self_record를 첫 거래에 \"1\", 그 이후에 \"0\"으로 기록합니다.\n     * (4) 남은 일반 입금과 대출/자납 입금 잔액을 Status에 반영\n     * (5) Loan 필드를 업데이트하여, 대출과 자납 금액을 별도로 누적\n     * (6) 최종 저장\n     */\n    public void recalculateEverything(Customer customer) {\n        // 1) 각 Phase 초기화\n        if (customer.getPhases() != null) {\n            for (Phase phase : customer.getPhases()) {\n                phase.setCharged(0L);\n                phase.setFullpaiddate(null);\n                long charge = (phase.getCharge() != null) ? phase.getCharge() : 0L;\n                long service = (phase.getService() != null) ? phase.getService() : 0L;\n                long exemption = (phase.getExemption() != null) ? phase.getExemption() : 0L;\n                long feesum = charge + service - exemption;\n                phase.setFeesum(feesum);\n                long discountVal = (phase.getDiscount() != null) ? phase.getDiscount() : 0L;\n                phase.setSum(feesum - discountVal);\n            }\n        }\n        // 2) 각 Phase별 누적 입금액 맵 초기화\n        Map<Integer, Long> cumulativeDeposits = new HashMap<>();\n        if (customer.getPhases() != null) {\n            for (Phase p : customer.getPhases()) {\n                cumulativeDeposits.put(p.getPhaseNumber(), 0L);\n            }\n        }\n        // 3) DepositHistory 처리\n        List<DepositHistory> histories = customer.getDepositHistories();\n        long leftoverGeneral = 0L;\n        AtomicLong runningLoanPool = new AtomicLong(0L);\n        // 새로운 플래그: 대출, 자납 각각 첫 거래 여부\n        boolean firstLoanProcessed = false;\n        boolean firstSelfProcessed = false;\n        if (histories != null && !histories.isEmpty()) {\n            // 거래일시 순으로 정렬\n            histories.sort(Comparator.comparing(DepositHistory::getTransactionDateTime));\n            for (DepositHistory dh : histories) {\n                // depositPhase1에 예상치 못한 값이 있으면 해당 입금은 계산에 포함하지 않음.\n                String dp1 = dh.getDepositPhase1();\n                if (dp1 != null && !( \"0\".equals(dp1) || \"1\".equals(dp1) || \"2\".equals(dp1) )) {\n                    continue;\n                }\n                if (\"o\".equalsIgnoreCase(dh.getLoanStatus())) {\n                    // 대출/자납 입금 처리\n                    boolean hasLoan = false;\n                    boolean hasSelf = false;\n                    if (dh.getLoanDetails() != null) {\n                        if (dh.getLoanDetails().getLoanammount() != null && dh.getLoanDetails().getLoanammount() > 0) {\n                            hasLoan = true;\n                        }\n                        if (dh.getLoanDetails().getSelfammount() != null && dh.getLoanDetails().getSelfammount() > 0) {\n                            hasSelf = true;\n                        }\n                    }\n                    if (hasLoan) {\n                        if (!firstLoanProcessed) {\n                            dh.setLoanRecord(\"1\");\n                            firstLoanProcessed = true;\n                        } else {\n                            dh.setLoanRecord(\"0\");\n                        }\n                    } else {\n                        dh.setLoanRecord(null);\n                    }\n                    if (hasSelf) {\n                        if (!firstSelfProcessed) {\n                            dh.setSelfRecord(\"1\");\n                            firstSelfProcessed = true;\n                        } else {\n                            dh.setSelfRecord(\"0\");\n                        }\n                    } else {\n                        dh.setSelfRecord(null);\n                    }\n                    long depositAmt = (dh.getDepositAmount() != null ? dh.getDepositAmount() : 0L);\n                    runningLoanPool.addAndGet(depositAmt);\n                    distributeLoanDepositPaymentToPhases(customer, dh, cumulativeDeposits, runningLoanPool);\n                } else {\n                    // 일반 입금 처리\n                    long leftover = distributeDepositPaymentToPhases(customer, dh, cumulativeDeposits);\n                    leftoverGeneral += leftover;\n                }\n                depositHistoryRepository.save(dh);\n            }\n        }\n        long leftoverLoan = runningLoanPool.get();\n        // 4) Status 업데이트\n        Status st = customer.getStatus();\n        if (st == null) {\n            st = new Status();\n            st.setCustomer(customer);\n            customer.setStatus(st);\n        }\n        st.setExceedamount(leftoverGeneral);\n        st.setLoanExceedAmount(leftoverLoan);\n        // 5) Status 및 Loan 필드 업데이트\n        updateStatusFields(customer);\n        updateLoanField(customer);\n        customerRepository.save(customer);\n    }\n\n    // ================================================\n    // 3-1) 일반 입금 분배 로직\n    // ================================================\n    /**\n     * DepositHistory(일반 입금)의 입금액을 Phase별로 배분하고 남은 금액(leftover)을 반환합니다.\n     * 단, 해당 DepositHistory의 depositPhase1에 예상치 못한 값이 있으면,\n     * 배분을 전혀 수행하지 않고 depositAmount 전체를 남김으로 처리합니다.\n     */\n    public long distributeDepositPaymentToPhases(Customer customer,\n                                                 DepositHistory dh,\n                                                 Map<Integer, Long> cumulativeDeposits) {\n        // depositPhase1에 예상치 못한 값이 있으면 배분하지 않음.\n        String dp1 = dh.getDepositPhase1();\n        if (dp1 != null && !( \"0\".equals(dp1) || \"1\".equals(dp1) || \"2\".equals(dp1) )) {\n            return (dh.getDepositAmount() != null ? dh.getDepositAmount() : 0L);\n        }\n        long depositAmt = (dh.getDepositAmount() != null ? dh.getDepositAmount() : 0L);\n        long remaining = depositAmt;\n        List<Phase> phases = customer.getPhases();\n        if (phases != null) {\n            phases.sort(Comparator.comparingInt(Phase::getPhaseNumber));\n        }\n        for (Phase phase : phases) {\n            int phaseNo = phase.getPhaseNumber();\n            long already = cumulativeDeposits.getOrDefault(phaseNo, 0L);\n            long feesum = (phase.getFeesum() != null) ? phase.getFeesum() : 0L;\n            long discount = (phase.getDiscount() != null) ? phase.getDiscount() : 0L;\n            long required = (feesum - discount) - already;\n            if (required <= 0) continue;\n            long allocation = Math.min(remaining, required);\n            if (allocation > 0) {\n                boolean wasZero = (already == 0L);\n                already += allocation;\n                remaining -= allocation;\n                phase.setCharged(already);\n                if (already >= (feesum - discount)) {\n                    phase.setFullpaiddate(dh.getTransactionDateTime() != null ? dh.getTransactionDateTime().toLocalDate() : null);\n                }\n                phase.setSum((feesum - discount) - already);\n                // depositPhase 필드 업데이트: 만약 이미 예상치 못한 값이 없다면 computedValue(\"1\" 또는 \"0\")로 설정\n                setDepositPhaseField(dh, phaseNo, wasZero ? \"1\" : \"0\");\n                cumulativeDeposits.put(phaseNo, already);\n            }\n            if (remaining <= 0) break;\n        }\n        return remaining;\n    }\n\n    // ================================================\n    // 3-2) 대출/자납 입금 분배 로직\n    // ================================================\n    /**\n     * 대출/자납 입금(loanStatus = 'o')의 경우,\n     * 누적 대출금 풀(runningLoanPool)의 금액을, DepositHistory의 targetPhases에 따라 배분합니다.\n     * 단, depositPhase1에 예상치 못한 값이 있으면 배분 계산을 전혀 수행하지 않습니다.\n     */\n    public void distributeLoanDepositPaymentToPhases(Customer customer,\n                                                     DepositHistory dh,\n                                                     Map<Integer, Long> cumulativeDeposits,\n                                                     AtomicLong runningLoanPool) {\n        String dp1 = dh.getDepositPhase1();\n        if (dp1 != null && !( \"0\".equals(dp1) || \"1\".equals(dp1) || \"2\".equals(dp1) )) {\n            // 예상치 못한 값이 있으므로 해당 기록은 phase 분배에서 배제\n            return;\n        }\n        long remaining = runningLoanPool.get();\n        List<Phase> phases = customer.getPhases();\n        if (phases != null) {\n            phases.sort(Comparator.comparingInt(Phase::getPhaseNumber));\n        }\n        List<Integer> targetList = dh.getTargetPhases();\n        if (targetList != null && !targetList.isEmpty()) {\n            for (Integer phaseNo : targetList) {\n                Phase phase = findPhaseByNumber(phases, phaseNo);\n                if (phase == null) continue;\n                long already = cumulativeDeposits.getOrDefault(phaseNo, 0L);\n                long feesum = (phase.getFeesum() != null) ? phase.getFeesum() : 0L;\n                long required = feesum - already; // 할인 무시\n                if (required <= 0) continue;\n                long allocation = Math.min(remaining, required);\n                if (allocation > 0) {\n                    boolean wasZero = (already == 0L);\n                    already += allocation;\n                    remaining -= allocation;\n                    phase.setCharged(already);\n                    if (already >= feesum) {\n                        phase.setFullpaiddate(dh.getTransactionDateTime() != null ? dh.getTransactionDateTime().toLocalDate() : null);\n                    }\n                    phase.setSum(feesum - already);\n                    setDepositPhaseField(dh, phaseNo, wasZero ? \"1\" : \"0\");\n                    cumulativeDeposits.put(phaseNo, already);\n                }\n                if (remaining <= 0) break;\n            }\n        }\n        runningLoanPool.set(remaining);\n    }\n\n    /**\n     * 특정 Phase 찾기 (phaseNumber 기준)\n     */\n    private Phase findPhaseByNumber(List<Phase> phases, int phaseNo) {\n        if (phases == null) return null;\n        for (Phase p : phases) {\n            if (p.getPhaseNumber() != null && p.getPhaseNumber() == phaseNo) {\n                return p;\n            }\n        }\n        return null;\n    }\n\n    // ================================================\n    // 3-3) depositPhase 필드 설정\n    // 만약 depositPhase 필드에 이미 값(예상치 못한 값)이 있다면, 이를 덮어쓰지 않고 그대로 유지합니다.\n    // ================================================\n    private void setDepositPhaseField(DepositHistory dh, int phaseNo, String computedValue) {\n        String currentValue = null;\n        switch (phaseNo) {\n            case 1: currentValue = dh.getDepositPhase1(); break;\n            case 2: currentValue = dh.getDepositPhase2(); break;\n            case 3: currentValue = dh.getDepositPhase3(); break;\n            case 4: currentValue = dh.getDepositPhase4(); break;\n            case 5: currentValue = dh.getDepositPhase5(); break;\n            case 6: currentValue = dh.getDepositPhase6(); break;\n            case 7: currentValue = dh.getDepositPhase7(); break;\n            case 8: currentValue = dh.getDepositPhase8(); break;\n            case 9: currentValue = dh.getDepositPhase9(); break;\n            case 10: currentValue = dh.getDepositPhase10(); break;\n            default:\n                break;\n        }\n        // 만약 현재 값이 이미 존재하고 허용된 값(\"0\", \"1\", \"2\")이 아니라면, 아무것도 변경하지 않습니다.\n        if (currentValue != null && !( \"0\".equals(currentValue) || \"1\".equals(currentValue) || \"2\".equals(currentValue) )) {\n            System.out.println(\"Phase \" + phaseNo + \" depositPhase already has a record value (\" + currentValue + \"); computed value (\" + computedValue + \") will not override it.\");\n            return;\n        }\n        // 그렇지 않으면 computedValue로 설정\n        switch (phaseNo) {\n            case 1: dh.setDepositPhase1(computedValue); break;\n            case 2: dh.setDepositPhase2(computedValue); break;\n            case 3: dh.setDepositPhase3(computedValue); break;\n            case 4: dh.setDepositPhase4(computedValue); break;\n            case 5: dh.setDepositPhase5(computedValue); break;\n            case 6: dh.setDepositPhase6(computedValue); break;\n            case 7: dh.setDepositPhase7(computedValue); break;\n            case 8: dh.setDepositPhase8(computedValue); break;\n            case 9: dh.setDepositPhase9(computedValue); break;\n            case 10: dh.setDepositPhase10(computedValue); break;\n            default:\n                break;\n        }\n    }\n\n    // ================================================\n    // 4) Status 업데이트\n    // ================================================\n    public void updateStatusFields(Customer customer) {\n        List<Phase> phases = customer.getPhases();\n        Status status = customer.getStatus();\n        if (status == null) {\n            status = new Status();\n            status.setCustomer(customer);\n            customer.setStatus(status);\n        }\n        if (phases != null && !phases.isEmpty()) {\n            long exemptionsum = phases.stream()\n                    .mapToLong(p -> (p.getExemption() != null) ? p.getExemption() : 0L)\n                    .sum();\n            status.setExemptionsum(exemptionsum);\n            long unpaidAmmout = phases.stream().mapToLong(p -> {\n                long feesum = (p.getFeesum() != null) ? p.getFeesum() : 0L;\n                long discount = (p.getDiscount() != null) ? p.getDiscount() : 0L;\n                long depositPaid = (p.getCharged() != null) ? p.getCharged() : 0L;\n                return ((feesum - discount) - depositPaid);\n            }).sum();\n            status.setUnpaidammout(unpaidAmmout);\n            LocalDate today = LocalDate.now();\n            List<Integer> unpaidPhases = phases.stream()\n                    .filter(p -> p.getPlanneddate() != null &&\n                            p.getPlanneddate().isBefore(today) &&\n                            p.getFullpaiddate() == null)\n                    .map(Phase::getPhaseNumber)\n                    .sorted()\n                    .collect(Collectors.toList());\n            String unpaidPhaseStr = unpaidPhases.stream()\n                    .map(String::valueOf)\n                    .collect(Collectors.joining(\",\"));\n            status.setUnpaidphase(unpaidPhaseStr);\n            long ammountsum = phases.stream()\n                    .mapToLong(p -> (p.getFeesum() != null) ? p.getFeesum() : 0L)\n                    .sum();\n            status.setAmmountsum(ammountsum);\n            status.setPercent40((long) (ammountsum * 0.4));\n        }\n    }\n\n    // ================================================\n    // 5) Loan 필드 업데이트 (대출과 자납 금액 분리)\n    // ================================================\n    /**\n     * DepositHistory 중 loanStatus가 'o'인 항목에 대해,\n     * 각 DepositHistory의 loanDetails에서 대출금액(loanammount)과 자납금액(selfammount)을 누적하여\n     * Loan 객체를 업데이트합니다.\n     */\n    public void updateLoanField(Customer customer) {\n        if (customer.getDepositHistories() == null) return;\n        if (customer.getLoan() == null) {\n            customer.setLoan(new Loan());\n        }\n        Loan customerLoan = customer.getLoan();\n        long totalLoanAmount = customer.getDepositHistories().stream()\n                .filter(dh -> \"o\".equalsIgnoreCase(dh.getLoanStatus()))\n                .mapToLong(dh -> {\n                    if (dh.getLoanDetails() != null && dh.getLoanDetails().getLoanammount() != null) {\n                        return dh.getLoanDetails().getLoanammount();\n                    }\n                    return 0L;\n                }).sum();\n        long totalSelfAmount = customer.getDepositHistories().stream()\n                .filter(dh -> \"o\".equalsIgnoreCase(dh.getLoanStatus()))\n                .mapToLong(dh -> {\n                    if (dh.getLoanDetails() != null && dh.getLoanDetails().getSelfammount() != null) {\n                        return dh.getLoanDetails().getSelfammount();\n                    }\n                    return 0L;\n                }).sum();\n        customerLoan.setLoanammount(totalLoanAmount);\n        customerLoan.setSelfammount(totalSelfAmount);\n        DepositHistory mostRecentLoan = customer.getDepositHistories().stream()\n                .filter(dh -> \"o\".equalsIgnoreCase(dh.getLoanStatus()))\n                .max(Comparator.comparing(DepositHistory::getTransactionDateTime))\n                .orElse(null);\n        if (mostRecentLoan != null) {\n            if (mostRecentLoan.getLoanDate() != null) {\n                customerLoan.setLoandate(mostRecentLoan.getLoanDate());\n            }\n            if (mostRecentLoan.getLoanDetails() != null) {\n                if (mostRecentLoan.getLoanDetails().getLoanbank() != null) {\n                    customerLoan.setLoanbank(mostRecentLoan.getLoanDetails().getLoanbank());\n                }\n                if (mostRecentLoan.getLoanDetails().getSelfdate() != null) {\n                    customerLoan.setSelfdate(mostRecentLoan.getLoanDetails().getSelfdate());\n                }\n            }\n        }\n        if (customer.getStatus() != null && customer.getStatus().getLoanExceedAmount() != null) {\n            customerLoan.setLoanselfcurrent(customer.getStatus().getLoanExceedAmount());\n        }\n        customerRepository.save(customer);\n    }\n\n    // ================================================\n    // 6) 다음 고객번호 조회\n    // ================================================\n    public Integer getNextCustomerId() {\n        return customerRepository.getNextId();\n    }\n\n    // ================================================\n    // 7) 고객 조회/저장/삭제\n    // ================================================\n    public Customer getCustomerById(Integer id) {\n        Optional<Customer> optionalCustomer = customerRepository.findById(id);\n        return optionalCustomer.orElse(null);\n    }\n\n    public Customer saveCustomer(Customer customer) {\n        return customerRepository.save(customer);\n    }\n\n    public void deleteCustomer(Integer id) {\n        customerRepository.deleteById(id);\n    }\n\n    // ================================================\n    // 8) Phase 조회: 미납/완납\n    // ================================================\n    public List<Phase> getPendingPhases(Integer customerId) {\n        Optional<Customer> customerOptional = customerRepository.findById(customerId);\n        if (customerOptional.isPresent()) {\n            Customer customer = customerOptional.get();\n            List<Phase> phases = customer.getPhases();\n            return phases.stream()\n                    .filter(phase -> phase.getSum() != null && phase.getSum() > 0)\n                    .collect(Collectors.toList());\n        }\n        return null;\n    }\n\n    public List<Phase> getCompletedPhases(Integer customerId) {\n        Optional<Customer> customerOptional = customerRepository.findById(customerId);\n        if (customerOptional.isPresent()) {\n            Customer customer = customerOptional.get();\n            List<Phase> phases = customer.getPhases();\n            return phases.stream()\n                    .filter(phase -> phase.getSum() == null || phase.getSum() == 0)\n                    .collect(Collectors.toList());\n        }\n        return null;\n    }\n\n    // ================================================\n    // 9) 통계: 정계약, 완납/미연체\n    // ================================================\n    public long countContractedCustomers() {\n        return customerRepository.countByCustomertype(\"c\");\n    }\n\n    public long countFullyPaidOrNotOverdueCustomers() {\n        List<Customer> allCustomers = customerRepository.findAll();\n        LocalDate today = LocalDate.now();\n        return allCustomers.stream().filter(customer -> {\n            List<Phase> phases = customer.getPhases();\n            if (phases == null || phases.isEmpty()) return true;\n            boolean hasOverdue = phases.stream().anyMatch(phase ->\n                    phase.getPlanneddate() != null &&\n                            phase.getPlanneddate().isBefore(today) &&\n                            phase.getFullpaiddate() == null\n            );\n            return !hasOverdue;\n        }).count();\n    }\n\n    // ================================================\n    // 10) 연체료 정보\n    // ================================================\n    public List<LateFeeInfo> getLateFeeInfos(String name, String number) {\n        List<Customer> customers;\n        if (name != null && !name.isEmpty() && number != null && !number.isEmpty()) {\n            try {\n                Integer id = Integer.parseInt(number);\n                customers = customerRepository.findByCustomerDataNameAndId(name, id);\n            } catch (NumberFormatException e) {\n                customers = Collections.emptyList();\n            }\n        } else if (name != null && !name.isEmpty()) {\n            customers = customerRepository.findByCustomerDataNameContaining(name);\n        } else if (number != null && !number.isEmpty()) {\n            try {\n                Integer id = Integer.parseInt(number);\n                Optional<Customer> cOpt = customerRepository.findById(id);\n                customers = cOpt.map(Collections::singletonList).orElse(Collections.emptyList());\n            } catch (NumberFormatException e) {\n                customers = Collections.emptyList();\n            }\n        } else {\n            customers = customerRepository.findAll();\n        }\n        List<LateFeeInfo> lateFeeInfos = new ArrayList<>();\n        LocalDate today = LocalDate.now();\n        for (Customer c : customers) {\n            List<Phase> phases = c.getPhases();\n            if (phases == null || phases.isEmpty()) continue;\n            List<Phase> unpaidPhases = phases.stream().filter(p ->\n                    p.getPlanneddate() != null &&\n                            p.getPlanneddate().isBefore(today) &&\n                            p.getFullpaiddate() == null\n            ).collect(Collectors.toList());\n            LateFeeInfo info = new LateFeeInfo();\n            info.setId(c.getId());\n            info.setCustomertype(c.getCustomertype() != null ? c.getCustomertype() : \"N/A\");\n            info.setName((c.getCustomerData() != null && c.getCustomerData().getName() != null)\n                    ? c.getCustomerData().getName() : \"N/A\");\n            info.setRegisterdate(c.getRegisterdate());\n            if (unpaidPhases.isEmpty()) {\n                info.setLastUnpaidPhaseNumber(null);\n                info.setLateBaseDate(null);\n                info.setRecentPaymentDate(null);\n                info.setDaysOverdue(0L);\n                info.setLateRate(0.0);\n                info.setOverdueAmount(0L);\n                long paidAmount = phases.stream()\n                        .mapToLong(p -> (p.getCharged() != null) ? p.getCharged() : 0L)\n                        .sum();\n                info.setPaidAmount(paidAmount);\n                info.setLateFee(0.0);\n                info.setTotalOwed(0L);\n            } else {\n                int lastUnpaid = unpaidPhases.stream()\n                        .mapToInt(Phase::getPhaseNumber)\n                        .max().orElse(0);\n                info.setLastUnpaidPhaseNumber(lastUnpaid);\n                LocalDate lateBaseDate = unpaidPhases.stream()\n                        .map(Phase::getPlanneddate)\n                        .min(LocalDate::compareTo)\n                        .orElse(null);\n                info.setLateBaseDate(lateBaseDate);\n                List<Phase> paidPhases = phases.stream()\n                        .filter(p -> p.getFullpaiddate() != null)\n                        .collect(Collectors.toList());\n                LocalDate recentPaymentDate = paidPhases.stream()\n                        .map(Phase::getFullpaiddate)\n                        .max(LocalDate::compareTo)\n                        .orElse(null);\n                info.setRecentPaymentDate(recentPaymentDate);\n                long daysOverdue = (lateBaseDate != null) ? ChronoUnit.DAYS.between(lateBaseDate, today) : 0;\n                if (daysOverdue < 0) daysOverdue = 0;\n                info.setDaysOverdue(daysOverdue);\n                double lateRate = 0.0005;\n                info.setLateRate(lateRate);\n                long overdueAmount = unpaidPhases.stream()\n                        .mapToLong(p -> (p.getFeesum() != null) ? p.getFeesum() : 0L)\n                        .sum();\n                info.setOverdueAmount(overdueAmount);\n                long paidAmount = phases.stream()\n                        .mapToLong(p -> (p.getCharged() != null) ? p.getCharged() : 0L)\n                        .sum();\n                info.setPaidAmount(paidAmount);\n                double lateFee = overdueAmount * lateRate * daysOverdue;\n                info.setLateFee(lateFee);\n                long totalOwed = overdueAmount + Math.round(lateFee);\n                info.setTotalOwed(totalOwed);\n            }\n            lateFeeInfos.add(info);\n        }\n        return lateFeeInfos;\n    }\n\n    // ================================================\n    // 11) 검색\n    // ================================================\n    public List<Customer> searchCustomers(String name, String number) {\n        if (name != null && number != null) {\n            if (number.matches(\"\\\\d+\")) {\n                return customerRepository.findByNameContainingAndIdContaining(name, number);\n            } else {\n                return customerRepository.findByCustomerDataNameContaining(name);\n            }\n        } else if (name != null) {\n            return customerRepository.findByCustomerDataNameContaining(name);\n        } else if (number != null) {\n            if (number.matches(\"\\\\d+\")) {\n                return customerRepository.findByIdContaining(number);\n            } else {\n                return Collections.emptyList();\n            }\n        } else {\n            return customerRepository.findAll();\n        }\n    }\n\n    // ================================================\n    // 12) DepositList DTO\n    // ================================================\n    public List<CustomerDepositDTO> getAllCustomerDepositDTOs() {\n        List<Customer> allCustomers = customerRepository.findAll();\n        return allCustomers.stream()\n                .map(this::mapToCustomerDepositDTO)\n                .collect(Collectors.toList());\n    }\n\n    private CustomerDepositDTO mapToCustomerDepositDTO(Customer customer) {\n        CustomerDepositDTO dto = new CustomerDepositDTO();\n        dto.setMemberNumber(customer.getId());\n        LocalDate lastPaidDate = customer.getPhases().stream()\n                .map(Phase::getFullpaiddate)\n                .filter(Objects::nonNull)\n                .max(LocalDate::compareTo)\n                .orElse(null);\n        dto.setLastTransactionDateTime(lastPaidDate != null ? lastPaidDate.atStartOfDay() : null);\n        dto.setRemarks(\"\");\n        dto.setMemo(\"\");\n        dto.setContractor(customer.getCustomerData() != null ? customer.getCustomerData().getName() : \"\");\n        dto.setWithdrawnAmount(null);\n        Long depositAmount = customer.getPhases().stream()\n                .mapToLong(p -> (p.getCharged() != null) ? p.getCharged() : 0L)\n                .sum();\n        dto.setDepositAmount(depositAmount);\n        dto.setBankBranch((customer.getFinancial() != null && customer.getFinancial().getBankname() != null)\n                ? customer.getFinancial().getBankname() : \"\");\n        dto.setAccount(\"h\");\n        dto.setReservation(\"\");\n        dto.setDepositPhase1(getPhaseStatus(customer, 1));\n        dto.setDepositPhase2(getPhaseStatus(customer, 2));\n        dto.setDepositPhase3(getPhaseStatus(customer, 3));\n        dto.setDepositPhase4(getPhaseStatus(customer, 4));\n        dto.setDepositPhase5(getPhaseStatus(customer, 5));\n        dto.setDepositPhase6(getPhaseStatus(customer, 6));\n        dto.setDepositPhase7(getPhaseStatus(customer, 7));\n        dto.setDepositPhase8(getPhaseStatus(customer, 8));\n        dto.setDepositPhase9(getPhaseStatus(customer, 9));\n        dto.setDepositPhase10(getPhaseStatus(customer, 10));\n        DepositHistory loanDeposit = null;\n        if (customer.getDepositHistories() != null) {\n            loanDeposit = customer.getDepositHistories().stream()\n                    .filter(dh -> \"o\".equalsIgnoreCase(dh.getLoanStatus()))\n                    .max(Comparator.comparing(DepositHistory::getTransactionDateTime))\n                    .orElse(null);\n        }\n        if (loanDeposit != null) {\n            dto.setLoanAmount(loanDeposit.getDepositAmount());\n            dto.setLoanDate(loanDeposit.getLoanDate());\n        } else {\n            dto.setLoanAmount(null);\n            dto.setLoanDate(null);\n        }\n        dto.setTemporary(\"\");\n        dto.setNote(\"\");\n        return dto;\n    }\n\n    /**\n     * 1~10차 입금 상태: charged > 0 ? \"o\" : \"x\"\n     */\n    private String getPhaseStatus(Customer customer, int phaseNumber) {\n        if (customer.getPhases() == null) return \"\";\n        Phase targetPhase = customer.getPhases().stream()\n                .filter(p -> p.getPhaseNumber() != null && p.getPhaseNumber() == phaseNumber)\n                .findFirst()\n                .orElse(null);\n        if (targetPhase == null) return \"\";\n        Long charged = targetPhase.getCharged();\n        return (charged != null && charged > 0) ? \"o\" : \"x\";\n    }\n\n    // ================================================\n    // 13) 도우미: plannedDate 계산\n    // ================================================\n    /**\n     * 예: \"3달\" -> registerDate.plusMonths(3), \"1년\" -> registerDate.plusYears(1)\n     */\n    private LocalDate calculatePlannedDate(LocalDate registerDate, String phasedate) {\n        if (registerDate == null) {\n            registerDate = LocalDate.now();\n        }\n        if (phasedate == null || phasedate.isEmpty()) {\n            return registerDate;\n        }\n        if (phasedate.endsWith(\"달\") || phasedate.endsWith(\"개월\")) {\n            int months = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusMonths(months);\n        } else if (phasedate.endsWith(\"년\")) {\n            int years = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusYears(years);\n        } else {\n            return registerDate.plusYears(100);\n        }\n    }\n}\n",
            "DepositHistoryService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.repository.CustomerRepository;\nimport com.audora.lotting_be.repository.DepositHistoryRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n@Service\npublic class DepositHistoryService {\n\n    @Autowired\n    private DepositHistoryRepository depositHistoryRepository;\n    @Autowired\n    private CustomerRepository customerRepository;\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * 모든 DepositHistory 엔티티를 반환하는 메서드 (신규 추가)\n     */\n    public List<DepositHistory> getAllDepositHistories() {\n        return depositHistoryRepository.findAll();\n    }\n\n    @Transactional\n    public DepositHistory createDepositHistory(DepositHistory depositHistory) {\n        if (depositHistory.getCustomer() == null || depositHistory.getCustomer().getId() == null) {\n            throw new IllegalArgumentException(\"입금내역 생성 시 고객 ID 정보가 필요합니다.\");\n        }\n        Customer customer = customerRepository.findById(depositHistory.getCustomer().getId())\n                .orElseThrow(() -> new IllegalArgumentException(\"해당 고객을 찾을 수 없습니다.\"));\n        depositHistory.setCustomer(customer);\n        DepositHistory saved = depositHistoryRepository.save(depositHistory);\n        // 재계산 유도 전 depositPhase1이 기록용(예상치 못한 값)인지 확인\n        if (depositHistory.getDepositPhase1() == null ||\n                (\"0\".equals(depositHistory.getDepositPhase1()) || \"1\".equals(depositHistory.getDepositPhase1()) || \"2\".equals(depositHistory.getDepositPhase1()))) {\n            customerService.recalculateEverything(customer);\n        }\n        saved = depositHistoryRepository.findById(saved.getId()).orElse(saved);\n        return saved;\n    }\n\n    @Transactional\n    public DepositHistory updateDepositHistory(Long id, DepositHistory updatedDepositHistory) {\n        DepositHistory existing = depositHistoryRepository.findById(id)\n                .orElseThrow(() -> new IllegalArgumentException(\"입금내역을 찾을 수 없습니다.\"));\n        Customer customer = existing.getCustomer();\n        if (updatedDepositHistory.getCustomer() != null && updatedDepositHistory.getCustomer().getId() != null) {\n            if (!customer.getId().equals(updatedDepositHistory.getCustomer().getId())) {\n                throw new IllegalArgumentException(\"해당 입금내역의 고객 ID가 일치하지 않습니다.\");\n            }\n        }\n        // 필드 업데이트 (depositPhase 필드는 그대로 유지)\n        existing.setTransactionDateTime(updatedDepositHistory.getTransactionDateTime());\n        existing.setDescription(updatedDepositHistory.getDescription());\n        existing.setDetails(updatedDepositHistory.getDetails());\n        existing.setContractor(updatedDepositHistory.getContractor());\n        existing.setWithdrawnAmount(updatedDepositHistory.getWithdrawnAmount());\n        existing.setDepositAmount(updatedDepositHistory.getDepositAmount());\n        existing.setBranch(updatedDepositHistory.getBranch());\n        existing.setAccount(updatedDepositHistory.getAccount());\n        // depositPhase1~10는 변경하지 않음(기록용 값 유지)\n        existing.setLoanStatus(updatedDepositHistory.getLoanStatus());\n        existing.setLoanDate(updatedDepositHistory.getLoanDate());\n        existing.setRemarks(updatedDepositHistory.getRemarks());\n        existing.setLoanDetails(updatedDepositHistory.getLoanDetails());\n        existing.setTargetPhases(updatedDepositHistory.getTargetPhases());\n        DepositHistory saved = depositHistoryRepository.save(existing);\n        // 재계산은 depositPhase1이 허용된 값일 때만 유도\n        if (existing.getDepositPhase1() == null ||\n                (\"0\".equals(existing.getDepositPhase1()) || \"1\".equals(existing.getDepositPhase1()) || \"2\".equals(existing.getDepositPhase1()))) {\n            customerService.recalculateEverything(customer);\n        }\n        saved = depositHistoryRepository.findById(saved.getId()).orElse(saved);\n        return saved;\n    }\n\n    @Transactional\n    public void deleteDepositHistory(Long id) {\n        DepositHistory dh = depositHistoryRepository.findById(id)\n                .orElseThrow(() -> new IllegalArgumentException(\"입금내역을 찾을 수 없습니다.\"));\n        Customer customer = dh.getCustomer();\n        // 고객의 depositHistories 컬렉션에서 해당 입금내역을 제거\n        if (customer.getDepositHistories() != null) {\n            customer.getDepositHistories().remove(dh);\n        }\n        depositHistoryRepository.delete(dh);\n        // 재계산: depositPhase1이 허용된 값(\"0\",\"1\",\"2\")일 때만 재계산\n        if (dh.getDepositPhase1() == null ||\n                (\"0\".equals(dh.getDepositPhase1()) || \"1\".equals(dh.getDepositPhase1()) || \"2\".equals(dh.getDepositPhase1()))) {\n            customerService.recalculateEverything(customer);\n        }\n    }\n}\n",
            "ExcelService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.minor.Deposit;\nimport com.audora.lotting_be.model.customer.Status;\nimport com.audora.lotting_be.model.customer.minor.Agenda;\nimport com.audora.lotting_be.model.customer.minor.Cancel;\nimport com.audora.lotting_be.model.customer.minor.CustomerData;\nimport com.audora.lotting_be.model.customer.minor.Dahim;\nimport com.audora.lotting_be.model.customer.minor.Financial;\nimport com.audora.lotting_be.model.customer.minor.Firstemp;\nimport com.audora.lotting_be.model.customer.minor.LegalAddress;\nimport com.audora.lotting_be.model.customer.minor.Loan;\nimport com.audora.lotting_be.model.customer.minor.Meetingattend;\nimport com.audora.lotting_be.model.customer.minor.Postreceive;\nimport com.audora.lotting_be.model.customer.minor.Responsible;\nimport com.audora.lotting_be.model.customer.minor.Secondemp;\nimport com.audora.lotting_be.model.customer.minor.MGM;\nimport com.audora.lotting_be.model.customer.Attachments;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.service.CustomerService;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.DataFormatter;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.*;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\n@Service\npublic class ExcelService {\n\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * /uploadExcel 엔드포인트로 전달된 엑셀 파일의\n     * 첫번째 시트의 3번째 행(Row 인덱스 2)의 데이터를 읽어\n     * 각 열을 아래 매핑에 따라 Customer 및 관련 임베디드 객체에 저장한 후\n     * customerService.createCustomer(customer)를 호출하여 DB에 저장합니다.\n     *\n     * 매핑 목록은 생략(원본 참고)\n     *\n     * 주의사항:\n     * - 날짜는 yyyy 형식 대신 두자리 연도(yy-M-d)로 파싱하며, 불필요한 따옴표를 제거합니다.\n     * - 숫자 파싱 시 쉼표를 제거하며, 할인액/면제금액은 Math.abs()로 음수를 양수로 변환합니다.\n     */\n    public void processExcelFile(MultipartFile file) throws IOException {\n        try (InputStream is = file.getInputStream();\n             XSSFWorkbook workbook = new XSSFWorkbook(is)) {\n\n            XSSFSheet sheet = workbook.getSheetAt(0);\n            Row row = sheet.getRow(2); // 3번째 행 (0-indexed)\n            if (row == null) {\n                throw new IOException(\"엑셀 파일에 3번째 행(Row 3)이 존재하지 않습니다.\");\n            }\n            DataFormatter formatter = new DataFormatter();\n            DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yy-M-d\");\n\n            // 새 Customer 객체 및 임베디드 객체들 초기화\n            Customer customer = new Customer();\n            if (customer.getCustomerData() == null) {\n                customer.setCustomerData(new CustomerData());\n            }\n            if (customer.getLegalAddress() == null) {\n                customer.setLegalAddress(new LegalAddress());\n            }\n            if (customer.getFinancial() == null) {\n                customer.setFinancial(new Financial());\n            }\n            if (customer.getDeposits() == null) {\n                customer.setDeposits(new Deposit());\n            }\n            if (customer.getAttachments() == null) {\n                customer.setAttachments(new Attachments());\n            }\n            if (customer.getCancel() == null) {\n                customer.setCancel(new Cancel());\n            }\n            if (customer.getLoan() == null) {\n                customer.setLoan(new Loan());\n            }\n            if (customer.getResponsible() == null) {\n                customer.setResponsible(new Responsible());\n            }\n            if (customer.getDahim() == null) {\n                customer.setDahim(new Dahim());\n            }\n            if (customer.getMgm() == null) {\n                customer.setMgm(new MGM());\n            }\n            if (customer.getFirstemp() == null) {\n                customer.setFirstemp(new Firstemp());\n            }\n            if (customer.getSecondemp() == null) {\n                customer.setSecondemp(new Secondemp());\n            }\n            if (customer.getMeetingattend() == null) {\n                customer.setMeetingattend(new Meetingattend());\n            }\n            if (customer.getAgenda() == null) {\n                customer.setAgenda(new Agenda());\n            }\n            if (customer.getPostreceive() == null) {\n                customer.setPostreceive(new Postreceive());\n            }\n            if (customer.getStatus() == null) {\n                Status st = new Status();\n                st.setCustomer(customer);\n                customer.setStatus(st);\n            }\n\n            // --- 열별 매핑 시작 ---\n            // A (0): 관리번호\n            String colA = formatter.formatCellValue(row.getCell(0));\n            if (!colA.isEmpty()) {\n                customer.setId(Integer.parseInt(colA.replaceAll(\",\", \"\").trim()));\n            }\n            // B (1): 분류(회원)\n            customer.setCustomertype(formatter.formatCellValue(row.getCell(1)));\n            // C (2): 타입\n            customer.setType(formatter.formatCellValue(row.getCell(2)));\n            // D (3): 군 -> groupname\n            customer.setGroupname(formatter.formatCellValue(row.getCell(3)));\n            // E (4): 순번 -> turn\n            customer.setTurn(formatter.formatCellValue(row.getCell(4)));\n            // F (5): 7차면제 -> Attachments.exemption7 (o이면 true)\n            String colF = formatter.formatCellValue(row.getCell(5));\n            customer.getAttachments().setExemption7(\"o\".equalsIgnoreCase(colF));\n            // G (6): 임시동호 -> temptype\n            customer.setTemptype(formatter.formatCellValue(row.getCell(6)));\n            // H (7): 가입차순 -> batch\n            customer.setBatch(formatter.formatCellValue(row.getCell(7)));\n            // I (8): 신탁사제출 -> (무시)\n            // J (9): 가입일자 -> registerdate\n            String colJ = formatter.formatCellValue(row.getCell(9));\n            if (!colJ.isEmpty()) {\n                customer.setRegisterdate(LocalDate.parse(colJ.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            // K (10): 가입가 -> registerprice\n            String colK = formatter.formatCellValue(row.getCell(10));\n            if (!colK.isEmpty()) {\n                customer.setRegisterprice(Long.parseLong(colK.replaceAll(\",\", \"\").trim()));\n            }\n            // L (11): 지산A동계약서 -> Attachments.contract\n            String colL = formatter.formatCellValue(row.getCell(11));\n            customer.getAttachments().setContract(\"1\".equals(colL));\n            // M (12): 동의서 -> Attachments.agreement\n            String colM = formatter.formatCellValue(row.getCell(12));\n            customer.getAttachments().setAgreement(\"1\".equals(colM));\n            // N (13): 성명 -> CustomerData.name\n            customer.getCustomerData().setName(formatter.formatCellValue(row.getCell(13)));\n            // O (14): 주민번호 -> split into resnumfront and resnumback\n            String colO = formatter.formatCellValue(row.getCell(14));\n            if (colO.contains(\"-\")) {\n                String[] parts = colO.split(\"-\");\n                if (parts.length == 2) {\n                    customer.getCustomerData().setResnumfront(Integer.parseInt(parts[0].replaceAll(\",\", \"\").trim()));\n                    customer.getCustomerData().setResnumback(Integer.parseInt(parts[1].replaceAll(\",\", \"\").trim()));\n                }\n            }\n            // P (15): 휴대전화 -> 숫자만 저장\n            String colP = formatter.formatCellValue(row.getCell(15)).replaceAll(\"[^0-9]\", \"\");\n            customer.getCustomerData().setPhone(colP);\n            // Q (16): 법정주소 우편번호 -> LegalAddress.postnumber\n            customer.getLegalAddress().setPostnumber(formatter.formatCellValue(row.getCell(16)));\n            // R (17) & S (18): 법정주소 도, 군 -> LegalAddress.post (R + \" \" + S)\n            String addrR = formatter.formatCellValue(row.getCell(17));\n            String addrS = formatter.formatCellValue(row.getCell(18));\n            customer.getLegalAddress().setPost(addrR + \" \" + addrS);\n            // T (19): 법정주소 상세주소 -> LegalAddress.detailaddress\n            customer.getLegalAddress().setDetailaddress(formatter.formatCellValue(row.getCell(19)));\n            // U (20): 금융기관 은행명 -> Financial.bankname\n            customer.getFinancial().setBankname(formatter.formatCellValue(row.getCell(20)));\n            // V (21): 금융기관 계좌번호 -> Financial.accountnum\n            customer.getFinancial().setAccountnum(formatter.formatCellValue(row.getCell(21)));\n            // W (22): 금융기관 예금주 -> Financial.accountholder\n            customer.getFinancial().setAccountholder(formatter.formatCellValue(row.getCell(22)));\n            // X (23): 금융기관 신탁사 -> Financial.trustcompany\n            customer.getFinancial().setTrustcompany(formatter.formatCellValue(row.getCell(23)));\n            // Y (24): 예약금 납입일자 -> Deposits.depositdate\n            String colY = formatter.formatCellValue(row.getCell(24));\n            if (!colY.isEmpty()) {\n                customer.getDeposits().setDepositdate(LocalDate.parse(colY.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            // Z (25): 예약금 금액 -> Deposits.depositammount\n            String colZ = formatter.formatCellValue(row.getCell(25));\n            if (!colZ.isEmpty()) {\n                customer.getDeposits().setDepositammount(Long.parseLong(colZ.replaceAll(\",\", \"\").trim()));\n            }\n            // AA (26): 1차 완납일자 -> Phase1.fullpaiddate\n            Phase phase1 = new Phase();\n            String colAA = formatter.formatCellValue(row.getCell(26));\n            if (!colAA.isEmpty()) {\n                phase1.setFullpaiddate(LocalDate.parse(colAA.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            // AB (27): 1차 부담금 -> Phase1.charge\n            String colAB = formatter.formatCellValue(row.getCell(27));\n            if (!colAB.isEmpty()) {\n                phase1.setCharge(Long.parseLong(colAB.replaceAll(\",\", \"\").trim()));\n            }\n            // AC (28): 1차 업무대행비 -> Phase1.service\n            String colAC = formatter.formatCellValue(row.getCell(28));\n            if (!colAC.isEmpty()) {\n                phase1.setService(Long.parseLong(colAC.replaceAll(\",\", \"\").trim()));\n            }\n            // AD (29): 1차 이동 -> Phase1.move\n            phase1.setMove(formatter.formatCellValue(row.getCell(29)));\n            // AE (30): 1차 합 -> Phase1.feesum\n            String colAE = formatter.formatCellValue(row.getCell(30));\n            if (!colAE.isEmpty()) {\n                phase1.setFeesum(Long.parseLong(colAE.replaceAll(\",\", \"\").trim()));\n            }\n            phase1.setPhaseNumber(1);\n            phase1.setCustomer(customer);\n            customer.setPhases(new java.util.ArrayList<>());\n            customer.getPhases().add(phase1);\n\n            // 2차 (AF (31) ~ AL (37))\n            Phase phase2 = new Phase();\n            phase2.setPhaseNumber(2);\n            phase2.setPlanneddateString(formatter.formatCellValue(row.getCell(31)));\n            String colAG = formatter.formatCellValue(row.getCell(32));\n            if (!colAG.isEmpty()) {\n                phase2.setFullpaiddate(LocalDate.parse(colAG.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            String colAH = formatter.formatCellValue(row.getCell(33));\n            if (!colAH.isEmpty()) {\n                phase2.setCharge(Long.parseLong(colAH.replaceAll(\",\", \"\").trim()));\n            }\n            String colAI = formatter.formatCellValue(row.getCell(34));\n            if (!colAI.isEmpty()) {\n                phase2.setDiscount(Math.abs(Long.parseLong(colAI.replaceAll(\",\", \"\").trim())));\n            }\n            String colAJ = formatter.formatCellValue(row.getCell(35));\n            if (!colAJ.isEmpty()) {\n                phase2.setService(Long.parseLong(colAJ.replaceAll(\",\", \"\").trim()));\n            }\n            phase2.setMove(formatter.formatCellValue(row.getCell(36)));\n            String colAL = formatter.formatCellValue(row.getCell(37));\n            if (!colAL.isEmpty()) {\n                phase2.setFeesum(Long.parseLong(colAL.replaceAll(\",\", \"\").trim()));\n            }\n            phase2.setCustomer(customer);\n            customer.getPhases().add(phase2);\n\n            // 3차 (AM (38) ~ AS (44))\n            Phase phase3 = new Phase();\n            phase3.setPhaseNumber(3);\n            phase3.setPlanneddateString(formatter.formatCellValue(row.getCell(38)));\n            String colAN = formatter.formatCellValue(row.getCell(39));\n            if (!colAN.isEmpty()) {\n                phase3.setFullpaiddate(LocalDate.parse(colAN.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            String colAO = formatter.formatCellValue(row.getCell(40));\n            if (!colAO.isEmpty()) {\n                phase3.setCharge(Long.parseLong(colAO.replaceAll(\",\", \"\").trim()));\n            }\n            String colAP = formatter.formatCellValue(row.getCell(41));\n            if (!colAP.isEmpty()) {\n                phase3.setDiscount(Math.abs(Long.parseLong(colAP.replaceAll(\",\", \"\").trim())));\n            }\n            String colAQ = formatter.formatCellValue(row.getCell(42));\n            if (!colAQ.isEmpty()) {\n                phase3.setService(Long.parseLong(colAQ.replaceAll(\",\", \"\").trim()));\n            }\n            phase3.setMove(formatter.formatCellValue(row.getCell(43)));\n            String colAS = formatter.formatCellValue(row.getCell(44));\n            if (!colAS.isEmpty()) {\n                phase3.setFeesum(Long.parseLong(colAS.replaceAll(\",\", \"\").trim()));\n            }\n            phase3.setCustomer(customer);\n            customer.getPhases().add(phase3);\n\n            // 4차 (AT (45) ~ AZ (51))\n            Phase phase4 = new Phase();\n            phase4.setPhaseNumber(4);\n            phase4.setPlanneddateString(formatter.formatCellValue(row.getCell(45)));\n            String colAU = formatter.formatCellValue(row.getCell(46));\n            if (!colAU.isEmpty()) {\n                phase4.setFullpaiddate(LocalDate.parse(colAU.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            String colAV = formatter.formatCellValue(row.getCell(47));\n            if (!colAV.isEmpty()) {\n                phase4.setCharge(Long.parseLong(colAV.replaceAll(\",\", \"\").trim()));\n            }\n            String colAW = formatter.formatCellValue(row.getCell(48));\n            if (!colAW.isEmpty()) {\n                phase4.setDiscount(Math.abs(Long.parseLong(colAW.replaceAll(\",\", \"\").trim())));\n            }\n            String colAX = formatter.formatCellValue(row.getCell(49));\n            if (!colAX.isEmpty()) {\n                phase4.setService(Long.parseLong(colAX.replaceAll(\",\", \"\").trim()));\n            }\n            phase4.setMove(formatter.formatCellValue(row.getCell(50)));\n            String colAZ = formatter.formatCellValue(row.getCell(51));\n            if (!colAZ.isEmpty()) {\n                phase4.setFeesum(Long.parseLong(colAZ.replaceAll(\",\", \"\").trim()));\n            }\n            phase4.setCustomer(customer);\n            customer.getPhases().add(phase4);\n\n            // 5차 (BA (52) ~ BH (59))\n            Phase phase5 = new Phase();\n            phase5.setPhaseNumber(5);\n            phase5.setPlanneddateString(formatter.formatCellValue(row.getCell(52)));\n            String colBB = formatter.formatCellValue(row.getCell(53));\n            if (!colBB.isEmpty()) {\n                phase5.setFullpaiddate(LocalDate.parse(colBB.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            String colBC = formatter.formatCellValue(row.getCell(54));\n            if (!colBC.isEmpty()) {\n                phase5.setCharge(Long.parseLong(colBC.replaceAll(\",\", \"\").trim()));\n            }\n            String colBD = formatter.formatCellValue(row.getCell(55));\n            if (!colBD.isEmpty()) {\n                phase5.setDiscount(Math.abs(Long.parseLong(colBD.replaceAll(\",\", \"\").trim())));\n            }\n            String colBE = formatter.formatCellValue(row.getCell(56));\n            if (!colBE.isEmpty()) {\n                phase5.setExemption(Math.abs(Long.parseLong(colBE.replaceAll(\",\", \"\").trim())));\n            }\n            String colBF = formatter.formatCellValue(row.getCell(57));\n            if (!colBF.isEmpty()) {\n                phase5.setService(Long.parseLong(colBF.replaceAll(\",\", \"\").trim()));\n            }\n            phase5.setMove(formatter.formatCellValue(row.getCell(58)));\n            String colBH = formatter.formatCellValue(row.getCell(59));\n            if (!colBH.isEmpty()) {\n                phase5.setFeesum(Long.parseLong(colBH.replaceAll(\",\", \"\").trim()));\n            }\n            phase5.setCustomer(customer);\n            customer.getPhases().add(phase5);\n\n            // 6차 (BI (60) ~ BP (67))\n            Phase phase6 = new Phase();\n            phase6.setPhaseNumber(6);\n            phase6.setPlanneddateString(formatter.formatCellValue(row.getCell(60)));\n            String colBJ = formatter.formatCellValue(row.getCell(61));\n            if (!colBJ.isEmpty()) {\n                phase6.setFullpaiddate(LocalDate.parse(colBJ.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            String colBK = formatter.formatCellValue(row.getCell(62));\n            if (!colBK.isEmpty()) {\n                phase6.setCharge(Long.parseLong(colBK.replaceAll(\",\", \"\").trim()));\n            }\n            String colBL = formatter.formatCellValue(row.getCell(63));\n            if (!colBL.isEmpty()) {\n                phase6.setDiscount(Math.abs(Long.parseLong(colBL.replaceAll(\",\", \"\").trim())));\n            }\n            String colBM = formatter.formatCellValue(row.getCell(64));\n            if (!colBM.isEmpty()) {\n                phase6.setExemption(Math.abs(Long.parseLong(colBM.replaceAll(\",\", \"\").trim())));\n            }\n            String colBN = formatter.formatCellValue(row.getCell(65));\n            if (!colBN.isEmpty()) {\n                phase6.setService(Long.parseLong(colBN.replaceAll(\",\", \"\").trim()));\n            }\n            phase6.setMove(formatter.formatCellValue(row.getCell(66)));\n            String colBP = formatter.formatCellValue(row.getCell(67));\n            if (!colBP.isEmpty()) {\n                phase6.setFeesum(Long.parseLong(colBP.replaceAll(\",\", \"\").trim()));\n            }\n            phase6.setCustomer(customer);\n            customer.getPhases().add(phase6);\n\n            // 7차 (BQ (68) ~ BX (75))\n            Phase phase7 = new Phase();\n            phase7.setPhaseNumber(7);\n            phase7.setPlanneddateString(formatter.formatCellValue(row.getCell(68)));\n            String colBR = formatter.formatCellValue(row.getCell(69));\n            if (!colBR.isEmpty()) {\n                phase7.setFullpaiddate(LocalDate.parse(colBR.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            String colBS = formatter.formatCellValue(row.getCell(70));\n            if (!colBS.isEmpty()) {\n                phase7.setCharge(Long.parseLong(colBS.replaceAll(\",\", \"\").trim()));\n            }\n            String colBT = formatter.formatCellValue(row.getCell(71));\n            if (!colBT.isEmpty()) {\n                phase7.setDiscount(Math.abs(Long.parseLong(colBT.replaceAll(\",\", \"\").trim())));\n            }\n            String colBU = formatter.formatCellValue(row.getCell(72));\n            if (!colBU.isEmpty()) {\n                phase7.setExemption(Math.abs(Long.parseLong(colBU.replaceAll(\",\", \"\").trim())));\n            }\n            String colBV = formatter.formatCellValue(row.getCell(73));\n            if (!colBV.isEmpty()) {\n                phase7.setService(Long.parseLong(colBV.replaceAll(\",\", \"\").trim()));\n            }\n            phase7.setMove(formatter.formatCellValue(row.getCell(74)));\n            String colBX = formatter.formatCellValue(row.getCell(75));\n            if (!colBX.isEmpty()) {\n                phase7.setFeesum(Long.parseLong(colBX.replaceAll(\",\", \"\").trim()));\n            }\n            phase7.setCustomer(customer);\n            customer.getPhases().add(phase7);\n\n            // 8차 (BY (76) ~ CE (82))\n            Phase phase8 = new Phase();\n            phase8.setPhaseNumber(8);\n            phase8.setPlanneddateString(formatter.formatCellValue(row.getCell(76)));\n            String colBZ = formatter.formatCellValue(row.getCell(77));\n            if (!colBZ.isEmpty()) {\n                phase8.setFullpaiddate(LocalDate.parse(colBZ.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            String colCA = formatter.formatCellValue(row.getCell(78));\n            if (!colCA.isEmpty()) {\n                phase8.setCharge(Long.parseLong(colCA.replaceAll(\",\", \"\").trim()));\n            }\n            String colCB = formatter.formatCellValue(row.getCell(79));\n            if (!colCB.isEmpty()) {\n                phase8.setDiscount(Math.abs(Long.parseLong(colCB.replaceAll(\",\", \"\").trim())));\n            }\n            String colCC = formatter.formatCellValue(row.getCell(80));\n            if (!colCC.isEmpty()) {\n                phase8.setService(Long.parseLong(colCC.replaceAll(\",\", \"\").trim()));\n            }\n            phase8.setMove(formatter.formatCellValue(row.getCell(81)));\n            String colCE = formatter.formatCellValue(row.getCell(82));\n            if (!colCE.isEmpty()) {\n                phase8.setFeesum(Long.parseLong(colCE.replaceAll(\",\", \"\").trim()));\n            }\n            phase8.setCustomer(customer);\n            customer.getPhases().add(phase8);\n\n            // 9차 (CF (83) ~ CL (89))\n            Phase phase9 = new Phase();\n            phase9.setPhaseNumber(9);\n            phase9.setPlanneddateString(formatter.formatCellValue(row.getCell(83)));\n            String colCG = formatter.formatCellValue(row.getCell(84));\n            if (!colCG.isEmpty()) {\n                phase9.setFullpaiddate(LocalDate.parse(colCG.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            String colCH = formatter.formatCellValue(row.getCell(85));\n            if (!colCH.isEmpty()) {\n                phase9.setCharge(Long.parseLong(colCH.replaceAll(\",\", \"\").trim()));\n            }\n            String colCI = formatter.formatCellValue(row.getCell(86));\n            if (!colCI.isEmpty()) {\n                phase9.setDiscount(Math.abs(Long.parseLong(colCI.replaceAll(\",\", \"\").trim())));\n            }\n            String colCJ = formatter.formatCellValue(row.getCell(87));\n            if (!colCJ.isEmpty()) {\n                phase9.setService(Long.parseLong(colCJ.replaceAll(\",\", \"\").trim()));\n            }\n            phase9.setMove(formatter.formatCellValue(row.getCell(88)));\n            String colCL = formatter.formatCellValue(row.getCell(89));\n            if (!colCL.isEmpty()) {\n                phase9.setFeesum(Long.parseLong(colCL.replaceAll(\",\", \"\").trim()));\n            }\n            phase9.setCustomer(customer);\n            customer.getPhases().add(phase9);\n\n            // 10차 (CM (90) ~ CS (96))\n            Phase phase10 = new Phase();\n            phase10.setPhaseNumber(10);\n            phase10.setPlanneddateString(formatter.formatCellValue(row.getCell(90)));\n            String colCN = formatter.formatCellValue(row.getCell(91));\n            if (!colCN.isEmpty()) {\n                phase10.setFullpaiddate(LocalDate.parse(colCN.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            String colCO = formatter.formatCellValue(row.getCell(92));\n            if (!colCO.isEmpty()) {\n                phase10.setCharge(Long.parseLong(colCO.replaceAll(\",\", \"\").trim()));\n            }\n            String colCP = formatter.formatCellValue(row.getCell(93));\n            if (!colCP.isEmpty()) {\n                phase10.setDiscount(Math.abs(Long.parseLong(colCP.replaceAll(\",\", \"\").trim())));\n            }\n            String colCQ = formatter.formatCellValue(row.getCell(94));\n            if (!colCQ.isEmpty()) {\n                phase10.setService(Long.parseLong(colCQ.replaceAll(\",\", \"\").trim()));\n            }\n            phase10.setMove(formatter.formatCellValue(row.getCell(95)));\n            String colCS = formatter.formatCellValue(row.getCell(96));\n            if (!colCS.isEmpty()) {\n                phase10.setFeesum(Long.parseLong(colCS.replaceAll(\",\", \"\").trim()));\n            }\n            phase10.setCustomer(customer);\n            customer.getPhases().add(phase10);\n\n            // DA (97): 총 면제금액 -> Status.exemptionsum\n            String colDA = formatter.formatCellValue(row.getCell(97));\n            if (!colDA.isEmpty()) {\n                customer.getStatus().setExemptionsum(Long.parseLong(colDA.replaceAll(\",\", \"\").trim()));\n            }\n            // DB (98): 해약 해지일자 -> Cancel.canceldate\n            String colDB = formatter.formatCellValue(row.getCell(98));\n            if (!colDB.isEmpty()) {\n                customer.getCancel().setCanceldate(LocalDate.parse(colDB.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            // DC (99): 해약 환급일자 -> Cancel.refunddate\n            String colDC = formatter.formatCellValue(row.getCell(99));\n            if (!colDC.isEmpty()) {\n                customer.getCancel().setRefunddate(LocalDate.parse(colDC.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            // DD (100): 해약 환급금 -> Cancel.refundamount\n            String colDD = formatter.formatCellValue(row.getCell(100));\n            if (!colDD.isEmpty()) {\n                customer.getCancel().setRefundamount(Integer.parseInt(colDD.replaceAll(\",\", \"\").trim()));\n            }\n            // DE (101): 납입총액 -> Status.ammountsum\n            String colDE = formatter.formatCellValue(row.getCell(101));\n            if (!colDE.isEmpty()) {\n                customer.getStatus().setAmmountsum(Long.parseLong(colDE.replaceAll(\",\", \"\").trim()));\n            }\n            // DG (102): 담당 총괄 -> Responsible.generalmanagement\n            customer.getResponsible().setGeneralmanagement(formatter.formatCellValue(row.getCell(102)));\n            // DH (103): 담당 본부 -> Responsible.division\n            customer.getResponsible().setDivision(formatter.formatCellValue(row.getCell(103)));\n            // DI (104): 담당 팀 -> Responsible.team\n            customer.getResponsible().setTeam(formatter.formatCellValue(row.getCell(104)));\n            // DJ (105): 담당 성명 -> Responsible.managername\n            customer.getResponsible().setManagername(formatter.formatCellValue(row.getCell(105)));\n            // DK (106): 담당 수수료지급 -> Responsible.feepaid\n            customer.getResponsible().setFeepaid(formatter.formatCellValue(row.getCell(106)));\n            // DL (107): 다힘 시상 -> Dahim.dahimsisang\n            customer.getDahim().setDahimsisang(formatter.formatCellValue(row.getCell(107)));\n            // DM (108): 다힘 일자 -> Dahim.dahimdate\n            String colDM = formatter.formatCellValue(row.getCell(108));\n            if (!colDM.isEmpty()) {\n                customer.getDahim().setDahimdate(LocalDate.parse(colDM.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            // DN (109): 다힘 6/30선지급 -> Dahim.dahimprepaid\n            customer.getDahim().setDahimprepaid(formatter.formatCellValue(row.getCell(109)));\n            // DO (110): 다힘 1회차청구 -> Dahim.dahimfirst\n            customer.getDahim().setDahimfirst(formatter.formatCellValue(row.getCell(110)));\n            // DP (111): 다힘 (1회차)금액 -> Dahim.dahimfirstpay\n            customer.getDahim().setDahimfirstpay(formatter.formatCellValue(row.getCell(111)));\n            // DQ (112): 다힘 일자2 -> Dahim.dahimdate2\n            String colDQ = formatter.formatCellValue(row.getCell(112));\n            if (!colDQ.isEmpty()) {\n                customer.getDahim().setDahimdate2(LocalDate.parse(colDQ.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            // DR (113): 다힘 출처 -> Dahim.dahimsource\n            customer.getDahim().setDahimsource(formatter.formatCellValue(row.getCell(113)));\n            // DS (114): 다힘 2회차청구 -> Dahim.dahimsecond\n            customer.getDahim().setDahimsecond(formatter.formatCellValue(row.getCell(114)));\n            // DT (115): 다힘 (2회차)금액 -> Dahim.dahimsecondpay\n            customer.getDahim().setDahimsecondpay(formatter.formatCellValue(row.getCell(115)));\n            // DU (116): 다힘 일자3 -> Dahim.dahimdate3\n            String colDU = formatter.formatCellValue(row.getCell(116));\n            if (!colDU.isEmpty()) {\n                customer.getDahim().setDahimdate3(LocalDate.parse(colDU.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            // DV (117): 다힘 합계 -> Dahim.dahimsum\n            customer.getDahim().setDahimsum(formatter.formatCellValue(row.getCell(117)));\n            // DW (118): MGM 수수료 -> MGM.mgmfee\n            String colDW = formatter.formatCellValue(row.getCell(118));\n            if (!colDW.isEmpty()) {\n                customer.getMgm().setMgmfee(Long.parseLong(colDW.replaceAll(\",\", \"\").trim()));\n            }\n            // DX (119): MGM 업체명 -> MGM.mgmcompanyname\n            customer.getMgm().setMgmcompanyname(formatter.formatCellValue(row.getCell(119)));\n            // DY (120): MGM 이름 -> MGM.mgmname\n            customer.getMgm().setMgmname(formatter.formatCellValue(row.getCell(120)));\n            // DZ (121): MGM 기관 -> MGM.mgminstitution\n            customer.getMgm().setMgminstitution(formatter.formatCellValue(row.getCell(121)));\n            // EA (122): MGM 계좌 -> MGM.mgmaccount\n            customer.getMgm().setMgmaccount(formatter.formatCellValue(row.getCell(122)));\n            // EB (123): 1차(직원) 차순 -> Firstemp.firstemptimes\n            customer.getFirstemp().setFirstemptimes(formatter.formatCellValue(row.getCell(123)));\n            // EC (124): 1차 지급일자 -> Firstemp.firstempdate\n            String colEC = formatter.formatCellValue(row.getCell(124));\n            if (!colEC.isEmpty()) {\n                customer.getFirstemp().setFirstempdate(LocalDate.parse(colEC.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            // ED (125): 2차(직원) 차순 -> Secondemp.secondemptimes\n            customer.getSecondemp().setSecondemptimes(formatter.formatCellValue(row.getCell(125)));\n            // EE (126): 2차 지급일자 -> Secondemp.secondempdate\n            String colEE = formatter.formatCellValue(row.getCell(126));\n            if (!colEE.isEmpty()) {\n                customer.getSecondemp().setSecondempdate(LocalDate.parse(colEE.replace(\"\\\"\", \"\").trim(), dtf));\n            }\n            // EF (127): 부속서류 인감증명서 -> Attachments.sealcertificateprovided\n            String colEF = formatter.formatCellValue(row.getCell(127));\n            customer.getAttachments().setSealcertificateprovided(\"o\".equalsIgnoreCase(colEF));\n            // EG (128): 부속서류 본인서명확인서 -> Attachments.selfsignatureconfirmationprovided\n            String colEG = formatter.formatCellValue(row.getCell(128));\n            customer.getAttachments().setSelfsignatureconfirmationprovided(\"o\".equalsIgnoreCase(colEG));\n            // EH (129): 부속서류 신분증 -> Attachments.idcopyprovided\n            String colEH = formatter.formatCellValue(row.getCell(129));\n            customer.getAttachments().setIdcopyprovided(\"o\".equalsIgnoreCase(colEH));\n            // EI (130): 부속서류 확약서 -> Attachments.commitmentletterprovided\n            String colEI = formatter.formatCellValue(row.getCell(130));\n            customer.getAttachments().setCommitmentletterprovided(\"o\".equalsIgnoreCase(colEI));\n            // EJ (131): 부속서류 창준위용 -> Attachments.forfounding\n            String colEJ = formatter.formatCellValue(row.getCell(131));\n            customer.getAttachments().setForfounding(\"o\".equalsIgnoreCase(colEJ));\n            // EK (132): 부속서류 무상옵션 -> Attachments.freeoption\n            String colEK = formatter.formatCellValue(row.getCell(132));\n            customer.getAttachments().setFreeoption(\"o\".equalsIgnoreCase(colEK));\n            // EL (133): 부속서류 선호도조사 -> Attachments.preferenceattachment\n            String colEL = formatter.formatCellValue(row.getCell(133));\n            customer.getAttachments().setPreferenceattachment(\"o\".equalsIgnoreCase(colEL));\n            // EM (134): 부속서류 총회동의서 -> (여기서는 prizeattachment 필드에 저장)\n            String colEM = formatter.formatCellValue(row.getCell(134));\n            customer.getAttachments().setPrizeattachment(\"o\".equalsIgnoreCase(colEM));\n            // EN (135): 부속서류 사은품 지급일자 -> if 존재하면 prizeattachment true 및 Attachments.prizedate\n            String colEN = formatter.formatCellValue(row.getCell(135));\n            if (!colEN.isEmpty()) {\n                customer.getAttachments().setPrizeattachment(true);\n                customer.getAttachments().setPrizedate(LocalDate.parse(colEN.replace(\"\\\"\", \"\").trim(), dtf));\n            } else {\n                customer.getAttachments().setPrizeattachment(false);\n            }\n            // EO (136): 이메일 -> CustomerData.email\n            customer.getCustomerData().setEmail(formatter.formatCellValue(row.getCell(136)));\n            // EP (137): 우편물수령주소 우편번호 -> Postreceive.postnumberreceive\n            customer.getPostreceive().setPostnumberreceive(formatter.formatCellValue(row.getCell(137)));\n            // EQ (138) & ER (139): 우편물수령주소 도, 군 -> Postreceive.postreceive (EQ + \" \" + ER)\n            String colEQ = formatter.formatCellValue(row.getCell(138));\n            String colER = formatter.formatCellValue(row.getCell(139));\n            customer.getPostreceive().setPostreceive(colEQ + \" \" + colER);\n            // ES (140): 우편물수령주소 상세주소 -> Postreceive.detailaddressreceive\n            customer.getPostreceive().setDetailaddressreceive(formatter.formatCellValue(row.getCell(140)));\n            // ET (141): 비고 -> Customer.additional\n            customer.setAdditional(formatter.formatCellValue(row.getCell(141)));\n            // EU (142): 가입경로 -> Customer.registerpath\n            customer.setRegisterpath(formatter.formatCellValue(row.getCell(142)));\n            // EV (143): 23/9/9총회참석여부 서면 -> Meetingattend.ftoffattend\n            customer.getMeetingattend().setFtofattend(formatter.formatCellValue(row.getCell(143)));\n            // EW (144): 23/9/9총회참석여부 직접 -> Meetingattend.selfattend\n            customer.getMeetingattend().setSelfattend(formatter.formatCellValue(row.getCell(144)));\n            // EX (145): 23/9/9총회참석여부 대리 -> Meetingattend.behalfattend\n            customer.getMeetingattend().setBehalfattend(formatter.formatCellValue(row.getCell(145)));\n            // EY (146): 특이사항 -> Customer.specialnote\n            customer.setSpecialnote(formatter.formatCellValue(row.getCell(146)));\n            // EZ (147): 투표기기 -> Customer.votemachine\n            customer.setVotemachine(formatter.formatCellValue(row.getCell(147)));\n            // FA (148): 안건 제1호 -> Agenda.agenda1\n            customer.getAgenda().setAgenda1(formatter.formatCellValue(row.getCell(148)));\n            // FB (149): 안건 제2-1호 -> Agenda.agenda2_1\n            customer.getAgenda().setAgenda2_1(formatter.formatCellValue(row.getCell(149)));\n            // FC (150): 안건 제2-2호 -> Agenda.agenda2_2\n            customer.getAgenda().setAgenda2_2(formatter.formatCellValue(row.getCell(150)));\n            // FD (151): 안건 제2-3호 -> Agenda.agenda2_3\n            customer.getAgenda().setAgenda2_3(formatter.formatCellValue(row.getCell(151)));\n            // FE (152): 안건 제2-4호 -> Agenda.agenda2_4\n            customer.getAgenda().setAgenda2_4(formatter.formatCellValue(row.getCell(152)));\n            // FF (153): 안건 제3호 -> Agenda.agenda3\n            customer.getAgenda().setAgenda3(formatter.formatCellValue(row.getCell(153)));\n            // FG (154): 안건 제4호 -> Agenda.agenda4\n            customer.getAgenda().setAgenda4(formatter.formatCellValue(row.getCell(154)));\n            // FH (155): 안건 제5호 -> Agenda.agenda5\n            customer.getAgenda().setAgenda5(formatter.formatCellValue(row.getCell(155)));\n            // FI (156): 안건 제6호 -> Agenda.agenda6\n            customer.getAgenda().setAgenda6(formatter.formatCellValue(row.getCell(156)));\n            // FJ (157): 안건 제7호 -> Agenda.agenda7\n            customer.getAgenda().setAgenda7(formatter.formatCellValue(row.getCell(157)));\n            // FK (158): 안건 제8호 -> Agenda.agenda8\n            customer.getAgenda().setAgenda8(formatter.formatCellValue(row.getCell(158)));\n            // FL (159): 안건 제9호 -> Agenda.agenda9\n            customer.getAgenda().setAgenda9(formatter.formatCellValue(row.getCell(159)));\n            // FM (160): 안건 제10호 -> Agenda.agenda10\n            customer.getAgenda().setAgenda10(formatter.formatCellValue(row.getCell(160)));\n            // FN (161): 부속서류 사은품명 -> Attachments.prizename\n            customer.getAttachments().setPrizename(formatter.formatCellValue(row.getCell(161)));\n            // FO (162): 부속서류 출자금 -> Attachments.investmentfile (Boolean)\n            String colFO = formatter.formatCellValue(row.getCell(162));\n            customer.getAttachments().setInvestmentfile(\"o\".equalsIgnoreCase(colFO));\n            // --- 열별 매핑 끝 ---\n\n            // 최종적으로 CustomerService를 통해 DB에 저장\n            customerService.createCustomer(customer);\n        }\n    }\n\n    // --- 이하 기존의 fillFormat1, fillFormat2 메서드 (변경 없이) ---\n\n    public void fillFormat1(File tempFile, Customer customer) throws IOException {\n        try (FileInputStream fis = new FileInputStream(tempFile);\n             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {\n\n            XSSFSheet sheet = workbook.getSheetAt(0);\n\n            getCell(sheet, 28, 49).setCellValue(customer.getId());\n            getCell(sheet, 33, 54).setCellValue(customer.getType() != null ? customer.getType() : \"\");\n            getCell(sheet, 33, 60).setCellValue(customer.getGroupname() != null ? customer.getGroupname() : \"\");\n            getCell(sheet, 36, 54).setCellValue(customer.getTurn() != null ? customer.getTurn() : \"\");\n            if (customer.getCustomerData() != null) {\n                getCell(sheet, 63, 7).setCellValue(customer.getCustomerData().getName() != null ? customer.getCustomerData().getName() : \"\");\n            }\n            if (customer.getLegalAddress() != null) {\n                String address = \"\";\n                if (customer.getLegalAddress().getPost() != null) {\n                    address += customer.getLegalAddress().getPost();\n                }\n                if (customer.getLegalAddress().getDetailaddress() != null) {\n                    address += customer.getLegalAddress().getDetailaddress();\n                }\n                getCell(sheet, 65, 7).setCellValue(address);\n            }\n            if (customer.getCustomerData() != null) {\n                getCell(sheet, 67, 7).setCellValue(customer.getCustomerData().getEmail() != null ? customer.getCustomerData().getEmail() : \"\");\n            }\n            getCell(sheet, 69, 23).setCellValue(customer.getCustomerData() != null ? customer.getCustomerData().getPhone() : \"\");\n            if (customer.getRegisterprice() != null) {\n                getCell(sheet, 73, 23).setCellValue(customer.getRegisterprice());\n            }\n            if (customer.getFinancial() != null) {\n                getCell(sheet, 81, 2).setCellValue(customer.getFinancial().getBankname() != null ? customer.getFinancial().getBankname() : \"\");\n                getCell(sheet, 81, 11).setCellValue(customer.getFinancial().getAccountnum() != null ? customer.getFinancial().getAccountnum() : \"\");\n                getCell(sheet, 81, 22).setCellValue(customer.getFinancial().getTrustcompany() != null ? customer.getFinancial().getTrustcompany() : \"\");\n            }\n            if (customer.getRegisterdate() != null) {\n                getCell(sheet, 96, 13).setCellValue(customer.getRegisterdate().toString());\n            }\n            if (customer.getPhases() != null && customer.getPhases().size() > 0) {\n                getCell(sheet, 65, 52).setCellValue(customer.getPhases().get(0).getCharge() != null ? customer.getPhases().get(0).getCharge() : 0);\n            }\n            if (customer.getStatus() != null && customer.getStatus().getAmmountsum() != null) {\n                getCell(sheet, 81, 52).setCellValue(customer.getStatus().getAmmountsum());\n            }\n            workbook.setForceFormulaRecalculation(true);\n            try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n                workbook.write(fos);\n            }\n        }\n    }\n\n    public void fillFormat2(File tempFile, Customer customer) throws IOException {\n        try (FileInputStream fis = new FileInputStream(tempFile);\n             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {\n\n            XSSFSheet sheet = workbook.getSheetAt(0);\n\n            if (customer.getCustomerData() != null && customer.getCustomerData().getName() != null) {\n                getCell(sheet, 8, 6).setCellValue(customer.getCustomerData().getName());\n            }\n            LocalDate rd = customer.getRegisterdate();\n            if (rd != null) {\n                getCell(sheet, 48, 11).setCellValue(rd.toString());\n            }\n            if (customer.getCustomerData() != null && customer.getCustomerData().getName() != null) {\n                getCell(sheet, 63, 11).setCellValue(customer.getCustomerData().getName());\n            }\n            if (customer.getCustomerData() != null && customer.getCustomerData().getResnumfront() != null) {\n                getCell(sheet, 65, 11).setCellValue(customer.getCustomerData().getResnumfront());\n            }\n            if (customer.getCustomerData() != null && customer.getCustomerData().getPhone() != null) {\n                getCell(sheet, 67, 11).setCellValue(customer.getCustomerData().getPhone());\n            }\n            String address = \"\";\n            if (customer.getLegalAddress() != null) {\n                if (customer.getLegalAddress().getPost() != null) {\n                    address += customer.getLegalAddress().getPost();\n                }\n                if (customer.getLegalAddress().getDetailaddress() != null) {\n                    address += customer.getLegalAddress().getDetailaddress();\n                }\n            }\n            getCell(sheet, 69, 11).setCellValue(address);\n            if (customer.getCustomerData() != null && customer.getCustomerData().getResnumfront() != null && customer.getCustomerData().getResnumback() != null) {\n                String rrn = customer.getCustomerData().getResnumfront() + \"-\" + customer.getCustomerData().getResnumback();\n                getCell(sheet, 150, 12).setCellValue(rrn);\n            }\n            workbook.setForceFormulaRecalculation(true);\n            try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n                workbook.write(fos);\n            }\n        }\n    }\n\n    private Cell getCell(XSSFSheet sheet, int rowIndex, int colIndex) {\n        Row row = sheet.getRow(rowIndex);\n        if (row == null) {\n            row = sheet.createRow(rowIndex);\n        }\n        Cell cell = row.getCell(colIndex);\n        if (cell == null) {\n            cell = row.createCell(colIndex);\n        }\n        return cell;\n    }\n}\n",
            "FeeService.java": "// FeeService.java\npackage com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class FeeService {\n\n    @Autowired\n    private FeeRepository feeRepository;\n\n    /**\n     * 새로운 Fee와 연관된 FeePerPhase 생성\n     *\n     * @param fee 생성할 Fee 객체\n     * @return 생성된 Fee 객체\n     */\n    public Fee createFee(Fee fee) {\n        // 양방향 관계 설정\n        if (fee.getFeePerPhases() != null) {\n            for (FeePerPhase phase : fee.getFeePerPhases()) {\n                phase.setFee(fee);\n            }\n        }\n        return feeRepository.save(fee);\n    }\n\n    /**\n     * ID로 Fee 조회\n     *\n     * @param id Fee의 ID\n     * @return Fee 객체 (존재할 경우), 없을 경우 null\n     */\n    public Fee getFeeById(Long id) {\n        return feeRepository.findById(id).orElse(null);\n    }\n\n    /**\n     * 모든 Fee 조회\n     *\n     * @return 모든 Fee의 리스트\n     */\n    public List<Fee> getAllFees() {\n        return feeRepository.findAll();\n    }\n}\n",
            "PhaseService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.repository.PhaseRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class PhaseService {\n\n    @Autowired\n    private PhaseRepository phaseRepository;\n\n    // 특정 고객 ID로 Phase 리스트를 조회하는 메서드\n    public List<Phase> getPhasesByCustomerId(Integer customerId) {\n        return phaseRepository.findByCustomerId(customerId);\n    }\n\n    public Optional<Phase> getPhaseById(Long id) {\n        return phaseRepository.findById(id);\n    }\n\n    public Phase savePhase(Phase phase) {\n        return phaseRepository.save(phase);\n    }\n}\n"
        }
    }
}