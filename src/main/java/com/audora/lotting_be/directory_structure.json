{
    "__files__": {
        "codes.py": null,
        "DataInitializer.java": "// DataInitializer.java\npackage com.audora.lotting_be;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Component\npublic class DataInitializer implements CommandLineRunner {\n\n    @Autowired\n    private FeeRepository feeRepository;\n\n    @Override\n    public void run(String... args) throws Exception {\n        Fee existingFee = feeRepository.findByTypeAndGroupnameAndBatch(\"Type1\", \"A\", \"1\");\n\n        if (existingFee == null) {\n            Fee fee = new Fee();\n            fee.setGroupname(\"A\");\n            fee.setFloor(\"10\");\n            fee.setBatch(\"1\");\n            fee.setType(\"Type1\");\n            fee.setSupplyarea(100L);\n            fee.setPriceperp(2000000L);\n            fee.setPrice(200000000L);\n            fee.setPaymentratio(0.1);\n            fee.setPaysum(20000000L);\n\n            List<FeePerPhase> feePerPhases = new ArrayList<>();\n\n            for (int i = 1; i <= 10; i++) {\n                FeePerPhase phase = new FeePerPhase();\n                phase.setPhaseNumber(i);\n                phase.setPhasefee(5000000L * i);\n                phase.setPhasedate(i + \"달\");\n                phase.setFee(fee);\n                feePerPhases.add(phase);\n            }\n\n            fee.setFeePerPhases(feePerPhases);\n\n            feeRepository.save(fee);\n        }\n    }\n}\n",
        "directory_structure.json": null,
        "example.txt": null,
        "LottingBeApplication.java": "package com.audora.lotting_be;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class LottingBeApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(LottingBeApplication.class, args);\n\t}\n\n}\n"
    },
    "config": {
        "__files__": {
            "SecurityConfig.java": "// SecurityConfig.java\npackage com.audora.lotting_be.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n                .csrf((csrf)->csrf.disable()) // CSRF 보호 비활성화 (테스트 시)\n                .authorizeHttpRequests(authorize -> authorize\n                        .anyRequest().permitAll() // 모든 요청에 대해 인증 없이 접근 허용\n                );\n\n        return http.build();\n    }\n}\n"
        }
    },
    "controller": {
        "__files__": {
            "CustomerController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.PhaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/customers\")\npublic class CustomerController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    @Autowired\n    private PhaseService phaseService;\n\n    // 기존의 고객 생성 엔드포인트\n    @PostMapping\n    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {\n        Customer createdCustomer = customerService.createCustomer(customer);\n        return ResponseEntity.ok(createdCustomer);\n    }\n\n    // 기존의 고객 조회 엔드포인트\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Customer> getCustomerById(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer != null) {\n            return ResponseEntity.ok(customer);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    // 새로운 Phase 조회 엔드포인트\n    @GetMapping(\"/{id}/phases\")\n    public ResponseEntity<List<Phase>> getPhasesByCustomerId(@PathVariable Integer id) {\n        List<Phase> phases = phaseService.getPhasesByCustomerId(id);\n        if (!phases.isEmpty()) {\n            return ResponseEntity.ok(phases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n}\n"
        }
    },
    "model": {
        "customer": {
            "__files__": {
                "Attachments.java": "// Attachments.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Attachments {\n    private Boolean isuploaded; // 파일 제출했는지 여부\n    private String fileinfo; // 파일 주소, 이름, 확장자\n\n    private Boolean contract; //지산 A동 계약서\n    private Boolean agreement; //동의서\n\n    private Boolean sealcertificateprovided; // 인감증명서 제출 여부\n    private Boolean selfsignatureconfirmationprovided; // 본인서명확인서 제출 여부\n    private Boolean idcopyprovided; // 신분증 사본 제출 여부\n    private Boolean commitmentletterprovided; // 확약서 제출 여부\n    private Boolean forfounding; //창준위용 제출여부\n    private Boolean freeoption; //무상옵션 제출여부\n    private Boolean preferenceattachment; //선호도조사 제출여부\n    private Boolean generalmeetingconsentformprovided; // 총회 동의서 제출 여부\n    private Boolean prizeattachment; // 사은품 제출 여부\n\n}\n",
                "Customer.java": "// Customer.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Customer {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id; //관리번호\n\n    private String type; //타입\n    private String groupname; //군\n    private Integer turn; //순번\n    private String batch; //가입차순\n    private LocalDate registerdate; //가입일자\n    private Long registerprice; //가입가\n\n    @Embedded\n    private CustomerData customerData; //가입자\n\n    @Embedded\n    private LegalAddress legalAddress; //법정주소\n\n    @Embedded\n    private Postreceive postreceive; //우편물 수령주소\n\n    @Embedded\n    private Financial financial; //금융기관\n\n    @Embedded\n    private Deposit deposits; //예약금\n\n    @Embedded\n    private Attachments attachments; //제출서류\n\n    @Embedded\n    private Loan loan; //대출,자납\n\n    @Embedded\n    private Responsible responsible;\n\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<Phase> phases; //n차\n\n    @OneToOne(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    private Status status; //현 상태\n\n\n}\n",
                "CustomerData.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class CustomerData {\n    private String name; //성명\n    private Integer resnumfront; //주민번호 앞자리\n    private Integer resnumback; //주민번호 뒷자리\n    private String phone; //휴대전화\n    private String email; // E-mail\n}",
                "Deposit.java": "// Deposit.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Deposit {\n    private LocalDate depositdate; //납입일자\n    private Long depositammount; //금액\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    private Customer customer;\n}\n",
                "Financial.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Financial {\n    private String bankname; //은행명\n    private Long accountnum; //계좌번호\n    private String accountholder; //예금주\n    private String trustcompany; //신탁사\n}",
                "LegalAddress.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class LegalAddress {\n    private Integer postnumber; //우편번호\n    private String province; //도\n    private String county; //군\n    private String detailaddress; //상세주소\n}",
                "Loan.java": "// Loan.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Loan {\n    private LocalDate loandate; //대출일자\n    private String loanbank; //은행\n    private Long loanammount; //대출액\n    private LocalDate selfdate; //자납일\n    private Long selfammount; //자납액\n    private Long loanselfsum; //합계\n    private Long loanselfcurrent; //잔액\n}\n",
                "Phase.java": "// Phase.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Entity\n@Data\npublic class Phase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber; //차수\n    private LocalDate planneddate; //예정일자\n    private LocalDate fullpaiddate; //완납일자\n    private Long charge; //부담금\n    private Long discount; //할인액\n    private Long exemption; //면제금액\n    private Long service; //업무대행비\n    private String move; //이동\n    private Long feesum; //n차합\n    private Long charged; //낸 금액\n    private Long sum; //남은금액\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n",
                "Postreceive.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Postreceive {\n    private Integer postnumberreceive; //우편번호\n    private String provincereceive; //도\n    private String countyreceive; //군\n    private String detailaddressreceive; //상세주소\n}",
                "Responsible.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Responsible {\n    private String generalmanagement; //총괄\n    private Integer division; //본부\n    private Integer team; //팀\n    private String managername; //담당자 성명\n    private String registerroot; //가입경로\n}",
                "Status.java": "// Status.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class Status {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Long exemptionsum; //총면제금액\n    private Long unpaidammout; //미납금액\n    private String unpaidphase; //미납차순 (1,2,3,...)\n    private Long prepaidammount; //기납부금액\n    private Long ammountsum; //1~n차 납입총액\n    private Long percent40; //40%\n\n    @OneToOne\n    @JoinColumn(name = \"customer_id\")\n    private Customer customer;\n}\n"
            }
        },
        "Fee": {
            "__files__": {
                "Fee.java": "// Fee.java\npackage com.audora.lotting_be.model.Fee;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Fee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String groupname; //군\n    private String floor; //층\n    private String batch; //가입차순\n    private String type; //타입\n    private Long supplyarea; //공급면적\n    private Long priceperp; //평당가\n    private Long price; //금액\n    private Double paymentratio; //납입비율\n    private Long paysum; //합계\n\n    @OneToMany(mappedBy = \"fee\", cascade = CascadeType.ALL)\n    private List<FeePerPhase> feePerPhases;\n}\n",
                "FeePerPhase.java": "// FeePerPhase.java\npackage com.audora.lotting_be.model.Fee;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class FeePerPhase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber; //n차\n    private Long phasefee; //금액\n    private String phasedate; //제출일\n\n    @ManyToOne\n    @JoinColumn(name = \"fee_id\")\n    private Fee fee;\n}\n"
            }
        }
    },
    "repository": {
        "__files__": {
            "CustomerRepository.java": "// CustomerRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface CustomerRepository extends JpaRepository<Customer, Integer> {\n}\n",
            "FeeRepository.java": "// FeeRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface FeeRepository extends JpaRepository<Fee, Long> {\n    Fee findByTypeAndGroupnameAndBatch(String type, String group, String batch);\n}\n",
            "PhaseRepository.java": "package com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.List;\n\npublic interface PhaseRepository extends JpaRepository<Phase, Long> {\n    List<Phase> findByCustomerId(Integer customerId);\n}\n"
        }
    },
    "service": {
        "__files__": {
            "CustomerService.java": "// CustomerService.java\npackage com.audora.lotting_be.service;\n\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.repository.CustomerRepository;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class CustomerService {\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private FeeRepository feeRepository;\n    public Customer getCustomerById(Integer id) {\n        Optional<Customer> optionalCustomer = customerRepository.findById(id);\n        return optionalCustomer.orElse(null);\n    }\n    public Customer createCustomer(Customer customer) {\n        Fee fee = feeRepository.findByTypeAndGroupnameAndBatch(\n                customer.getType(), customer.getGroupname(), customer.getBatch());\n\n        if (fee != null) {\n            List<FeePerPhase> feePerPhases = fee.getFeePerPhases();\n            List<Phase> phases = new ArrayList<>();\n\n            for (FeePerPhase feePerPhase : feePerPhases) {\n                Phase phase = new Phase();\n                phase.setPhaseNumber(feePerPhase.getPhaseNumber());\n                phase.setCharge(feePerPhase.getPhasefee());\n\n                LocalDate plannedDate = calculatePlannedDate(\n                        customer.getRegisterdate(), feePerPhase.getPhasedate());\n                phase.setPlanneddate(plannedDate);\n\n                phase.setCustomer(customer);\n                phases.add(phase);\n            }\n            customer.setPhases(phases);\n        }\n        return customerRepository.save(customer);\n    }\n\n    private LocalDate calculatePlannedDate(LocalDate registerDate, String phasedate) {\n        if (phasedate.endsWith(\"달\") || phasedate.endsWith(\"개월\")) {\n            int months = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusMonths(months);\n        } else if (phasedate.endsWith(\"년\")) {\n            int years = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusYears(years);\n        } else {\n            return registerDate;\n        }\n    }\n}\n",
            "PhaseService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.repository.PhaseRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class PhaseService {\n\n    @Autowired\n    private PhaseRepository phaseRepository;\n\n    // 특정 고객 ID로 Phase 리스트를 조회하는 메서드\n    public List<Phase> getPhasesByCustomerId(Integer customerId) {\n        return phaseRepository.findByCustomerId(customerId);\n    }\n}\n"
        }
    }
}