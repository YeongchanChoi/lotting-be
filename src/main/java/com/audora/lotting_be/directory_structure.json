{
    "__files__": {
        "codes.py": null,
        "directory_structure.json": null,
        "example.txt": null,
        "LottingBeApplication.java": "package com.audora.lotting_be;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class LottingBeApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(LottingBeApplication.class, args);\n\t}\n\n}\n"
    },
    "config": {
        "__files__": {
            "SecurityConfig.java": "// src/main/java/com/audora/lotting_be/config/SecurityConfig.java\n\npackage com.audora.lotting_be.config;\n\nimport com.audora.lotting_be.security.AuthTokenFilter;\nimport com.audora.lotting_be.security.UserDetailsServiceImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Arrays;\n\n@Configuration\n@EnableMethodSecurity(prePostEnabled = true) // 메서드 단위 보안 활성화\npublic class SecurityConfig {\n\n    @Autowired\n    private UserDetailsServiceImpl userDetailsService;\n\n    @Autowired\n    private AuthTokenFilter authTokenFilter;\n\n    // AuthenticationManager 빈 정의\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {\n        return authConfig.getAuthenticationManager();\n    }\n\n    // PasswordEncoder 빈 정의\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    // CORS 설정 정의\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration configuration = new CorsConfiguration();\n\n        // 허용할 출처(Origin) 설정\n        configuration.setAllowedOrigins(Arrays.asList(\"http://localhost:3000\",\"http://3.38.181.18:3000\"));\n\n        // 허용할 HTTP 메서드 설정\n        configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\n\n        // 허용할 헤더 설정 (charset 추가)\n        configuration.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Cache-Control\", \"Content-Type\", \"charset\"));\n\n        // 인증 정보(쿠키 등)를 포함할지 여부\n        configuration.setAllowCredentials(true);\n\n        // 적용할 경로 설정\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", configuration);\n\n        return source;\n    }\n\n    // SecurityFilterChain 빈 정의\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n                .cors(cors -> cors.configurationSource(corsConfigurationSource()))\n                .csrf(csrf -> csrf.disable())\n                .authorizeHttpRequests(auth -> auth\n                        .anyRequest().permitAll() // 모든 요청에 대해 인증 없이 접근 허용\n                )\n                .sessionManagement(session -> session\n                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                );\n\n        // JWT 필터 추가 부분은 남겨두되, 현재는 인증을 요구하지 않으므로 실질적으로 효과가 없음\n        http.addFilterBefore(authTokenFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n\n}\n"
        }
    },
    "controller": {
        "__files__": {
            "AuthController.java": "// src/main/java/com/audora/lotting_be/controller/AuthController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.audora.lotting_be.payload.request.LoginRequest;\nimport com.audora.lotting_be.payload.request.SignupRequest;\nimport com.audora.lotting_be.payload.response.JwtResponse;\nimport com.audora.lotting_be.payload.response.MessageResponse;\nimport com.audora.lotting_be.repository.ManagerRepository;\nimport com.audora.lotting_be.security.JwtUtils;\nimport com.audora.lotting_be.security.UserDetailsImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.authentication.*;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/auth\")\npublic class AuthController {\n\n    private final AuthenticationManager authenticationManager;\n    private final ManagerRepository managerRepository;\n    private final PasswordEncoder encoder;\n    private final JwtUtils jwtUtils;\n\n    @Autowired\n    public AuthController(AuthenticationManager authenticationManager,\n                          ManagerRepository managerRepository,\n                          PasswordEncoder encoder,\n                          JwtUtils jwtUtils) {\n        this.authenticationManager = authenticationManager;\n        this.managerRepository = managerRepository;\n        this.encoder = encoder;\n        this.jwtUtils = jwtUtils;\n    }\n\n    @PostMapping(\"/signin\")\n    public ResponseEntity<?> authenticateManager(@RequestBody LoginRequest loginRequest) {\n\n        Authentication authentication = authenticationManager.authenticate(\n                new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));\n\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        String jwt = jwtUtils.generateJwtToken((UserDetailsImpl) authentication.getPrincipal());\n\n        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();\n        List<String> roles = userDetails.getAuthorities().stream()\n                .map(item -> item.getAuthority())\n                .collect(Collectors.toList());\n\n        return ResponseEntity.ok(new JwtResponse(jwt,\n                userDetails.getId(),\n                userDetails.getUsername(),\n                roles));\n    }\n\n    @PostMapping(\"/signup\")\n    public ResponseEntity<?> registerManager(@RequestBody SignupRequest signUpRequest) {\n        if (managerRepository.existsByUsername(signUpRequest.getUsername())) {\n            return ResponseEntity\n                    .badRequest()\n                    .body(new MessageResponse(\"Error: Username is already taken!\"));\n        }\n\n        // Create new manager's account\n        Manager manager = new Manager();\n        manager.setUsername(signUpRequest.getUsername());\n        manager.setPassword(encoder.encode(signUpRequest.getPassword()));\n        manager.setRoles(signUpRequest.getRoles());\n\n        managerRepository.save(manager);\n\n        return ResponseEntity.ok(new MessageResponse(\"Manager registered successfully!\"));\n    }\n}\n",
            "CustomerController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.model.customer.minor.Loan;\nimport com.audora.lotting_be.payload.response.MessageResponse;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.PhaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/customers\")\npublic class CustomerController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    @Autowired\n    private PhaseService phaseService;\n\n    @GetMapping(\"/nextId\")\n    public ResponseEntity<Integer> getNextCustomerId() {\n        Integer nextId = customerService.getNextCustomerId();\n        return ResponseEntity.ok(nextId);\n    }\n\n    @PostMapping\n    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {\n        System.out.println(\"Received Customer Data: \" + customer);\n        if (customer.getDeposits() != null) {\n            System.out.println(\"Received Deposit Date: \" + customer.getDeposits().getDepositdate());\n        } else {\n            System.out.println(\"Deposits is null\");\n        }\n        Customer createdCustomer = customerService.createCustomer(customer);\n        return ResponseEntity.ok(createdCustomer);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Customer> getCustomerById(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer != null) {\n            return ResponseEntity.ok(customer);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/{id}/phases\")\n    public ResponseEntity<List<Phase>> getPhasesByCustomerId(@PathVariable Integer id) {\n        List<Phase> phases = phaseService.getPhasesByCustomerId(id);\n        if (!phases.isEmpty()) {\n            return ResponseEntity.ok(phases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/search\")\n    public ResponseEntity<List<Customer>> searchCustomers(\n            @RequestParam(required = false) String name,\n            @RequestParam(required = false) String number\n    ) {\n        List<Customer> customers = customerService.searchCustomers(name, number);\n        return ResponseEntity.ok(customers);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteCustomer(@PathVariable Integer id) {\n        customerService.deleteCustomer(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    @GetMapping(\"/{customerId}/pending-phases\")\n    public ResponseEntity<List<Phase>> getPendingPhases(@PathVariable Integer customerId) {\n        List<Phase> pendingPhases = customerService.getPendingPhases(customerId);\n        if (pendingPhases != null) {\n            return ResponseEntity.ok(pendingPhases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/{customerId}/completed-phases\")\n    public ResponseEntity<List<Phase>> getCompletedPhases(@PathVariable Integer customerId) {\n        List<Phase> completedPhases = customerService.getCompletedPhases(customerId);\n        if (completedPhases != null) {\n            return ResponseEntity.ok(completedPhases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/{id}/loan\")\n    public ResponseEntity<?> getLoanByCustomerId(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n        return ResponseEntity.ok(customer.getLoan());\n    }\n\n    /**\n     * [수정됨] 대출/자납 업데이트:\n     * 1) Loan 필드 업데이트\n     * 2) customerService.saveCustomer(...)\n     * 3) customerService.recalculateEverything(...)\n     */\n    @PutMapping(\"/{id}/loan\")\n    public ResponseEntity<Customer> updateLoanByCustomerId(@PathVariable Integer id, @RequestBody Loan updatedLoan) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n\n        Loan loan = customer.getLoan();\n        if (loan == null) {\n            loan = new Loan();\n        }\n        loan.setLoandate(updatedLoan.getLoandate());\n        loan.setLoanbank(updatedLoan.getLoanbank());\n        loan.setLoanammount(updatedLoan.getLoanammount());\n        loan.setSelfdate(updatedLoan.getSelfdate());\n        loan.setSelfammount(updatedLoan.getSelfammount());\n        customer.setLoan(loan);\n\n        System.out.println(\"============================================\");\n\n        // 우선 저장\n        customerService.saveCustomer(customer);\n        // 전체 재계산\n        customerService.recalculateEverything(customer);\n\n        return ResponseEntity.ok(customer);\n    }\n\n    @PutMapping(\"/{id}/cancel\")\n    public ResponseEntity<?> cancelCustomer(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.status(404)\n                    .body(new MessageResponse(\"Error: Customer not found.\"));\n        }\n        customer.setCustomertype(\"x\");\n        customerService.saveCustomer(customer);\n        return ResponseEntity.ok(new MessageResponse(\"Customer cancelled successfully.\"));\n    }\n\n    /**\n     * [수정됨] Customer 전체 업데이트:\n     * - 기존 필드 갱신 후 save\n     * - 곧바로 recalculateEverything\n     */\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Customer> updateCustomer(@PathVariable Integer id, @RequestBody Customer updatedCustomer) {\n        System.out.println(\"========== Updated Customer JSON Data ==========\");\n        System.out.println(updatedCustomer);\n        if (updatedCustomer.getAttachments() != null) {\n            System.out.println(\"Prize Name: \" + updatedCustomer.getAttachments().getPrizename());\n            System.out.println(\"Prize Date: \" + updatedCustomer.getAttachments().getPrizedate());\n        }\n        System.out.println(\"===============================================\");\n\n        Customer existingCustomer = customerService.getCustomerById(id);\n        if (existingCustomer == null) {\n            return ResponseEntity.notFound().build();\n        }\n\n        existingCustomer.setCustomertype(updatedCustomer.getCustomertype());\n        existingCustomer.setType(updatedCustomer.getType());\n        existingCustomer.setGroupname(updatedCustomer.getGroupname());\n        existingCustomer.setTurn(updatedCustomer.getTurn());\n        existingCustomer.setBatch(updatedCustomer.getBatch());\n        existingCustomer.setRegisterdate(updatedCustomer.getRegisterdate());\n        existingCustomer.setRegisterprice(updatedCustomer.getRegisterprice());\n        existingCustomer.setAdditional(updatedCustomer.getAdditional());\n        existingCustomer.setRegisterpath(updatedCustomer.getRegisterpath());\n        existingCustomer.setSpecialnote(updatedCustomer.getSpecialnote());\n        existingCustomer.setPrizewinning(updatedCustomer.getPrizewinning());\n\n        existingCustomer.getCustomerData().setName(updatedCustomer.getCustomerData().getName());\n        existingCustomer.getCustomerData().setPhone(updatedCustomer.getCustomerData().getPhone());\n        existingCustomer.getCustomerData().setResnumfront(updatedCustomer.getCustomerData().getResnumfront());\n        existingCustomer.getCustomerData().setResnumback(updatedCustomer.getCustomerData().getResnumback());\n        existingCustomer.getCustomerData().setEmail(updatedCustomer.getCustomerData().getEmail());\n\n        existingCustomer.getLegalAddress().setPostnumber(updatedCustomer.getLegalAddress().getPostnumber());\n        existingCustomer.getLegalAddress().setPost(updatedCustomer.getLegalAddress().getPost());\n        existingCustomer.getLegalAddress().setDetailaddress(updatedCustomer.getLegalAddress().getDetailaddress());\n\n        existingCustomer.getPostreceive().setPostnumberreceive(updatedCustomer.getPostreceive().getPostnumberreceive());\n        existingCustomer.getPostreceive().setPostreceive(updatedCustomer.getPostreceive().getPostreceive());\n        existingCustomer.getPostreceive().setDetailaddressreceive(updatedCustomer.getPostreceive().getDetailaddressreceive());\n\n        existingCustomer.getFinancial().setBankname(updatedCustomer.getFinancial().getBankname());\n        existingCustomer.getFinancial().setAccountnum(updatedCustomer.getFinancial().getAccountnum());\n        existingCustomer.getFinancial().setAccountholder(updatedCustomer.getFinancial().getAccountholder());\n\n        // 예약금(deposit)\n        existingCustomer.getDeposits().setDepositdate(updatedCustomer.getDeposits().getDepositdate());\n        existingCustomer.getDeposits().setDepositammount(updatedCustomer.getDeposits().getDepositammount());\n\n        existingCustomer.getResponsible().setGeneralmanagement(updatedCustomer.getResponsible().getGeneralmanagement());\n        existingCustomer.getResponsible().setDivision(updatedCustomer.getResponsible().getDivision());\n        existingCustomer.getResponsible().setTeam(updatedCustomer.getResponsible().getTeam());\n        existingCustomer.getResponsible().setManagername(updatedCustomer.getResponsible().getManagername());\n\n        existingCustomer.getMgm().setMgmcompanyname(updatedCustomer.getMgm().getMgmcompanyname());\n        existingCustomer.getMgm().setMgmname(updatedCustomer.getMgm().getMgmname());\n        existingCustomer.getMgm().setMgminstitution(updatedCustomer.getMgm().getMgminstitution());\n        existingCustomer.getMgm().setMgmaccount(updatedCustomer.getMgm().getMgmaccount());\n\n        existingCustomer.getAttachments().setIsuploaded(updatedCustomer.getAttachments().getIsuploaded());\n        existingCustomer.getAttachments().setSealcertificateprovided(updatedCustomer.getAttachments().getSealcertificateprovided());\n        existingCustomer.getAttachments().setSelfsignatureconfirmationprovided(updatedCustomer.getAttachments().getSelfsignatureconfirmationprovided());\n        existingCustomer.getAttachments().setCommitmentletterprovided(updatedCustomer.getAttachments().getCommitmentletterprovided());\n        existingCustomer.getAttachments().setIdcopyprovided(updatedCustomer.getAttachments().getIdcopyprovided());\n        existingCustomer.getAttachments().setFreeoption(updatedCustomer.getAttachments().getFreeoption());\n        existingCustomer.getAttachments().setForfounding(updatedCustomer.getAttachments().getForfounding());\n        existingCustomer.getAttachments().setAgreement(updatedCustomer.getAttachments().getAgreement());\n        existingCustomer.getAttachments().setPreferenceattachment(updatedCustomer.getAttachments().getPreferenceattachment());\n        existingCustomer.getAttachments().setPrizeattachment(updatedCustomer.getAttachments().getPrizeattachment());\n        existingCustomer.getAttachments().setExemption7(updatedCustomer.getAttachments().getExemption7());\n        existingCustomer.getAttachments().setInvestmentfile(updatedCustomer.getAttachments().getInvestmentfile());\n        existingCustomer.getAttachments().setContract(updatedCustomer.getAttachments().getContract());\n        existingCustomer.getAttachments().setFileinfo(updatedCustomer.getAttachments().getFileinfo());\n        // 새로 추가된 필드\n        existingCustomer.getAttachments().setPrizename(updatedCustomer.getAttachments().getPrizename());\n        existingCustomer.getAttachments().setPrizedate(updatedCustomer.getAttachments().getPrizedate());\n\n        // 먼저 저장\n        customerService.saveCustomer(existingCustomer);\n        // 바로 전체 재계산\n        customerService.recalculateEverything(existingCustomer);\n\n        return ResponseEntity.ok(existingCustomer);\n    }\n\n    @GetMapping(\"/count/contracted\")\n    public ResponseEntity<Long> countContractedCustomers() {\n        long count = customerService.countContractedCustomers();\n        return ResponseEntity.ok(count);\n    }\n\n    @GetMapping(\"/count/fullypaid\")\n    public ResponseEntity<Long> countFullyPaidCustomers() {\n        long count = customerService.countFullyPaidOrNotOverdueCustomers();\n        return ResponseEntity.ok(count);\n    }\n}\n",
            "DepositHistoryController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.DepositHistoryService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/deposit\") // 입금내역 관련 엔드포인트\npublic class DepositHistoryController {\n\n    @Autowired\n    private DepositHistoryService depositHistoryService;\n\n    @Autowired\n    private CustomerService customerService;\n\n    // [GET] 특정 고객의 입금내역 조회\n    // URL 예: GET /deposit/customer/123\n    @GetMapping(\"/customer/{userId}\")\n    public ResponseEntity<List<DepositHistory>> getDepositHistoriesByCustomerId(@PathVariable Integer userId) {\n        Customer customer = customerService.getCustomerById(userId);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n        List<DepositHistory> depositHistories = customer.getDepositHistories();\n        return ResponseEntity.ok(depositHistories);\n    }\n\n    // [POST] 입금내역 생성\n    @PostMapping\n    public ResponseEntity<DepositHistory> createDepositHistory(@RequestBody DepositHistory depositHistory) {\n        DepositHistory saved = depositHistoryService.createDepositHistory(depositHistory);\n        return ResponseEntity.ok(saved);\n    }\n\n    // [PUT] 입금내역 수정\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<DepositHistory> updateDepositHistory(\n            @PathVariable Long id,\n            @RequestBody DepositHistory updatedDepositHistory) {\n        DepositHistory updated = depositHistoryService.updateDepositHistory(id, updatedDepositHistory);\n        return ResponseEntity.ok(updated);\n    }\n\n    // [DELETE] 입금내역 삭제\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteDepositHistory(@PathVariable Long id) {\n        depositHistoryService.deleteDepositHistory(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n",
            "DepositListController.java": "// src/main/java/com/audora/lotting_be/controller/DepositListController.java\n\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.payload.response.CustomerDepositDTO;\nimport com.audora.lotting_be.service.CustomerService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/depositlist\") //입금 여부 한눈에 보는 페이지 전용\npublic class DepositListController {\n\n    private final CustomerService customerService;\n\n    @Autowired\n    public DepositListController(CustomerService customerService) {\n        this.customerService = customerService;\n    }\n\n    /**\n     * 모든 회원의 입금 기록 DTO 리스트 반환\n     */\n    @GetMapping\n    public ResponseEntity<List<CustomerDepositDTO>> getAllDepositHistory() {\n        List<CustomerDepositDTO> depositDTOList = customerService.getAllCustomerDepositDTOs();\n        return ResponseEntity.ok(depositDTOList);\n    }\n}\n",
            "FeeController.java": "// FeeController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.service.FeeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/fees\")\npublic class FeeController {\n\n    @Autowired\n    private FeeService feeService;\n\n    /**\n     * 새로운 Fee 생성\n     *\n     * @param fee 생성할 Fee 객체\n     * @return 생성된 Fee 객체\n     */\n    @PostMapping\n    public ResponseEntity<Fee> createFee(@RequestBody Fee fee) {\n        Fee createdFee = feeService.createFee(fee);\n        return ResponseEntity.ok(createdFee);\n    }\n\n    /**\n     * ID로 Fee 조회\n     *\n     * @param id Fee의 ID\n     * @return Fee 객체 (존재할 경우)\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Fee> getFeeById(@PathVariable Long id) {\n        Fee fee = feeService.getFeeById(id);\n        if (fee != null) {\n            return ResponseEntity.ok(fee);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    /**\n     * 모든 Fee 조회\n     *\n     * @return 모든 Fee의 리스트\n     */\n    @GetMapping\n    public ResponseEntity<List<Fee>> getAllFees() {\n        List<Fee> fees = feeService.getAllFees();\n        return ResponseEntity.ok(fees);\n    }\n}\n",
            "FileController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.ExcelService;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.util.UriUtils;\n\nimport java.io.*;\nimport java.net.MalformedURLException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.*;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/files\")\npublic class FileController {\n\n    @Value(\"${file.upload-dir}\")\n    private String uploadDir;\n\n    // CustomerService 주입\n    @Autowired\n    private CustomerService customerService;\n\n    // 새로 추가된 ExcelService 주입\n    @Autowired\n    private ExcelService excelService;\n\n    /**\n     * 파일 업로드 예시 메서드\n     */\n    @PostMapping(\"/upload\")\n    public ResponseEntity<?> uploadFile(@RequestParam(\"file\") MultipartFile file) {\n        try {\n            String fileName = Paths.get(file.getOriginalFilename()).getFileName().toString();\n            Path path = Paths.get(uploadDir).resolve(fileName);\n            Files.createDirectories(path.getParent());\n            Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);\n            return ResponseEntity.ok(fileName); // 파일명 반환\n        } catch (IOException e) {\n            return ResponseEntity.status(500).body(\"Could not upload file: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * 파일 다운로드 예시 메서드\n     */\n    @GetMapping(\"/download\")\n    public ResponseEntity<Resource> downloadFile(@RequestParam(\"id\") Long id,\n                                                 @RequestParam(\"filename\") String filename) {\n        try {\n            Path filePath = Paths.get(uploadDir).resolve(filename).normalize();\n            Resource resource = new org.springframework.core.io.UrlResource(filePath.toUri());\n            if (!resource.exists()) {\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n            }\n\n            String contentType = Files.probeContentType(filePath);\n            if (contentType == null) {\n                // 확장자별 MIME 타입 지정\n                String extension = com.google.common.io.Files.getFileExtension(filePath.toString());\n                switch (extension.toLowerCase()) {\n                    case \"pdf\":\n                        contentType = \"application/pdf\";\n                        break;\n                    case \"jpg\":\n                    case \"jpeg\":\n                        contentType = \"image/jpeg\";\n                        break;\n                    case \"png\":\n                        contentType = \"image/png\";\n                        break;\n                    default:\n                        contentType = \"application/octet-stream\";\n                }\n            }\n\n            String encodedFileName = UriUtils.encode(resource.getFilename(), StandardCharsets.UTF_8);\n            return ResponseEntity.ok()\n                    .contentType(MediaType.parseMediaType(contentType))\n                    .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFileName)\n                    .body(resource);\n\n        } catch (MalformedURLException e) {\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n    }\n\n    /**\n     * 파일 삭제 예시 메서드\n     */\n    @DeleteMapping(\"/delete\")\n    public ResponseEntity<?> deleteFile(@RequestParam(\"filename\") String filename) {\n        try {\n            Path filePath = Paths.get(uploadDir).resolve(filename).normalize();\n            if (Files.exists(filePath)) {\n                Files.delete(filePath);\n                return ResponseEntity.ok(\"파일이 성공적으로 삭제되었습니다.\");\n            } else {\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"파일을 찾을 수 없습니다.\");\n            }\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"파일 삭제 중 오류가 발생했습니다: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * [신규] /format1/{id} 로 GET 요청이 들어올 때,\n     * - format1.xlsx 복사(TempFile)\n     * - {id}로 고객 정보 조회 & 엑셀 특정 셀들에 채워넣기 (ExcelService로 위임)\n     * - 완성본을 다운로드 응답 후, 복사본 파일은 삭제\n     * ------------------------------------------------------------------------\n     */\n    @GetMapping(\"/format1/{id}\")\n    public ResponseEntity<Resource> generateFormat1AndDownload(@PathVariable(\"id\") Integer id) {\n        // 1) 고객 조회\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        }\n\n        // 2) 템플릿 파일을 ClassPathResource로 불러오기\n        ClassPathResource templateResource = new ClassPathResource(\"excel_templates/format1.xlsx\");\n        if (!templateResource.exists()) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 3) 임시 파일 복사\n        File tempFile;\n        try {\n            tempFile = Files.createTempFile(\"format1-\", \".xlsx\").toFile();\n            try (InputStream is = templateResource.getInputStream()) {\n                Files.copy(is, tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n            }\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 4) ExcelService로 위임하여 엑셀에 데이터 기입\n        try {\n            excelService.fillFormat1(tempFile, customer);\n        } catch (IOException e) {\n            // 작업 실패 시 tempFile 삭제 후 에러 반환\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 5) tempFile -> 메모리에 올려 Resource로 변환, tempFile 삭제 후 반환\n        ByteArrayResource resource;\n        try {\n            byte[] fileBytes = Files.readAllBytes(tempFile.toPath());\n            resource = new ByteArrayResource(fileBytes);\n        } catch (IOException e) {\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        tempFile.delete();\n\n        String downloadFilename = \"일반 신청서.xlsx\";\n        String encodedFilename = UriUtils.encode(downloadFilename, StandardCharsets.UTF_8);\n\n        MediaType mediaType = MediaType.parseMediaType(\n                \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        );\n\n        return ResponseEntity.ok()\n                .contentType(mediaType)\n                .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFilename)\n                .body(resource);\n    }\n\n    @GetMapping(\"/format2/{id}\")\n    public ResponseEntity<Resource> generateFormat2AndDownload(@PathVariable(\"id\") Integer id) {\n        // 1) 고객 조회\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        }\n\n        // 2) 템플릿 파일을 ClassPathResource로 불러오기\n        ClassPathResource templateResource = new ClassPathResource(\"excel_templates/format2.xlsx\");\n        if (!templateResource.exists()) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 3) 임시 파일 복사\n        File tempFile;\n        try {\n            tempFile = Files.createTempFile(\"format2-\", \".xlsx\").toFile();\n            try (InputStream is = templateResource.getInputStream()) {\n                Files.copy(is, tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n            }\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 4) ExcelService로 위임하여 엑셀에 데이터 기입\n        try {\n            excelService.fillFormat2(tempFile, customer);\n        } catch (IOException e) {\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 5) 메모리에 올려서 다운로드 응답\n        ByteArrayResource resource;\n        try {\n            byte[] fileBytes = Files.readAllBytes(tempFile.toPath());\n            resource = new ByteArrayResource(fileBytes);\n        } catch (IOException e) {\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 임시 파일 삭제\n        tempFile.delete();\n\n        String downloadFilename = \"일반 부속 서류.xlsx\";\n        String encodedFilename = UriUtils.encode(downloadFilename, StandardCharsets.UTF_8);\n\n        MediaType mediaType = MediaType.parseMediaType(\n                \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        );\n\n        return ResponseEntity.ok()\n                .contentType(mediaType)\n                .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFilename)\n                .body(resource);\n    }\n}\n",
            "LateFeesController.java": "// src/main/java/com/audora/lotting_be/controller/LateFeesController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.payload.response.LateFeeInfo;\nimport com.audora.lotting_be.service.CustomerService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/latefees\")\npublic class LateFeesController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * GET /latefees\n     * 회원의 연체료 정보를 조회합니다.\n     *\n     * @param name   (선택 사항) 회원 이름\n     * @param number (선택 사항) 회원 번호\n     * @return LateFeeInfo 리스트\n     */\n    @GetMapping\n    public List<LateFeeInfo> getLateFees(\n            @RequestParam(required = false) String name,\n            @RequestParam(required = false) String number) {\n        return customerService.getLateFeeInfos(name, number);\n    }\n}\n",
            "PhaseController.java": "// PhaseController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.PhaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/phases\")\npublic class PhaseController {\n\n    @Autowired\n    private PhaseService phaseService;\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * Phase 업데이트 엔드포인트\n     * PUT /phases/{id}\n     */\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Phase> updatePhase(@PathVariable Long id, @RequestBody Phase phaseDetails) {\n        Optional<Phase> optionalPhase = phaseService.getPhaseById(id);\n        if (!optionalPhase.isPresent()) {\n            return ResponseEntity.notFound().build();\n        }\n\n        Phase phase = optionalPhase.get();\n        phase.setPlanneddate(phaseDetails.getPlanneddate());\n        phase.setFullpaiddate(phaseDetails.getFullpaiddate());\n        phase.setCharge(phaseDetails.getCharge());\n        phase.setDiscount(phaseDetails.getDiscount());\n        phase.setExemption(phaseDetails.getExemption());\n        phase.setService(phaseDetails.getService());\n        phase.setMove(phaseDetails.getMove());\n        phase.setFeesum(phaseDetails.getFeesum());\n        phase.setCharged(phaseDetails.getCharged());\n        phase.setSum(phaseDetails.getSum());\n\n        Phase updatedPhase = phaseService.savePhase(phase);\n\n        // 변경된 Phase를 바탕으로 Status 재계산\n        Customer customer = updatedPhase.getCustomer();\n        // Status 필드를 업데이트하는 메서드 (CustomerService에 존재한다고 가정)\n        customerService.updateStatusFields(customer);\n        // 업데이트된 상태를 DB에 반영\n        customerService.saveCustomer(customer);\n\n        return ResponseEntity.ok(updatedPhase);\n    }\n\n    /**\n     * Phase 조회 엔드포인트\n     * GET /phases/{id}\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Phase> getPhaseById(@PathVariable Long id) {\n        Optional<Phase> optionalPhase = phaseService.getPhaseById(id);\n        return optionalPhase.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n}\n"
        }
    },
    "model": {
        "customer": {
            "__files__": {
                "Attachments.java": "// Attachments.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Attachments {\n    private Boolean isuploaded; // 파일 제출했는지 여부\n    private String fileinfo; // 파일 주소, 이름, 확장자\n\n    private Boolean exemption7; // 7차 면제\n    private Boolean investmentfile; //출자금\n    private Boolean contract; //지산 A동 계약서\n    private Boolean agreement; //총회동의서\n\n    private Boolean sealcertificateprovided; // 인감증명서 제출 여부\n    private Boolean selfsignatureconfirmationprovided; // 본인서명확인서 제출 여부\n    private Boolean idcopyprovided; // 신분증 사본 제출 여부\n    private Boolean commitmentletterprovided; // 확약서 제출 여부\n    private Boolean forfounding; //창준위용 제출여부\n    private Boolean freeoption; //무상옵션 제출여부\n    private Boolean preferenceattachment; //선호도조사 제출여부\n    private Boolean generalmeetingconsentformprovided; // 총회 동의서 제출 여부\n    private Boolean prizeattachment; // 사은품 제출 여부\n\n    private String prizename; //사은품명 *새로 추가한 항목\n    private LocalDate prizedate; //사은품지급일자 *새로 추가한 항목\n\n}\n",
                "Customer.java": "// src/main/java/com/audora/lotting_be/model/customer/Customer.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.audora.lotting_be.model.customer.minor.*;\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Data\n@EqualsAndHashCode(exclude = \"status\")\npublic class Customer {\n    @Id\n    private Integer id; // 관리번호\n\n    private String customertype; // 분류(회원)\n    private String type;         // 타입\n    private String groupname;    // 군\n    private String turn;         // 순번\n    private String batch;        // 가입차순\n    private LocalDate registerdate; // 가입일자\n    private Long registerprice;     // 가입가\n    private String additional;      // 비고\n    private String registerpath;    // 가입경로\n    private String specialnote;     // 특이사항\n    private String prizewinning;    // 경품당첨\n\n    @Embedded\n    private CustomerData customerData = new CustomerData(); // 가입자\n\n    @Embedded\n    private LegalAddress legalAddress = new LegalAddress();   // 법정주소\n\n    @Embedded\n    private Postreceive postreceive = new Postreceive();      // 우편물 수령주소\n\n    @Embedded\n    private Financial financial = new Financial();            // 금융기관\n\n    @Embedded\n    private Deposit deposits = new Deposit();                 // 예약금\n\n    @Embedded\n    private Attachments attachments = new Attachments();        // 부속서류\n\n    // 기존 대출/자납 기록용 loan 필드\n    @Embedded\n    private Loan loan = new Loan();                           // 대출, 자납\n\n    @Embedded\n    private Responsible responsible = new Responsible();      // 담당\n\n    @Embedded\n    private Dahim dahim = new Dahim();                        // 다힘\n\n    @Embedded\n    private MGM mgm = new MGM();                              // MGM\n\n    @Embedded\n    private Firstemp firstemp = new Firstemp();               // 1차(직원)\n\n    @Embedded\n    private Secondemp secondemp = new Secondemp();            // 2차\n\n    @Embedded\n    private Meetingattend meetingattend = new Meetingattend();  // 총회참석여부\n\n    @Embedded\n    private Votemachine votemachine = new Votemachine();        // 투표기기\n\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<Phase> phases; // n차\n\n    @OneToOne(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private Status status; // 현 상태\n\n    // 여러 입금내역\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference(value = \"customer-depositHistories\")\n    private List<DepositHistory> depositHistories;\n}\n",
                "DepositHistory.java": "package com.audora.lotting_be.model.customer;\n\nimport com.audora.lotting_be.model.customer.minor.Loan;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Entity\n@Data\npublic class DepositHistory {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    // 거래일시\n    private LocalDateTime transactionDateTime;\n\n    // 적요\n    private String description;\n\n    // 기재내용 (예: 고객명 + 상태)\n    private String details;\n\n    // 계약자 (고객명 등)\n    private String contractor;\n\n    // 찾으신금액 (예: 다시 뽑은 금액)\n    private Long withdrawnAmount;\n\n    // 맡기신금액 (입금액)\n    private Long depositAmount;\n\n    // 거래후 잔액 (계산된 잔액 등, 우선 단순 기재)\n    private Long balanceAfter;\n\n    // 취급점 (은행/지점)\n    private String branch;\n\n    // 계좌 (알파벳 단축어 등)\n    private String account;\n\n    // 1~10차 입금여부 (기존 depositPhaseN 필드들)\n    // \"1\": 이번 입금에서 해당 차수에 '처음' 돈이 들어감\n    // \"0\": 이번 입금에서 해당 차수에 '추가' 돈이 들어감\n    // null 또는 \"\" : 이번 입금에서 해당 차수에 분배되지 않음\n    private String depositPhase1;\n    private String depositPhase2;\n    private String depositPhase3;\n    private String depositPhase4;\n    private String depositPhase5;\n    private String depositPhase6;\n    private String depositPhase7;\n    private String depositPhase8;\n    private String depositPhase9;\n    private String depositPhase10;\n\n    // 대출/자납 여부: \"o\" = 대출/자납 입금, 아니면 일반 입금\n    private String loanStatus;\n\n    // 대출 일자\n    private LocalDate loanDate;\n\n    // 비고 (메모)\n    private String remarks;\n\n    // ★ [임베디드] 대출/자납 상세 정보\n    @Embedded\n    @AttributeOverrides({\n            @AttributeOverride(name = \"loandate\", column = @Column(name = \"loan_details_loandate\")),\n            @AttributeOverride(name = \"loanbank\", column = @Column(name = \"loan_details_loanbank\")),\n            @AttributeOverride(name = \"loanammount\", column = @Column(name = \"loan_details_loanammount\")),\n            @AttributeOverride(name = \"selfdate\", column = @Column(name = \"loan_details_selfdate\")),\n            @AttributeOverride(name = \"selfammount\", column = @Column(name = \"loan_details_selfammount\")),\n            @AttributeOverride(name = \"loanselfsum\", column = @Column(name = \"loan_details_loanselfsum\")),\n            @AttributeOverride(name = \"loanselfcurrent\", column = @Column(name = \"loan_details_loanselfcurrent\"))\n    })\n    private Loan loanDetails;\n\n    // ★ [신규] 어느 phase에 얼마를 분배할지 지정 (대출/자납용)\n    @ElementCollection\n    @CollectionTable(name = \"deposit_history_target_phases\",\n            joinColumns = @JoinColumn(name = \"deposit_history_id\"))\n    @Column(name = \"target_phase\")\n    private List<Integer> targetPhases;\n\n    // ★ [신규] 첫 번째 대출이면 \"1\", 두 번째 이상이면 \"0\"\n    private String loanRecord;\n\n    // ★ [신규] 첫 번째 자납이면 \"1\", 두 번째 이상이면 \"0\"\n    private String selfRecord;\n\n    // DepositHistory는 하나의 고객에 종속됨\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference(value = \"customer-depositHistories\")\n    private Customer customer;\n}\n",
                "Phase.java": "package com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Entity\n@Data\npublic class Phase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber;      // 차수\n    private LocalDate planneddate;      // 예정일자\n    private String planneddateString;   // 원래 예정일자 (문자열)\n    private LocalDate fullpaiddate;     // 완납일자\n    private Long charge;              // 부담금 (원금)\n    private Long discount;            // 할인액 (실제 납부액에서는 차감)\n    private Long exemption;           // 면제금액\n    private Long service;             // 업무대행비\n    private Long feesum;              // 총 부담금 = charge + service - exemption\n    private String move;//이동\n    private Long charged;           // 입금(Deposit)으로 지급된 금액 (할인액 반영)\n    private Long loanCharged;       // 대출/자납으로 지급된 금액 (할인액 무시; 인정금액)\n    private Long sum;               // 미납금 = (feesum - discount) - charged\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n",
                "Status.java": "// Status.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n@Entity\n@Data\n@EqualsAndHashCode(exclude = \"customer\") // customer 필드 제외\npublic class Status {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Long exemptionsum; // 총면제금액\n    private Long unpaidammout; // 미납금액\n    private String unpaidphase; // 미납차순 (1,2,3,...)\n    private Long prepaidammount; // 기납부금액\n    private Long ammountsum; // 1~n차 납입총액\n    private Long percent40; // 40%\n\n    // 새로 추가된 필드들\n    private Long exceedamount;      // 초과된 예약금(입금) 금액\n    private Long loanExceedAmount;  // 초과된 대출/자납 금액\n\n    @OneToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n"
            },
            "minor": {
                "__files__": {
                    "CustomerData.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class CustomerData {\n    private String name; //성명\n    private Integer resnumfront; //주민번호 앞자리\n    private Integer resnumback; //주민번호 뒷자리\n    private String phone; //휴대전화\n    private String email; // E-mail\n}",
                    "Dahim.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Dahim {\n    private String dahimsisang; //시상\n    private LocalDate dahimdate; //일자\n    private String dahimprepaid; //6/30선지금\n    private String dahimfirst; //1회차청구\n    private String dahimfirstpay; //(1회차?)금액\n    private LocalDate dahimdate2; //일자2\n    private String dahimsource; //출처\n    private String dahimsecond; //2회차청구\n    private String dahimsecondpay; //(2회차?)금액\n    private LocalDate dahimdate3; //일자3\n    private String dahimsum; //합계\n}",
                    "Deposit.java": "// src/main/java/com/audora/lotting_be/model/customer/Deposit.java\n\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Deposit {\n    private LocalDate depositdate; //납입일자\n    private Long depositammount; //금액\n\n}\n",
                    "Financial.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Financial {\n    private String bankname; //은행명\n    private String accountnum; //계좌번호\n    private String accountholder; //예금주\n    private String trustcompany; //신탁사\n}",
                    "Firstemp.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Firstemp {\n    private String firstemptimes; //차순\n    private LocalDate firstempdate; //지급일자\n}\n",
                    "LegalAddress.java": "// src/main/java/com/audora/lotting_be/model/customer/LegalAddress.java\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class LegalAddress {\n    private Integer postnumber; //우편번호\n    private String post; //주소\n    private String detailaddress; //상세주소\n}\n\n",
                    "Loan.java": "// Loan.java\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Loan {\n    private LocalDate loandate; //대출일자\n    private String loanbank; //은행\n    private Long loanammount; //대출액\n    private LocalDate selfdate; //자납일\n    private Long selfammount; //자납액\n    private Long loanselfsum; //합계\n    private Long loanselfcurrent; //잔액\n}\n",
                    "Meetingattend.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Meetingattend {\n    private String howtoattend; //참석방법 ( 나중에 셀 합칠 때 대비 )\n    private Boolean ftofattend; //서면\n    private Boolean selfattend; //직접\n    private Boolean behalfattend; //대리\n}\n",
                    "MGM.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class MGM {\n    private Long mgmfee; //수수료\n    private String mgmcompanyname; //업체명\n    private String mgmname; //이름\n    private String mgminstitution; //기관\n    private String mgmaccount; //계좌\n}",
                    "Postreceive.java": "// src/main/java/com/audora/lotting_be/model/customer/Postreceive.java\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Postreceive {\n    private Integer postnumberreceive; //우편번호\n    private String postreceive; //주소\n    private String detailaddressreceive; //상세주소\n}\n",
                    "Responsible.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Responsible {\n    private String generalmanagement; //총괄\n    private String division; //본부\n    private String team; //팀\n    private String managername; //담당자 성명\n}",
                    "Secondemp.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Secondemp {\n    private String secondemptimes; //차순\n    private LocalDate secondempdate; //지급일자\n}\n",
                    "Votemachine.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Votemachine {\n    private Boolean machine1; //제1호\n    private Boolean machine2_1; //제2-1호\n    private Boolean machine2_2; //제2-2호\n    private Boolean machine2_3; //제2-3호\n    private Boolean machine2_4; //제2-4호\n    private Boolean machine3; //제3호\n    private Boolean machine4; //제4호\n    private Boolean machine5; //제5호\n    private Boolean machine6; //제6호\n    private Boolean machine7; //제7호\n    private Boolean machine8; //제8호\n    private Boolean machine9; //제9호\n    private Boolean machine10; //제10호\n}"
                }
            }
        },
        "Fee": {
            "__files__": {
                "Fee.java": "// Fee.java\npackage com.audora.lotting_be.model.Fee;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Fee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String groupname; //군\n    private String floor; //층\n    private String batch; //가입차순 (1차, 2차 등등)\n    private String type; //타입\n    private Double supplyarea; //공급면적\n    private Double priceperp; //평당가\n    private Long price; //금액\n    private Double paymentratio; //납입비율\n    private Long paysum; //합계\n\n    @OneToMany(mappedBy = \"fee\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<FeePerPhase> feePerPhases;\n}\n",
                "FeePerPhase.java": "// FeePerPhase.java\npackage com.audora.lotting_be.model.Fee;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class FeePerPhase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber; //n차\n    private Long phasefee; //금액\n    private String phasedate; //제출일\n\n    @ManyToOne\n    @JsonBackReference\n    @JoinColumn(name = \"fee_id\")\n    private Fee fee;\n}\n"
            }
        },
        "manager": {
            "__files__": {
                "Manager.java": "// src/main/java/com/audora/lotting_be/model/manager/Manager.java\npackage com.audora.lotting_be.model.manager;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.Set;\n\n@Entity\n@Data\n@Table(name = \"managers\")\npublic class Manager {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, unique = true)\n    private String username;\n\n    @Column(nullable = false)\n    private String password;\n\n    // 역할을 확장할 수 있도록 Set으로 정의\n    @ElementCollection(fetch = FetchType.EAGER)\n    @CollectionTable(name = \"manager_roles\", joinColumns = @JoinColumn(name = \"manager_id\"))\n    @Column(name = \"role\")\n    private Set<String> roles;\n}\n"
            }
        }
    },
    "payload": {
        "request": {
            "__files__": {
                "LoginRequest.java": "// src/main/java/com/audora/lotting_be/payload/request/LoginRequest.java\npackage com.audora.lotting_be.payload.request;\n\nimport lombok.Data;\n\n@Data\npublic class LoginRequest {\n    private String username;\n    private String password;\n}\n",
                "SignupRequest.java": "// src/main/java/com/audora/lotting_be/payload/request/SignupRequest.java\npackage com.audora.lotting_be.payload.request;\n\nimport lombok.Data;\nimport java.util.Set;\n\n@Data\npublic class SignupRequest {\n    private String username;\n    private String email; // 필요시 추가\n    private String password;\n    private Set<String> roles;\n}\n"
            }
        },
        "response": {
            "__files__": {
                "CustomerDepositDTO.java": "package com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\n\n@Data\npublic class CustomerDepositDTO {\n\n    // 회원번호\n    private Integer memberNumber;\n\n    // 마지막 거래 일시\n    private LocalDateTime lastTransactionDateTime;\n\n    // 적요 (임시)\n    private String remarks;\n\n    // 기재내용 (메모 역할)\n    private String memo;\n\n    // 계약자\n    private String contractor;\n\n    // 찾으신 금액 (환불받은 금액)\n    private Long withdrawnAmount;\n\n    // 맡기신 금액 (지금까지 입금한 금액)\n    private Long depositAmount;\n\n    // 취급점(은행/지점)\n    private String bankBranch;\n\n    // 계좌 (h, g, f, e 중 하나)\n    private String account;\n\n    // 예약 (의미 불명확, 임시)\n    private String reservation;\n\n    // 1차~10차 입금 상태\n    private String depositPhase1;\n    private String depositPhase2;\n    private String depositPhase3;\n    private String depositPhase4;\n    private String depositPhase5;\n    private String depositPhase6;\n    private String depositPhase7;\n    private String depositPhase8;\n    private String depositPhase9;\n    private String depositPhase10;\n\n    // 대출금액\n    private Long loanAmount;\n\n    // 대출일자\n    private LocalDate loanDate;\n\n    // 임시\n    private String temporary;\n\n    // 비고\n    private String note;\n}\n",
                "JwtResponse.java": "// src/main/java/com/audora/lotting_be/payload/response/JwtResponse.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\nimport java.util.List;\n\n@Data\npublic class JwtResponse {\n    private String token;\n    private String type = \"Bearer\";\n    private Long id;\n    private String username;\n    private List<String> roles;\n\n    public JwtResponse(String accessToken, Long id, String username, List<String> roles) {\n        this.token = accessToken;\n        this.id = id;\n        this.username = username;\n        this.roles = roles;\n    }\n}\n",
                "LateFeeInfo.java": "// src/main/java/com/audora/lotting_be/payload/response/LateFeeInfo.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Data\npublic class LateFeeInfo {\n    private Integer id; // 관리번호\n    private Integer lastUnpaidPhaseNumber; // 마지막 미납 차수\n    private String customertype; // 고객 유형\n    private String name; // 성명\n    private LocalDate registerdate; // 가입일자\n    private LocalDate lateBaseDate; // 연체기준일\n    private LocalDate recentPaymentDate; // 최근납부일자\n    private Long daysOverdue; // 일수\n    private Double lateRate; // 연체율 (%)\n    private Long overdueAmount; // 연체금액\n    private Long paidAmount; // 납입금액\n    private Double lateFee; // 연체료\n    private Long totalOwed; // 내야할 돈 합계\n}\n",
                "MessageResponse.java": "// src/main/java/com/audora/lotting_be/payload/response/MessageResponse.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\n\n@Data\npublic class MessageResponse {\n    private String message;\n\n    public MessageResponse(String message) {\n        this.message = message;\n    }\n}\n"
            }
        }
    },
    "repository": {
        "__files__": {
            "CustomerRepository.java": "// src/main/java/com/audora/lotting_be/repository/CustomerRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\n\npublic interface CustomerRepository extends JpaRepository<Customer, Integer> {\n    @Query(value = \"SELECT COALESCE(MAX(id), 0) + 1 FROM customer\", nativeQuery = true)\n    Integer getNextId();\n\n    List<Customer> findByCustomerDataNameContaining(String name);\n\n    List<Customer> findByCustomerDataNameAndId(String name, Integer id);\n\n    // 정계약한(customertype = 'c') 고객의 수를 세는 쿼리\n    long countByCustomertype(String customertype);\n\n    /**\n     * ID가 특정 부분 문자열을 포함하는 고객을 찾습니다.\n     *\n     * 주의: 사용하는 데이터베이스에 따라 CAST 함수의 문법을 조정해야 합니다.\n     * 예를 들어, PostgreSQL에서는 CAST(id AS TEXT)를 사용합니다.\n     */\n    @Query(value = \"SELECT * FROM customer WHERE CAST(id AS CHAR) LIKE %:idPart%\", nativeQuery = true)\n    List<Customer> findByIdContaining(@Param(\"idPart\") String idPart);\n\n    @Query(value = \"SELECT * FROM customer WHERE name LIKE CONCAT('%', :name, '%') AND CAST(id AS CHAR) LIKE CONCAT('%', :idPart, '%')\", nativeQuery = true)\n    List<Customer> findByNameContainingAndIdContaining(@Param(\"name\") String name, @Param(\"idPart\") String idPart);\n\n}\n",
            "DepositHistoryRepository.java": "// src/main/java/com/audora/lotting_be/repository/DepositHistoryRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface DepositHistoryRepository extends JpaRepository<DepositHistory, Long> {\n}\n",
            "FeeRepository.java": "// FeeRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface FeeRepository extends JpaRepository<Fee, Long> {\n    Fee findByGroupnameAndBatch(String groupname, String batch);\n}\n",
            "ManagerRepository.java": "// src/main/java/com/audora/lotting_be/repository/ManagerRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.Optional;\n\npublic interface ManagerRepository extends JpaRepository<Manager, Long> {\n    Optional<Manager> findByUsername(String username);\n    Boolean existsByUsername(String username);\n}\n",
            "PhaseRepository.java": "package com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.List;\n\npublic interface PhaseRepository extends JpaRepository<Phase, Long> {\n    List<Phase> findByCustomerId(Integer customerId);\n}\n"
        }
    },
    "security": {
        "__files__": {
            "AuthTokenFilter.java": "// src/main/java/com/audora/lotting_be/security/AuthTokenFilter.java\npackage com.audora.lotting_be.security;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.security.authentication.*;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\n@Component\npublic class AuthTokenFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private JwtUtils jwtUtils;\n\n    @Autowired\n    private UserDetailsServiceImpl userDetailsService;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                    HttpServletResponse response,\n                                    FilterChain filterChain)\n            throws ServletException, IOException {\n        try {\n            String jwt = parseJwt(request);\n            if (jwt != null && jwtUtils.validateJwtToken(jwt)) {\n                String username = jwtUtils.getUserNameFromJwtToken(jwt);\n\n                UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n                UsernamePasswordAuthenticationToken authentication =\n                        new UsernamePasswordAuthenticationToken(\n                                userDetails, null, userDetails.getAuthorities());\n\n                authentication.setDetails(\n                        new WebAuthenticationDetailsSource().buildDetails(request));\n\n                SecurityContextHolder.getContext().setAuthentication(authentication);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Cannot set user authentication: \" + e);\n        }\n\n        filterChain.doFilter(request, response);\n    }\n\n    private String parseJwt(HttpServletRequest request) {\n        String headerAuth = request.getHeader(\"Authorization\");\n\n        if (StringUtils.hasText(headerAuth) &&\n                headerAuth.startsWith(\"Bearer \")) {\n            return headerAuth.substring(7);\n        }\n\n        return null;\n    }\n}\n",
            "JwtUtils.java": "// src/main/java/com/audora/lotting_be/security/JwtUtils.java\npackage com.audora.lotting_be.security;\n\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.security.Keys;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport java.nio.charset.StandardCharsets;\nimport java.security.Key;\nimport java.util.Date;\nimport jakarta.annotation.PostConstruct;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Component\npublic class JwtUtils {\n\n    private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);\n\n    @Value(\"${jwt.secret}\")\n    private String jwtSecret;\n\n    @Value(\"${jwt.expirationMs}\")\n    private int jwtExpirationMs;\n\n    private Key key;\n\n    @PostConstruct\n    public void init() {\n        if (jwtSecret == null || jwtSecret.length() < 32) {\n            throw new IllegalArgumentException(\"JWT Secret must be at least 32 characters long.\");\n        }\n        this.key = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));\n        logger.info(\"JWT Key initialized successfully.\");\n    }\n\n    public String generateJwtToken(UserDetailsImpl userDetails) {\n        return Jwts.builder()\n                .setSubject(userDetails.getUsername())\n                .setIssuedAt(new Date())\n                .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))\n                .signWith(key, SignatureAlgorithm.HS512)\n                .compact();\n    }\n\n    public String getUserNameFromJwtToken(String token) {\n        return Jwts.parserBuilder()\n                .setSigningKey(key)\n                .build()\n                .parseClaimsJws(token)\n                .getBody()\n                .getSubject();\n    }\n\n    public boolean validateJwtToken(String authToken) {\n        try {\n            Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(authToken);\n            return true;\n        } catch (JwtException e) {\n            logger.error(\"JWT validation error: {}\", e.getMessage());\n        }\n        return false;\n    }\n}\n",
            "UserDetailsImpl.java": "// src/main/java/com/audora/lotting_be/security/UserDetailsImpl.java\npackage com.audora.lotting_be.security;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport lombok.Data;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport java.util.Collection;\nimport java.util.stream.Collectors;\n\n@Data\npublic class UserDetailsImpl implements UserDetails {\n\n    private Long id;\n    private String username;\n\n    @JsonIgnore\n    private String password;\n\n    private Collection<? extends GrantedAuthority> authorities;\n\n    public UserDetailsImpl(Long id, String username, String password,\n                           Collection<? extends GrantedAuthority> authorities) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.authorities = authorities;\n    }\n\n    public static UserDetailsImpl build(Manager manager) {\n        Collection<GrantedAuthority> authorities = manager.getRoles().stream()\n                .map(role -> (GrantedAuthority) () -> \"ROLE_\" + role.toUpperCase())\n                .collect(Collectors.toList());\n\n        return new UserDetailsImpl(\n                manager.getId(),\n                manager.getUsername(),\n                manager.getPassword(),\n                authorities);\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return authorities;\n    }\n\n    // 기타 메서드는 기본 구현을 따릅니다\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n",
            "UserDetailsServiceImpl.java": "// src/main/java/com/audora/lotting_be/security/UserDetailsServiceImpl.java\npackage com.audora.lotting_be.security;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.audora.lotting_be.repository.ManagerRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.*;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Autowired\n    ManagerRepository managerRepository;\n\n    @Override\n    @Transactional\n    public UserDetails loadUserByUsername(String username)\n            throws UsernameNotFoundException {\n        Manager manager = managerRepository.findByUsername(username)\n                .orElseThrow(() ->\n                        new UsernameNotFoundException(\"Manager Not Found with username: \" + username));\n\n        return UserDetailsImpl.build(manager);\n    }\n}\n"
        }
    },
    "service": {
        "__files__": {
            "CustomerService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.model.customer.Status;\nimport com.audora.lotting_be.model.customer.minor.Loan;\nimport com.audora.lotting_be.payload.response.CustomerDepositDTO;\nimport com.audora.lotting_be.payload.response.LateFeeInfo;\nimport com.audora.lotting_be.repository.CustomerRepository;\nimport com.audora.lotting_be.repository.DepositHistoryRepository;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.Comparator;\n\n@Service\npublic class CustomerService {\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private FeeRepository feeRepository;\n\n    @Autowired\n    private DepositHistoryRepository depositHistoryRepository;\n\n    // ================================================\n    // 1) 고객 생성 및 초기 Phase 설정\n    // ================================================\n    public Customer createCustomer(Customer customer) {\n        if (customerRepository.existsById(customer.getId())) {\n            throw new IllegalArgumentException(\"이미 존재하는 관리번호입니다.\");\n        }\n        // 1) Fee 조회 (groupname= type+groupname, batch= 가입차순)\n        Fee fee = feeRepository.findByGroupnameAndBatch(\n                customer.getType() + customer.getGroupname(),\n                customer.getBatch()\n        );\n        // 2) FeePerPhase -> Phase 초기화\n        if (fee != null) {\n            List<FeePerPhase> feePerPhases = fee.getFeePerPhases();\n            List<Phase> phases = new ArrayList<>();\n            for (FeePerPhase fpp : feePerPhases) {\n                Phase phase = new Phase();\n                phase.setPhaseNumber(fpp.getPhaseNumber());\n                long charge = (fpp.getPhasefee() != null) ? fpp.getPhasefee() : 0L;\n                phase.setCharge(charge);\n                phase.setService(0L);\n                phase.setExemption(0L);\n\n                long feesum = charge; // (service=0, exemption=0이므로)\n                phase.setFeesum(feesum);\n\n                phase.setCharged(0L);\n                long discountVal = (phase.getDiscount() != null) ? phase.getDiscount() : 0L;\n                phase.setSum(feesum - discountVal);\n\n                // FeePerPhase에 기재된 예정일자 문자열 → 실제 LocalDate 변환\n                phase.setPlanneddateString(fpp.getPhasedate());\n                LocalDate plannedDate = calculatePlannedDate(customer.getRegisterdate(), fpp.getPhasedate());\n                phase.setPlanneddate(plannedDate);\n                phase.setFullpaiddate(null);\n\n                // 양방향 관계\n                phase.setCustomer(customer);\n                phases.add(phase);\n            }\n            customer.setPhases(phases);\n        }\n\n        // Status가 없으면 새로 만들기\n        if (customer.getStatus() == null) {\n            Status status = new Status();\n            status.setCustomer(customer);\n            customer.setStatus(status);\n        }\n\n        // 고객 DB 저장 & 전체 재계산\n        customer = customerRepository.save(customer);\n        recalculateEverything(customer);\n\n        return customer;\n    }\n\n    // ================================================\n    // 2) 전체 재계산 (핵심 로직)\n    // ================================================\n    /**\n     *  전체 재계산:\n     *  (1) 각 phase의 charged/feesum/fullpaiddate 초기화\n     *  (2) 모든 depositHistory 시간순 정렬 → 하나씩 분배 (distribute)\n     *  (3) leftover(loanExceedAmount 등) 갱신\n     *  (4) Status(미납금 등) 업데이트\n     *  (5) Loan 필드 업데이트 (합산)\n     *  (6) 최종 저장\n     */\n    public void recalculateEverything(Customer customer) {\n        // 1) 각 Phase 초기화\n        if (customer.getPhases() != null) {\n            for (Phase phase : customer.getPhases()) {\n                // 기본값 초기화\n                phase.setCharged(0L);\n                phase.setFullpaiddate(null);\n\n                long charge = (phase.getCharge() != null) ? phase.getCharge() : 0L;\n                long service = (phase.getService() != null) ? phase.getService() : 0L;\n                long exemption = (phase.getExemption() != null) ? phase.getExemption() : 0L;\n                long feesum = charge + service - exemption;\n                phase.setFeesum(feesum);\n\n                long discountVal = (phase.getDiscount() != null) ? phase.getDiscount() : 0L;\n                phase.setSum(feesum - discountVal);\n            }\n        }\n\n        // 2) phase별 누적 입금액 기록용 맵 초기화\n        Map<Integer, Long> cumulativeDeposits = new HashMap<>();\n        if (customer.getPhases() != null) {\n            for (Phase p : customer.getPhases()) {\n                cumulativeDeposits.put(p.getPhaseNumber(), 0L);\n            }\n        }\n\n        // 3) DepositHistory를 시간순으로 처리하여, leftover 계산\n        List<DepositHistory> histories = customer.getDepositHistories();\n        long leftoverGeneral = 0L;\n        long leftoverLoan = 0L;\n\n        // \"첫 대출/자납\" 판단용\n        boolean anyLoanExists = false;  // 과거 대출 납부여부\n        boolean anySelfExists = false;  // 과거 자납 납부여부\n\n        if (histories != null && !histories.isEmpty()) {\n            // 거래일시 오름차순 정렬\n            histories.sort(Comparator.comparing(DepositHistory::getTransactionDateTime));\n\n            for (DepositHistory dh : histories) {\n                // (a) loanRecord, selfRecord 세팅\n                if (\"o\".equalsIgnoreCase(dh.getLoanStatus()) && dh.getLoanDetails() != null) {\n                    // loanammount > 0 -> 첫 대출이면 \"1\", 아니면 \"0\"\n                    Long loanA = dh.getLoanDetails().getLoanammount();\n                    if (loanA != null && loanA > 0) {\n                        if (!anyLoanExists) {\n                            dh.setLoanRecord(\"1\");\n                            anyLoanExists = true;\n                        } else {\n                            dh.setLoanRecord(\"0\");\n                        }\n                    }\n                    // selfammount > 0 -> 첫 자납이면 \"1\", 아니면 \"0\"\n                    Long selfA = dh.getLoanDetails().getSelfammount();\n                    if (selfA != null && selfA > 0) {\n                        if (!anySelfExists) {\n                            dh.setSelfRecord(\"1\");\n                            anySelfExists = true;\n                        } else {\n                            dh.setSelfRecord(\"0\");\n                        }\n                    }\n                }\n\n                // (b) 각 depositHistory별 분배\n                long leftover = distributeDepositPaymentToPhases(customer, dh, cumulativeDeposits);\n\n                // (c) leftover 정리 (대출/자납 leftoverLoan, 일반 leftoverGeneral)\n                if (\"o\".equalsIgnoreCase(dh.getLoanStatus())) {\n                    leftoverLoan += leftover;\n                } else {\n                    leftoverGeneral += leftover;\n                }\n\n                // depositHistory에 변경사항(loanRecord 등) 반영 후 DB 저장\n                depositHistoryRepository.save(dh);\n            }\n        }\n\n        // 4) leftover를 Status에 저장\n        Status st = customer.getStatus();\n        if (st == null) {\n            st = new Status();\n            st.setCustomer(customer);\n            customer.setStatus(st);\n        }\n        st.setExceedamount(leftoverGeneral);\n        st.setLoanExceedAmount(leftoverLoan);\n\n        // 5) Status(미납금, unpaidphase 등) 업데이트\n        updateStatusFields(customer);\n\n        // 6) Loan 필드 업데이트 (히스토리 전체 합산)\n        updateLoanField(customer);\n\n        // 7) 최종 저장\n        customerRepository.save(customer);\n    }\n\n    // ================================================\n    // 3) 분배 로직(distributeDepositPaymentToPhases)\n    // ================================================\n    /**\n     * 하나의 DepositHistory를 처리하여 Phase별로 입금액을 분배,\n     * leftover를 반환.\n     *\n     * - [일반 입금]: (feesum - discount) 기준으로 1차부터 차례대로\n     * - [대출/자납(loanStatus='o')]:\n     *   1) 만약 첫 대출/자납(loanRecord='1')이면 leftover=0\n     *   2) 두 번째 이후(loanRecord='0')이면 leftover=Status.loanExceedAmount를 불러옴\n     *   3) totalDeposit = leftover + depositAmount\n     *   4) targetPhases 순으로(할인 discount 무시)\n     *   5) 남은 leftover 반환\n     */\n    public long distributeDepositPaymentToPhases(Customer customer,\n                                                 DepositHistory dh,\n                                                 Map<Integer, Long> cumulativeDeposits) {\n\n        // (A) 대출/자납 여부\n        boolean isLoanDeposit = \"o\".equalsIgnoreCase(dh.getLoanStatus());\n\n        // (B) leftoverFromStatus\n        long leftoverFromStatus = 0L;\n        if (isLoanDeposit) {\n            // 첫 대출/자납이면 leftover=0, 두 번째 이상이면 leftover=Status.loanExceedAmount\n            if (\"0\".equals(dh.getLoanRecord())) { // 두 번째 이상\n                leftoverFromStatus = (customer.getStatus() != null &&\n                        customer.getStatus().getLoanExceedAmount() != null)\n                        ? customer.getStatus().getLoanExceedAmount()\n                        : 0L;\n            }\n        }\n\n        // (C) 총 입금액\n        long depositAmt = (dh.getDepositAmount() != null ? dh.getDepositAmount() : 0L);\n        long totalDeposit = leftoverFromStatus + depositAmt;\n\n        // (D) Phase 분배\n        long remaining = totalDeposit;\n        List<Phase> phases = customer.getPhases();\n        if (phases != null) {\n            phases.sort(Comparator.comparingInt(Phase::getPhaseNumber));\n        }\n\n        if (isLoanDeposit) {\n            // 대출/자납 → targetPhases 만 (discount 무시)\n            List<Integer> targetList = dh.getTargetPhases();\n            if (targetList != null && !targetList.isEmpty()) {\n                for (Integer phaseNo : targetList) {\n                    Phase phase = findPhaseByNumber(phases, phaseNo);\n                    if (phase == null) continue;\n\n                    long already = cumulativeDeposits.getOrDefault(phaseNo, 0L);\n                    long feesum = (phase.getFeesum() != null) ? phase.getFeesum() : 0L;\n\n                    long required = feesum - already; // discount 무시\n                    if (required <= 0) continue;\n\n                    long allocation = Math.min(remaining, required);\n                    if (allocation > 0) {\n                        boolean wasZero = (already == 0L);\n                        already += allocation;\n                        remaining -= allocation;\n                        phase.setCharged(already);\n\n                        // fullpaiddate\n                        if (already >= feesum) {\n                            phase.setFullpaiddate(\n                                    dh.getTransactionDateTime() != null\n                                            ? dh.getTransactionDateTime().toLocalDate()\n                                            : null\n                            );\n                        }\n                        // sum\n                        phase.setSum(feesum - already);\n\n                        // depositPhaseN → \"1\"(처음) or \"0\"(추가)\n                        setDepositPhaseField(dh, phaseNo, wasZero ? \"1\" : \"0\");\n\n                        cumulativeDeposits.put(phaseNo, already);\n                    }\n                    if (remaining <= 0) break;\n                }\n            }\n        } else {\n            // 일반 입금\n            for (Phase phase : phases) {\n                int phaseNo = phase.getPhaseNumber();\n                long already = cumulativeDeposits.getOrDefault(phaseNo, 0L);\n\n                long feesum = (phase.getFeesum() != null) ? phase.getFeesum() : 0L;\n                long discount = (phase.getDiscount() != null) ? phase.getDiscount() : 0L;\n                long required = (feesum - discount) - already;\n                if (required <= 0) continue;\n\n                long allocation = Math.min(remaining, required);\n                if (allocation > 0) {\n                    boolean wasZero = (already == 0L);\n                    already += allocation;\n                    remaining -= allocation;\n                    phase.setCharged(already);\n\n                    // fullpaiddate\n                    if (already >= (feesum - discount)) {\n                        phase.setFullpaiddate(\n                                dh.getTransactionDateTime() != null\n                                        ? dh.getTransactionDateTime().toLocalDate()\n                                        : null\n                        );\n                    }\n                    phase.setSum((feesum - discount) - already);\n\n                    setDepositPhaseField(dh, phaseNo, wasZero ? \"1\" : \"0\");\n                    cumulativeDeposits.put(phaseNo, already);\n                }\n                if (remaining <= 0) break;\n            }\n        }\n\n        // (E) leftover 반환\n        return remaining;\n    }\n\n    /**\n     * 특정 phaseNumber에 해당하는 Phase 찾기\n     */\n    private Phase findPhaseByNumber(List<Phase> phases, int phaseNo) {\n        if (phases == null) return null;\n        for (Phase p : phases) {\n            if (p.getPhaseNumber() != null && p.getPhaseNumber() == phaseNo) {\n                return p;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * depositPhaseN setter\n     */\n    private void setDepositPhaseField(DepositHistory dh, int phaseNo, String value) {\n        switch (phaseNo) {\n            case 1: dh.setDepositPhase1(value); break;\n            case 2: dh.setDepositPhase2(value); break;\n            case 3: dh.setDepositPhase3(value); break;\n            case 4: dh.setDepositPhase4(value); break;\n            case 5: dh.setDepositPhase5(value); break;\n            case 6: dh.setDepositPhase6(value); break;\n            case 7: dh.setDepositPhase7(value); break;\n            case 8: dh.setDepositPhase8(value); break;\n            case 9: dh.setDepositPhase9(value); break;\n            case 10: dh.setDepositPhase10(value); break;\n            default:\n        }\n    }\n\n    // ================================================\n    // 4) Status(미납금 등) 업데이트\n    // ================================================\n    public void updateStatusFields(Customer customer) {\n        List<Phase> phases = customer.getPhases();\n        Status status = customer.getStatus();\n        if (status == null) {\n            status = new Status();\n            status.setCustomer(customer);\n            customer.setStatus(status);\n        }\n        if (phases != null && !phases.isEmpty()) {\n            // 총 면제금액\n            long exemptionsum = phases.stream()\n                    .mapToLong(p -> (p.getExemption() != null) ? p.getExemption() : 0L)\n                    .sum();\n            status.setExemptionsum(exemptionsum);\n\n            // 일반 입금 기준 미납액 = Σ((feesum - discount) - charged)\n            long unpaidAmmout = phases.stream().mapToLong(p -> {\n                long feesum = (p.getFeesum() != null) ? p.getFeesum() : 0L;\n                long discount = (p.getDiscount() != null) ? p.getDiscount() : 0L;\n                long depositPaid = (p.getCharged() != null) ? p.getCharged() : 0L;\n                return ((feesum - discount) - depositPaid);\n            }).sum();\n            status.setUnpaidammout(unpaidAmmout);\n\n            // 미납차수\n            LocalDate today = LocalDate.now();\n            List<Integer> unpaidPhases = phases.stream()\n                    .filter(p -> p.getPlanneddate() != null\n                            && p.getPlanneddate().isBefore(today)\n                            && p.getFullpaiddate() == null)\n                    .map(Phase::getPhaseNumber)\n                    .sorted()\n                    .collect(Collectors.toList());\n            String unpaidPhaseStr = unpaidPhases.stream()\n                    .map(String::valueOf)\n                    .collect(Collectors.joining(\",\"));\n            status.setUnpaidphase(unpaidPhaseStr);\n\n            // 총액, 40% 등\n            long ammountsum = phases.stream()\n                    .mapToLong(p -> (p.getFeesum() != null) ? p.getFeesum() : 0L)\n                    .sum();\n            status.setAmmountsum(ammountsum);\n            status.setPercent40((long) (ammountsum * 0.4));\n        }\n    }\n\n    // ================================================\n    // 5) Loan 필드 업데이트\n    // ================================================\n    /**\n     * depositHistories 중 loanStatus='o'를 전부 합산하여\n     * Customer.loan에 최신값 반영\n     */\n    public void updateLoanField(Customer customer) {\n        if (customer.getDepositHistories() == null) return;\n\n        // Loan 객체가 없으면 새로\n        if (customer.getLoan() == null) {\n            customer.setLoan(new Loan());\n        }\n        Loan customerLoan = customer.getLoan();\n\n        // (1) 대출 총액(단순히 depositAmount 합산)\n        long totalLoan = customer.getDepositHistories().stream()\n                .filter(dh -> \"o\".equalsIgnoreCase(dh.getLoanStatus()))\n                .mapToLong(dh -> (dh.getDepositAmount() != null) ? dh.getDepositAmount() : 0L)\n                .sum();\n        customerLoan.setLoanammount(totalLoan);\n\n        // (2) 가장 최근 대출/자납 레코드\n        DepositHistory mostRecentLoan = customer.getDepositHistories().stream()\n                .filter(dh -> \"o\".equalsIgnoreCase(dh.getLoanStatus()))\n                .max(Comparator.comparing(DepositHistory::getTransactionDateTime))\n                .orElse(null);\n        if (mostRecentLoan != null) {\n            // loanDate, loanbank, selfdate 등 업데이트\n            if (mostRecentLoan.getLoanDate() != null) {\n                customerLoan.setLoandate(mostRecentLoan.getLoanDate());\n            }\n            if (mostRecentLoan.getLoanDetails() != null) {\n                // 은행\n                if (mostRecentLoan.getLoanDetails().getLoanbank() != null) {\n                    customerLoan.setLoanbank(mostRecentLoan.getLoanDetails().getLoanbank());\n                }\n                // 자납일\n                if (mostRecentLoan.getLoanDetails().getSelfdate() != null) {\n                    customerLoan.setSelfdate(mostRecentLoan.getLoanDetails().getSelfdate());\n                }\n                // 필요하다면 selfammount, loanselfsum 등도 합산 처리 가능\n            }\n        }\n\n        // (3) loanselfcurrent = status.loanExceedAmount\n        if (customer.getStatus() != null && customer.getStatus().getLoanExceedAmount() != null) {\n            customerLoan.setLoanselfcurrent(customer.getStatus().getLoanExceedAmount());\n        }\n\n        // 최종 DB 저장\n        customerRepository.save(customer);\n    }\n\n    // ================================================\n    // 6) 다음 고객번호 조회\n    // ================================================\n    public Integer getNextCustomerId() {\n        return customerRepository.getNextId();\n    }\n\n    // ================================================\n    // 7) 고객 조회/저장/삭제\n    // ================================================\n    public Customer getCustomerById(Integer id) {\n        Optional<Customer> optionalCustomer = customerRepository.findById(id);\n        return optionalCustomer.orElse(null);\n    }\n\n    public Customer saveCustomer(Customer customer) {\n        return customerRepository.save(customer);\n    }\n\n    public void deleteCustomer(Integer id) {\n        customerRepository.deleteById(id);\n    }\n\n    // ================================================\n    // 8) Phase 조회: 미납/완납\n    // ================================================\n    public List<Phase> getPendingPhases(Integer customerId) {\n        Optional<Customer> customerOptional = customerRepository.findById(customerId);\n        if (customerOptional.isPresent()) {\n            Customer customer = customerOptional.get();\n            List<Phase> phases = customer.getPhases();\n            return phases.stream()\n                    .filter(phase -> phase.getSum() != null && phase.getSum() > 0)\n                    .collect(Collectors.toList());\n        }\n        return null;\n    }\n\n    public List<Phase> getCompletedPhases(Integer customerId) {\n        Optional<Customer> customerOptional = customerRepository.findById(customerId);\n        if (customerOptional.isPresent()) {\n            Customer customer = customerOptional.get();\n            List<Phase> phases = customer.getPhases();\n            return phases.stream()\n                    .filter(phase -> phase.getSum() == null || phase.getSum() == 0)\n                    .collect(Collectors.toList());\n        }\n        return null;\n    }\n\n    // ================================================\n    // 9) 통계: 정계약, 완납/미연체\n    // ================================================\n    public long countContractedCustomers() {\n        // customertype=\"c\" = 정계약\n        return customerRepository.countByCustomertype(\"c\");\n    }\n\n    public long countFullyPaidOrNotOverdueCustomers() {\n        // 모든 고객 중, 연체가 없는(또는 phase가 없는) 고객 수\n        List<Customer> allCustomers = customerRepository.findAll();\n        LocalDate today = LocalDate.now();\n\n        return allCustomers.stream().filter(customer -> {\n            List<Phase> phases = customer.getPhases();\n            if (phases == null || phases.isEmpty()) return true; // Phase 없으면 연체없음\n            // 연체가 하나라도 있으면 제외\n            boolean hasOverdue = phases.stream().anyMatch(phase ->\n                    phase.getPlanneddate() != null\n                            && phase.getPlanneddate().isBefore(today)\n                            && phase.getFullpaiddate() == null\n            );\n            return !hasOverdue;\n        }).count();\n    }\n\n    // ================================================\n    // 10) 연체료 정보\n    // ================================================\n    public List<LateFeeInfo> getLateFeeInfos(String name, String number) {\n        // 검색 조건(name, number)에 맞는 고객 목록\n        List<Customer> customers;\n        if (name != null && !name.isEmpty() && number != null && !number.isEmpty()) {\n            try {\n                Integer id = Integer.parseInt(number);\n                customers = customerRepository.findByCustomerDataNameAndId(name, id);\n            } catch (NumberFormatException e) {\n                customers = Collections.emptyList();\n            }\n        } else if (name != null && !name.isEmpty()) {\n            customers = customerRepository.findByCustomerDataNameContaining(name);\n        } else if (number != null && !number.isEmpty()) {\n            try {\n                Integer id = Integer.parseInt(number);\n                Optional<Customer> cOpt = customerRepository.findById(id);\n                customers = cOpt.map(Collections::singletonList).orElse(Collections.emptyList());\n            } catch (NumberFormatException e) {\n                customers = Collections.emptyList();\n            }\n        } else {\n            customers = customerRepository.findAll();\n        }\n\n        List<LateFeeInfo> lateFeeInfos = new ArrayList<>();\n        LocalDate today = LocalDate.now();\n\n        for (Customer c : customers) {\n            List<Phase> phases = c.getPhases();\n            if (phases == null || phases.isEmpty()) continue;\n\n            List<Phase> unpaidPhases = phases.stream().filter(p ->\n                    p.getPlanneddate() != null\n                            && p.getPlanneddate().isBefore(today)\n                            && p.getFullpaiddate() == null\n            ).collect(Collectors.toList());\n\n            LateFeeInfo info = new LateFeeInfo();\n            info.setId(c.getId());\n            info.setCustomertype(c.getCustomertype() != null ? c.getCustomertype() : \"N/A\");\n            info.setName((c.getCustomerData() != null && c.getCustomerData().getName() != null)\n                    ? c.getCustomerData().getName()\n                    : \"N/A\");\n            info.setRegisterdate(c.getRegisterdate());\n\n            if (unpaidPhases.isEmpty()) {\n                // 미납없음\n                info.setLastUnpaidPhaseNumber(null);\n                info.setLateBaseDate(null);\n                info.setRecentPaymentDate(null);\n                info.setDaysOverdue(0L);\n                info.setLateRate(0.0);\n                info.setOverdueAmount(0L);\n\n                long paidAmount = phases.stream()\n                        .mapToLong(p -> (p.getCharged() != null) ? p.getCharged() : 0L)\n                        .sum();\n                info.setPaidAmount(paidAmount);\n\n                info.setLateFee(0.0);\n                info.setTotalOwed(0L);\n            } else {\n                // 연체가 있음\n                int lastUnpaid = unpaidPhases.stream()\n                        .mapToInt(Phase::getPhaseNumber)\n                        .max().orElse(0);\n                info.setLastUnpaidPhaseNumber(lastUnpaid);\n\n                LocalDate lateBaseDate = unpaidPhases.stream()\n                        .map(Phase::getPlanneddate)\n                        .min(LocalDate::compareTo)\n                        .orElse(null);\n                info.setLateBaseDate(lateBaseDate);\n\n                List<Phase> paidPhases = phases.stream()\n                        .filter(p -> p.getFullpaiddate() != null)\n                        .collect(Collectors.toList());\n                LocalDate recentPaymentDate = paidPhases.stream()\n                        .map(Phase::getFullpaiddate)\n                        .max(LocalDate::compareTo)\n                        .orElse(null);\n                info.setRecentPaymentDate(recentPaymentDate);\n\n                long daysOverdue = (lateBaseDate != null)\n                        ? ChronoUnit.DAYS.between(lateBaseDate, today)\n                        : 0;\n                if (daysOverdue < 0) daysOverdue = 0;\n                info.setDaysOverdue(daysOverdue);\n\n                // 예: 하루 0.05% = 0.0005\n                double lateRate = 0.0005;\n                info.setLateRate(lateRate);\n\n                long overdueAmount = unpaidPhases.stream()\n                        .mapToLong(p -> (p.getFeesum() != null) ? p.getFeesum() : 0L)\n                        .sum();\n                info.setOverdueAmount(overdueAmount);\n\n                long paidAmount = phases.stream()\n                        .mapToLong(p -> (p.getCharged() != null) ? p.getCharged() : 0L)\n                        .sum();\n                info.setPaidAmount(paidAmount);\n\n                double lateFee = overdueAmount * lateRate * daysOverdue;\n                info.setLateFee(lateFee);\n\n                long totalOwed = overdueAmount + Math.round(lateFee);\n                info.setTotalOwed(totalOwed);\n            }\n            lateFeeInfos.add(info);\n        }\n\n        return lateFeeInfos;\n    }\n\n    // ================================================\n    // 11) 검색\n    // ================================================\n    public List<Customer> searchCustomers(String name, String number) {\n        // name, number 모두 있으면\n        if (name != null && number != null) {\n            if (number.matches(\"\\\\d+\")) {\n                return customerRepository.findByNameContainingAndIdContaining(name, number);\n            } else {\n                return customerRepository.findByCustomerDataNameContaining(name);\n            }\n        }\n        // name만\n        else if (name != null) {\n            return customerRepository.findByCustomerDataNameContaining(name);\n        }\n        // number만\n        else if (number != null) {\n            if (number.matches(\"\\\\d+\")) {\n                return customerRepository.findByIdContaining(number);\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        // 둘다 없으면 전체\n        else {\n            return customerRepository.findAll();\n        }\n    }\n\n    // ================================================\n    // 12) DepositList(전체 입금 기록) DTO\n    // ================================================\n    public List<CustomerDepositDTO> getAllCustomerDepositDTOs() {\n        List<Customer> allCustomers = customerRepository.findAll();\n        return allCustomers.stream()\n                .map(this::mapToCustomerDepositDTO)\n                .collect(Collectors.toList());\n    }\n\n    private CustomerDepositDTO mapToCustomerDepositDTO(Customer customer) {\n        CustomerDepositDTO dto = new CustomerDepositDTO();\n        dto.setMemberNumber(customer.getId());\n\n        // 마지막 납부일\n        LocalDate lastPaidDate = customer.getPhases().stream()\n                .map(Phase::getFullpaiddate)\n                .filter(Objects::nonNull)\n                .max(LocalDate::compareTo)\n                .orElse(null);\n        dto.setLastTransactionDateTime(lastPaidDate != null ? lastPaidDate.atStartOfDay() : null);\n\n        dto.setRemarks(\"\");\n        dto.setMemo(\"\");\n        dto.setContractor(customer.getCustomerData() != null ? customer.getCustomerData().getName() : \"\");\n        dto.setWithdrawnAmount(null);\n\n        // 총 입금액(=모든 차수의 charged 합)\n        Long depositAmount = customer.getPhases().stream()\n                .mapToLong(p -> (p.getCharged() != null) ? p.getCharged() : 0L)\n                .sum();\n        dto.setDepositAmount(depositAmount);\n\n        // 은행 지점\n        dto.setBankBranch(\n                (customer.getFinancial() != null && customer.getFinancial().getBankname() != null)\n                        ? customer.getFinancial().getBankname()\n                        : \"\"\n        );\n        dto.setAccount(\"h\");\n        dto.setReservation(\"\");\n\n        // 1~10차 입금 여부\n        dto.setDepositPhase1(getPhaseStatus(customer, 1));\n        dto.setDepositPhase2(getPhaseStatus(customer, 2));\n        dto.setDepositPhase3(getPhaseStatus(customer, 3));\n        dto.setDepositPhase4(getPhaseStatus(customer, 4));\n        dto.setDepositPhase5(getPhaseStatus(customer, 5));\n        dto.setDepositPhase6(getPhaseStatus(customer, 6));\n        dto.setDepositPhase7(getPhaseStatus(customer, 7));\n        dto.setDepositPhase8(getPhaseStatus(customer, 8));\n        dto.setDepositPhase9(getPhaseStatus(customer, 9));\n        dto.setDepositPhase10(getPhaseStatus(customer, 10));\n\n        // 대출금액, 대출일자 (가장 최근)\n        DepositHistory loanDeposit = null;\n        if (customer.getDepositHistories() != null) {\n            loanDeposit = customer.getDepositHistories().stream()\n                    .filter(dh -> \"o\".equalsIgnoreCase(dh.getLoanStatus()))\n                    .max(Comparator.comparing(DepositHistory::getTransactionDateTime))\n                    .orElse(null);\n        }\n        if (loanDeposit != null) {\n            dto.setLoanAmount(loanDeposit.getDepositAmount());\n            dto.setLoanDate(loanDeposit.getLoanDate());\n        } else {\n            dto.setLoanAmount(null);\n            dto.setLoanDate(null);\n        }\n\n        dto.setTemporary(\"\");\n        dto.setNote(\"\");\n\n        return dto;\n    }\n\n    /**\n     * 1~10차 입금 상태: charged>0 ? \"o\" : \"x\"\n     */\n    private String getPhaseStatus(Customer customer, int phaseNumber) {\n        if (customer.getPhases() == null) return \"\";\n        Phase targetPhase = customer.getPhases().stream()\n                .filter(p -> p.getPhaseNumber() != null && p.getPhaseNumber() == phaseNumber)\n                .findFirst()\n                .orElse(null);\n        if (targetPhase == null) return \"\";\n        Long charged = targetPhase.getCharged();\n        return (charged != null && charged > 0) ? \"o\" : \"x\";\n    }\n\n    // ================================================\n    // 13) 도우미: plannedDate 계산\n    // ================================================\n    /**\n     * 예: \"3달\" -> registerDate.plusMonths(3)\n     *     \"1년\" -> registerDate.plusYears(1)\n     */\n    private LocalDate calculatePlannedDate(LocalDate registerDate, String phasedate) {\n        if (registerDate == null) {\n            registerDate = LocalDate.now();\n        }\n        if (phasedate == null || phasedate.isEmpty()) {\n            return registerDate;\n        }\n        if (phasedate.endsWith(\"달\") || phasedate.endsWith(\"개월\")) {\n            int months = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusMonths(months);\n        } else if (phasedate.endsWith(\"년\")) {\n            int years = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusYears(years);\n        } else {\n            // 알 수 없는 형식 -> 대략 100년 후로\n            return registerDate.plusYears(100);\n        }\n    }\n\n}\n",
            "DepositHistoryService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.repository.CustomerRepository;\nimport com.audora.lotting_be.repository.DepositHistoryRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\npublic class DepositHistoryService {\n\n    @Autowired\n    private DepositHistoryRepository depositHistoryRepository;\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * [생성] 입금내역을 생성한 뒤, 전체 재계산\n     */\n    @Transactional\n    public DepositHistory createDepositHistory(DepositHistory depositHistory) {\n        if (depositHistory.getCustomer() == null || depositHistory.getCustomer().getId() == null) {\n            throw new IllegalArgumentException(\"입금내역 생성 시 고객 ID 정보가 필요합니다.\");\n        }\n        // 1) 고객 조회\n        Customer customer = customerRepository.findById(depositHistory.getCustomer().getId())\n                .orElseThrow(() -> new IllegalArgumentException(\"해당 고객을 찾을 수 없습니다.\"));\n\n        // 2) 저장\n        depositHistory.setCustomer(customer);\n        DepositHistory saved = depositHistoryRepository.save(depositHistory);\n\n        // 3) 전체 재계산 (loanRecord / selfRecord는 recalcEverything 내부에서 결정)\n        customerService.recalculateEverything(customer);\n\n        // 4) 최종 반영된 depositHistory 다시 조회하여 반환(선택)\n        saved = depositHistoryRepository.findById(saved.getId()).orElse(saved);\n        return saved;\n    }\n\n    /**\n     * [수정] 수정 후 전체 재계산\n     */\n    @Transactional\n    public DepositHistory updateDepositHistory(Long id, DepositHistory updatedDepositHistory) {\n        DepositHistory existing = depositHistoryRepository.findById(id)\n                .orElseThrow(() -> new IllegalArgumentException(\"입금내역을 찾을 수 없습니다.\"));\n\n        Customer customer = existing.getCustomer();\n        if (updatedDepositHistory.getCustomer() != null && updatedDepositHistory.getCustomer().getId() != null) {\n            if (!customer.getId().equals(updatedDepositHistory.getCustomer().getId())) {\n                throw new IllegalArgumentException(\"해당 입금내역의 고객 ID가 일치하지 않습니다.\");\n            }\n        }\n\n        // 필드들 업데이트\n        existing.setTransactionDateTime(updatedDepositHistory.getTransactionDateTime());\n        existing.setDescription(updatedDepositHistory.getDescription());\n        existing.setDetails(updatedDepositHistory.getDetails());\n        existing.setContractor(updatedDepositHistory.getContractor());\n        existing.setWithdrawnAmount(updatedDepositHistory.getWithdrawnAmount());\n        existing.setDepositAmount(updatedDepositHistory.getDepositAmount());\n        existing.setBranch(updatedDepositHistory.getBranch());\n        existing.setAccount(updatedDepositHistory.getAccount());\n        existing.setDepositPhase1(updatedDepositHistory.getDepositPhase1());\n        existing.setDepositPhase2(updatedDepositHistory.getDepositPhase2());\n        existing.setDepositPhase3(updatedDepositHistory.getDepositPhase3());\n        existing.setDepositPhase4(updatedDepositHistory.getDepositPhase4());\n        existing.setDepositPhase5(updatedDepositHistory.getDepositPhase5());\n        existing.setDepositPhase6(updatedDepositHistory.getDepositPhase6());\n        existing.setDepositPhase7(updatedDepositHistory.getDepositPhase7());\n        existing.setDepositPhase8(updatedDepositHistory.getDepositPhase8());\n        existing.setDepositPhase9(updatedDepositHistory.getDepositPhase9());\n        existing.setDepositPhase10(updatedDepositHistory.getDepositPhase10());\n        existing.setLoanStatus(updatedDepositHistory.getLoanStatus());\n        existing.setLoanDate(updatedDepositHistory.getLoanDate());\n        existing.setRemarks(updatedDepositHistory.getRemarks());\n        existing.setLoanDetails(updatedDepositHistory.getLoanDetails());\n        existing.setTargetPhases(updatedDepositHistory.getTargetPhases());\n\n        // loanRecord, selfRecord는 recalcEverything 시점에서 다시 계산하므로\n        // 굳이 여기서 setLoanRecord(...)할 필요가 없거나, null로 유지 가능.\n        // existing.setLoanRecord(updatedDepositHistory.getLoanRecord());\n        // existing.setSelfRecord(updatedDepositHistory.getSelfRecord());\n\n        // 저장\n        DepositHistory saved = depositHistoryRepository.save(existing);\n\n        // 전체 재계산\n        customerService.recalculateEverything(customer);\n\n        // 다시 조회하여 반환(옵션)\n        saved = depositHistoryRepository.findById(saved.getId()).orElse(saved);\n        return saved;\n    }\n\n    /**\n     * [삭제] 삭제 후 전체 재계산\n     */\n    @Transactional\n    public void deleteDepositHistory(Long id) {\n        DepositHistory dh = depositHistoryRepository.findById(id)\n                .orElseThrow(() -> new IllegalArgumentException(\"입금내역을 찾을 수 없습니다.\"));\n        Customer customer = dh.getCustomer();\n\n        if (customer.getDepositHistories() != null) {\n            customer.getDepositHistories().remove(dh);\n        }\n        depositHistoryRepository.delete(dh);\n\n        // 전체 재계산\n        customerService.recalculateEverything(customer);\n    }\n}\n",
            "ExcelService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.model.customer.Status;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.xssf.usermodel.XSSFShape;\nimport org.apache.poi.xssf.usermodel.XSSFTextBox;\nimport org.apache.poi.xssf.usermodel.XSSFDrawing;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.springframework.stereotype.Service;\n\nimport java.io.*;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Service\npublic class ExcelService {\n\n    /**\n     * format1.xlsx 에 특정 셀들에 데이터 채워넣기\n     *\n     * @param tempFile  미리 복사해둔 임시 엑셀 파일\n     * @param customer  대상 고객\n     * @throws IOException 파일 I/O 에러\n     */\n    public void fillFormat1(File tempFile, Customer customer) throws IOException {\n        try (FileInputStream fis = new FileInputStream(tempFile);\n             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {\n\n            XSSFSheet sheet = workbook.getSheetAt(0);\n\n            // 예) AX29 -> row=28, col=49 : customer.id\n            getCell(sheet, 28, 49).setCellValue(customer.getId());\n\n            // BC34 -> row=33, col=54 : customer.type\n            getCell(sheet, 33, 54).setCellValue(\n                    customer.getType() != null ? customer.getType() : \"\"\n            );\n\n            // BI34 -> row=33, col=60 : groupname\n            getCell(sheet, 33, 60).setCellValue(\n                    customer.getGroupname() != null ? customer.getGroupname() : \"\"\n            );\n\n            // BC37 -> row=36, col=54 : turn\n            getCell(sheet, 36, 54).setCellValue(\n                    customer.getTurn() != null ? customer.getTurn() : \"\"\n            );\n\n            // H64 -> row=63, col=7 : CustomerData.name\n            if (customer.getCustomerData() != null) {\n                getCell(sheet, 63, 7).setCellValue(\n                        customer.getCustomerData().getName() != null\n                                ? customer.getCustomerData().getName()\n                                : \"\"\n                );\n            }\n\n            // W64 -> row=63, col=22 : resnumfront-resnumback\n            if (customer.getCustomerData() != null) {\n                String rrn = \"\";\n                if (customer.getCustomerData().getResnumfront() != null\n                        && customer.getCustomerData().getResnumback() != null) {\n                    rrn = customer.getCustomerData().getResnumfront()\n                            + \"-\"\n                            + customer.getCustomerData().getResnumback();\n                }\n                getCell(sheet, 63, 22).setCellValue(rrn);\n            }\n\n            // H66 -> row=65, col=7 : (법정) 주소+상세주소\n            if (customer.getLegalAddress() != null) {\n                String address = \"\";\n                if (customer.getLegalAddress().getPost() != null) {\n                    address += customer.getLegalAddress().getPost();\n                }\n                if (customer.getLegalAddress().getDetailaddress() != null) {\n                    address += customer.getLegalAddress().getDetailaddress();\n                }\n                getCell(sheet, 65, 7).setCellValue(address);\n            }\n\n            // H68 -> row=67, col=7 : email\n            if (customer.getCustomerData() != null) {\n                getCell(sheet, 67, 7).setCellValue(\n                        customer.getCustomerData().getEmail() != null\n                                ? customer.getCustomerData().getEmail()\n                                : \"\"\n                );\n            }\n\n            // X70 -> row=69, col=23 : phone\n            if (customer.getCustomerData() != null) {\n                getCell(sheet, 69, 23).setCellValue(\n                        customer.getCustomerData().getPhone() != null\n                                ? customer.getCustomerData().getPhone()\n                                : \"\"\n                );\n            }\n\n            // X74 -> row=73, col=23 : registerprice\n            if (customer.getRegisterprice() != null) {\n                getCell(sheet, 73, 23).setCellValue(customer.getRegisterprice());\n            }\n\n            // C82 -> row=81, col=2 : Financial.bankname\n            // L82 -> row=81, col=11 : Financial.accountnum\n            // W82 -> row=81, col=22 : Financial.trustcompany\n            if (customer.getFinancial() != null) {\n                getCell(sheet, 81, 2).setCellValue(\n                        customer.getFinancial().getBankname() != null\n                                ? customer.getFinancial().getBankname()\n                                : \"\"\n                );\n                getCell(sheet, 81, 11).setCellValue(\n                        customer.getFinancial().getAccountnum() != null\n                                ? customer.getFinancial().getAccountnum()\n                                : \"\"\n                );\n                getCell(sheet, 81, 22).setCellValue(\n                        customer.getFinancial().getTrustcompany() != null\n                                ? customer.getFinancial().getTrustcompany()\n                                : \"\"\n                );\n            }\n\n            // N97 -> row=96, col=13 : registerdate\n            if (customer.getRegisterdate() != null) {\n                getCell(sheet, 96, 13).setCellValue(customer.getRegisterdate().toString());\n            }\n\n            // Phase 관련\n            // BA66(1차), BA68(2차), BA70(3차), BA72(4차),\n            // BA74(5차), BA76(6차), BA78(7차), BA80(8차)\n            // -> row=65,67,69,71,73,75,77,79 col=52\n            // BH65(1차), BH67(2차), BH69(3차), BH71(4차)\n            // -> row=64,66,68,70 col=59\n            List<Phase> phases = customer.getPhases();\n\n            // charge 1 ~ 8\n            if (phases != null && phases.size() > 0) {\n                getCell(sheet, 65, 52).setCellValue(phases.get(0).getCharge() != null\n                        ? phases.get(0).getCharge() : 0);\n            }\n            if (phases != null && phases.size() > 1) {\n                getCell(sheet, 67, 52).setCellValue(phases.get(1).getCharge() != null\n                        ? phases.get(1).getCharge() : 0);\n            }\n            if (phases != null && phases.size() > 2) {\n                getCell(sheet, 69, 52).setCellValue(phases.get(2).getCharge() != null\n                        ? phases.get(2).getCharge() : 0);\n            }\n            if (phases != null && phases.size() > 3) {\n                getCell(sheet, 71, 52).setCellValue(phases.get(3).getCharge() != null\n                        ? phases.get(3).getCharge() : 0);\n            }\n            if (phases != null && phases.size() > 4) {\n                getCell(sheet, 73, 52).setCellValue(phases.get(4).getCharge() != null\n                        ? phases.get(4).getCharge() : 0);\n            }\n            if (phases != null && phases.size() > 5) {\n                getCell(sheet, 75, 52).setCellValue(phases.get(5).getCharge() != null\n                        ? phases.get(5).getCharge() : 0);\n            }\n            if (phases != null && phases.size() > 6) {\n                getCell(sheet, 77, 52).setCellValue(phases.get(6).getCharge() != null\n                        ? phases.get(6).getCharge() : 0);\n            }\n            if (phases != null && phases.size() > 7) {\n                getCell(sheet, 79, 52).setCellValue(phases.get(7).getCharge() != null\n                        ? phases.get(7).getCharge() : 0);\n            }\n\n            // planneddate 1 ~ 4\n            if (phases != null && phases.size() > 0) {\n                LocalDate d1 = phases.get(0).getPlanneddate();\n                getCell(sheet, 64, 59).setCellValue(d1 != null ? d1.toString() : \"\");\n            }\n            if (phases != null && phases.size() > 1) {\n                LocalDate d2 = phases.get(1).getPlanneddate();\n                getCell(sheet, 66, 59).setCellValue(d2 != null ? d2.toString() : \"\");\n            }\n            if (phases != null && phases.size() > 2) {\n                LocalDate d3 = phases.get(2).getPlanneddate();\n                getCell(sheet, 68, 59).setCellValue(d3 != null ? d3.toString() : \"\");\n            }\n            if (phases != null && phases.size() > 3) {\n                LocalDate d4 = phases.get(3).getPlanneddate();\n                getCell(sheet, 70, 59).setCellValue(d4 != null ? d4.toString() : \"\");\n            }\n\n            // Status.ammountsum -> BA82 (row=81, col=52)\n            Status status = customer.getStatus();\n            if (status != null && status.getAmmountsum() != null) {\n                getCell(sheet, 81, 52).setCellValue(status.getAmmountsum());\n            }\n\n            // 엑셀 수정 내용을 tempFile에 저장\n            try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n                // 수식 재계산\n                workbook.setForceFormulaRecalculation(true);\n                workbook.write(fos);\n            }\n        }\n    }\n\n    /**\n     * format2.xlsx 에 특정 셀들, 텍스트박스에 데이터 채워넣기\n     */\n    public void fillFormat2(File tempFile, Customer customer) throws IOException {\n        try (FileInputStream fis = new FileInputStream(tempFile);\n             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {\n\n            XSSFSheet sheet = workbook.getSheetAt(0);\n\n            // (1) 셀 수정\n            // G9 -> row=8,col=6 : name\n            if (customer.getCustomerData() != null && customer.getCustomerData().getName() != null) {\n                getCell(sheet, 8, 6).setCellValue(customer.getCustomerData().getName());\n            }\n            // L49 -> row=48,col=11 : registerdate\n            LocalDate rd = customer.getRegisterdate();\n            if (rd != null) {\n                getCell(sheet, 48, 11).setCellValue(rd.toString());\n            }\n            // L64 -> row=63,col=11 : name\n            if (customer.getCustomerData() != null && customer.getCustomerData().getName() != null) {\n                getCell(sheet, 63, 11).setCellValue(customer.getCustomerData().getName());\n            }\n            // L66 -> row=65,col=11 : resnumfront\n            if (customer.getCustomerData() != null && customer.getCustomerData().getResnumfront() != null) {\n                getCell(sheet, 65, 11).setCellValue(customer.getCustomerData().getResnumfront());\n            }\n            // L68 -> row=67,col=11 : phone\n            if (customer.getCustomerData() != null && customer.getCustomerData().getPhone() != null) {\n                getCell(sheet, 67, 11).setCellValue(customer.getCustomerData().getPhone());\n            }\n            // L70 -> row=69,col=11 : 우편번호 + 상세주소\n            String address = \"\";\n            if (customer.getLegalAddress() != null) {\n                if (customer.getLegalAddress().getPost() != null) {\n                    address += customer.getLegalAddress().getPost();\n                }\n                if (customer.getLegalAddress().getDetailaddress() != null) {\n                    address += customer.getLegalAddress().getDetailaddress();\n                }\n            }\n            getCell(sheet, 69, 11).setCellValue(address);\n\n            // M151 -> row=150,col=12 : resnumfront-resnumback\n            if (customer.getCustomerData() != null\n                    && customer.getCustomerData().getResnumfront() != null\n                    && customer.getCustomerData().getResnumback() != null) {\n                String rrn = customer.getCustomerData().getResnumfront()\n                        + \"-\" + customer.getCustomerData().getResnumback();\n                getCell(sheet, 150, 12).setCellValue(rrn);\n            }\n\n            // === 추가사항: A288, B288, C288 ===\n            // (row=287, col=0), (row=287, col=1), (row=287, col=2)\n            // A288 -> id\n            getCell(sheet, 287, 0).setCellValue(customer.getId());\n            // B288 -> type\n            getCell(sheet, 287, 1).setCellValue(\n                    customer.getType() != null ? customer.getType() : \"\"\n            );\n            // C288 -> groupname\n            getCell(sheet, 287, 2).setCellValue(\n                    customer.getGroupname() != null ? customer.getGroupname() : \"\"\n            );\n\n            // (2) 텍스트 박스 수정\n            XSSFDrawing drawing = sheet.getDrawingPatriarch();\n            if (drawing != null) {\n                List<XSSFShape> shapes = drawing.getShapes();\n                for (XSSFShape shape : shapes) {\n                    if (shape instanceof XSSFTextBox) {\n                        XSSFTextBox textBox = (XSSFTextBox) shape;\n                        String shapeName = textBox.getShapeName(); // 예: \"TextBox 34\"\n\n                        switch (shapeName) {\n                            case \"TextBox 34\":\n                                // CustomerData.name\n                                if (customer.getCustomerData() != null\n                                        && customer.getCustomerData().getName() != null) {\n                                    textBox.setText(customer.getCustomerData().getName());\n                                }\n                                break;\n                            case \"TextBox 35\":\n                                // id\n                                textBox.setText(customer.getId().toString());\n                                break;\n                            case \"TextBox 36\":\n                                // type\n                                if (customer.getType() != null) {\n                                    textBox.setText(customer.getType());\n                                }\n                                break;\n                            case \"TextBox 37\":\n                                // groupname\n                                if (customer.getGroupname() != null) {\n                                    textBox.setText(customer.getGroupname());\n                                }\n                                break;\n                            case \"TextBox 1033\":\n                                // registerdate\n                                if (rd != null) {\n                                    textBox.setText(rd.toString());\n                                }\n                                break;\n                            default:\n                                // 다른 텍스트 박스는 수정 안 함\n                                break;\n                        }\n                    }\n                }\n            }\n\n            // (3) 수식 재계산(엑셀 열 때 자동)\n            workbook.setForceFormulaRecalculation(true);\n\n            // (4) 엑셀 수정 내용을 tempFile에 저장\n            try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n                workbook.write(fos);\n            }\n        }\n    }\n\n    /**\n     * 엑셀 셀 객체를 안전하게 가져오는 헬퍼 메서드\n     */\n    private Cell getCell(XSSFSheet sheet, int rowIndex, int colIndex) {\n        Row row = sheet.getRow(rowIndex);\n        if (row == null) {\n            row = sheet.createRow(rowIndex);\n        }\n        Cell cell = row.getCell(colIndex);\n        if (cell == null) {\n            cell = row.createCell(colIndex);\n        }\n        return cell;\n    }\n}\n",
            "FeeService.java": "// FeeService.java\npackage com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class FeeService {\n\n    @Autowired\n    private FeeRepository feeRepository;\n\n    /**\n     * 새로운 Fee와 연관된 FeePerPhase 생성\n     *\n     * @param fee 생성할 Fee 객체\n     * @return 생성된 Fee 객체\n     */\n    public Fee createFee(Fee fee) {\n        // 양방향 관계 설정\n        if (fee.getFeePerPhases() != null) {\n            for (FeePerPhase phase : fee.getFeePerPhases()) {\n                phase.setFee(fee);\n            }\n        }\n        return feeRepository.save(fee);\n    }\n\n    /**\n     * ID로 Fee 조회\n     *\n     * @param id Fee의 ID\n     * @return Fee 객체 (존재할 경우), 없을 경우 null\n     */\n    public Fee getFeeById(Long id) {\n        return feeRepository.findById(id).orElse(null);\n    }\n\n    /**\n     * 모든 Fee 조회\n     *\n     * @return 모든 Fee의 리스트\n     */\n    public List<Fee> getAllFees() {\n        return feeRepository.findAll();\n    }\n}\n",
            "PhaseService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.repository.PhaseRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class PhaseService {\n\n    @Autowired\n    private PhaseRepository phaseRepository;\n\n    // 특정 고객 ID로 Phase 리스트를 조회하는 메서드\n    public List<Phase> getPhasesByCustomerId(Integer customerId) {\n        return phaseRepository.findByCustomerId(customerId);\n    }\n\n    public Optional<Phase> getPhaseById(Long id) {\n        return phaseRepository.findById(id);\n    }\n\n    public Phase savePhase(Phase phase) {\n        return phaseRepository.save(phase);\n    }\n}\n"
        }
    }
}