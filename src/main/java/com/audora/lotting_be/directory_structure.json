{
    "__files__": {
        "codes.py": null,
        "DataInitializer.java": "// DataInitializer.java\npackage com.audora.lotting_be;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Component\npublic class DataInitializer implements CommandLineRunner {\n\n    @Autowired\n    private FeeRepository feeRepository;\n\n    @Override\n    public void run(String... args) throws Exception {\n        Fee existingFee = feeRepository.findByTypeAndGroupnameAndBatch(\"Type1\", \"A\", \"1\");\n\n        if (existingFee == null) {\n            Fee fee = new Fee();\n            fee.setGroupname(\"A\");\n            fee.setFloor(\"10\");\n            fee.setBatch(\"1\");\n            fee.setType(\"Type1\");\n            fee.setSupplyarea(100L);\n            fee.setPriceperp(2000000L);\n            fee.setPrice(200000000L);\n            fee.setPaymentratio(0.1);\n            fee.setPaysum(20000000L);\n\n            List<FeePerPhase> feePerPhases = new ArrayList<>();\n\n            for (int i = 1; i <= 10; i++) {\n                FeePerPhase phase = new FeePerPhase();\n                phase.setPhaseNumber(i);\n                phase.setPhasefee(5000000L * i);\n                phase.setPhasedate(i + \"달\");\n                phase.setFee(fee);\n                feePerPhases.add(phase);\n            }\n\n            fee.setFeePerPhases(feePerPhases);\n\n            feeRepository.save(fee);\n        }\n    }\n}\n",
        "example.txt": null,
        "LottingBeApplication.java": "package com.audora.lotting_be;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class LottingBeApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(LottingBeApplication.class, args);\n\t}\n\n}\n"
    },
    "config": {
        "__files__": {
            "SecurityConfig.java": "// SecurityConfig.java\npackage com.audora.lotting_be.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n                .csrf((csrf)->csrf.disable()) // CSRF 보호 비활성화 (테스트 시)\n                .authorizeHttpRequests(authorize -> authorize\n                        .anyRequest().permitAll() // 모든 요청에 대해 인증 없이 접근 허용\n                );\n\n        return http.build();\n    }\n}\n"
        }
    },
    "controller": {
        "__files__": {
            "CustomerController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.PhaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/customers\")\npublic class CustomerController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    @Autowired\n    private PhaseService phaseService;\n\n    // 기존의 고객 생성 엔드포인트\n    @PostMapping\n    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {\n        Customer createdCustomer = customerService.createCustomer(customer);\n        return ResponseEntity.ok(createdCustomer);\n    }\n\n    // 기존의 고객 조회 엔드포인트\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Customer> getCustomerById(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer != null) {\n            return ResponseEntity.ok(customer);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    // 새로운 Phase 조회 엔드포인트\n    @GetMapping(\"/{id}/phases\")\n    public ResponseEntity<List<Phase>> getPhasesByCustomerId(@PathVariable Integer id) {\n        List<Phase> phases = phaseService.getPhasesByCustomerId(id);\n        if (!phases.isEmpty()) {\n            return ResponseEntity.ok(phases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n}\n"
        }
    },
    "model": {
        "customer": {
            "__files__": {
                "Customer.java": "// Customer.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Customer {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n\n    private String type;\n    private String groupname;\n    private Integer turn;\n    private String batch;\n    private LocalDate registerdate;\n    private Long registerprice;\n    private String checklist;\n    private Boolean contract;\n    private Boolean agreement;\n\n    @Embedded\n    private CustomerData customerData;\n\n    @Embedded\n    private LegalAddress legalAddress;\n\n    @Embedded\n    private Financial financial;\n\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    private List<Deposit> deposits;\n\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<Phase> phases;\n\n    @OneToOne(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    private Loan loan;\n\n    @OneToOne(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    private Status status;\n\n    @Embedded\n    private Responsible responsible;\n}\n",
                "CustomerData.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class CustomerData {\n    private String name;\n    private Integer resnumfront;\n    private Integer resnumback;\n    private String phone;\n}",
                "Deposit.java": "// Deposit.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Entity\n@Data\npublic class Deposit {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private LocalDate depositdate;\n    private Long depositammount;\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    private Customer customer;\n}\n",
                "Financial.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Financial {\n    private String bankname;\n    private Long accountnum;\n    private String accountholder;\n    private String trustcompany;\n}",
                "LegalAddress.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class LegalAddress {\n    private Integer postnumber;\n    private String province;\n    private String county;\n    private String detailaddress;\n}",
                "Loan.java": "// Loan.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Entity\n@Data\npublic class Loan {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private LocalDate loandate;\n    private String loanbank;\n    private Long loanammount;\n    private LocalDate selfdate;\n    private Long selfammount;\n    private Long loanselfsum;\n    private Long loanselfcurrent;\n\n    @OneToOne\n    @JoinColumn(name = \"customer_id\")\n    private Customer customer;\n}\n",
                "Phase.java": "// Phase.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Entity\n@Data\npublic class Phase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber;\n    private LocalDate planneddate;\n    private LocalDate fullpaiddate;\n    private Long charge;\n    private Long discount;\n    private Long exemption;\n    private Long service;\n    private String move;\n    private Long feesum;\n    private Long charged;\n    private Long sum;\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n",
                "Responsible.java": "package com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Responsible {\n    private String generalmanagement;\n    private Integer division;\n    private Integer team;\n    private String managername;\n    private String registerroot;\n}",
                "Status.java": "// Status.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class Status {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Long exemptionsum;\n    private Long unpaidammout;\n    private String unpaidphase;\n    private Long prepaidammount;\n    private Long ammountsum;\n    private Long percent40;\n\n    @OneToOne\n    @JoinColumn(name = \"customer_id\")\n    private Customer customer;\n}\n"
            }
        },
        "Fee": {
            "__files__": {
                "Fee.java": "// Fee.java\npackage com.audora.lotting_be.model.Fee;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Fee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String groupname;\n    private String floor;\n    private String batch;\n    private String type;\n    private Long supplyarea;\n    private Long priceperp;\n    private Long price;\n    private Double paymentratio;\n    private Long paysum;\n\n    @OneToMany(mappedBy = \"fee\", cascade = CascadeType.ALL)\n    private List<FeePerPhase> feePerPhases;\n}\n",
                "FeePerPhase.java": "// FeePerPhase.java\npackage com.audora.lotting_be.model.Fee;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class FeePerPhase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber;\n    private Long phasefee;\n    private String phasedate;\n\n    @ManyToOne\n    @JoinColumn(name = \"fee_id\")\n    private Fee fee;\n}\n"
            }
        }
    },
    "repository": {
        "__files__": {
            "CustomerRepository.java": "// CustomerRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface CustomerRepository extends JpaRepository<Customer, Integer> {\n}\n",
            "FeeRepository.java": "// FeeRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface FeeRepository extends JpaRepository<Fee, Long> {\n    Fee findByTypeAndGroupnameAndBatch(String type, String group, String batch);\n}\n",
            "PhaseRepository.java": "package com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.List;\n\npublic interface PhaseRepository extends JpaRepository<Phase, Long> {\n    List<Phase> findByCustomerId(Integer customerId);\n}\n"
        }
    },
    "service": {
        "__files__": {
            "CustomerService.java": "// CustomerService.java\npackage com.audora.lotting_be.service;\n\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.repository.CustomerRepository;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class CustomerService {\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private FeeRepository feeRepository;\n    public Customer getCustomerById(Integer id) {\n        Optional<Customer> optionalCustomer = customerRepository.findById(id);\n        return optionalCustomer.orElse(null);\n    }\n    public Customer createCustomer(Customer customer) {\n        Fee fee = feeRepository.findByTypeAndGroupnameAndBatch(\n                customer.getType(), customer.getGroupname(), customer.getBatch());\n\n        if (fee != null) {\n            List<FeePerPhase> feePerPhases = fee.getFeePerPhases();\n            List<Phase> phases = new ArrayList<>();\n\n            for (FeePerPhase feePerPhase : feePerPhases) {\n                Phase phase = new Phase();\n                phase.setPhaseNumber(feePerPhase.getPhaseNumber());\n                phase.setCharge(feePerPhase.getPhasefee());\n\n                LocalDate plannedDate = calculatePlannedDate(\n                        customer.getRegisterdate(), feePerPhase.getPhasedate());\n                phase.setPlanneddate(plannedDate);\n\n                phase.setCustomer(customer);\n                phases.add(phase);\n            }\n            customer.setPhases(phases);\n        }\n        return customerRepository.save(customer);\n    }\n\n    private LocalDate calculatePlannedDate(LocalDate registerDate, String phasedate) {\n        if (phasedate.endsWith(\"달\") || phasedate.endsWith(\"개월\")) {\n            int months = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusMonths(months);\n        } else if (phasedate.endsWith(\"년\")) {\n            int years = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusYears(years);\n        } else {\n            return registerDate;\n        }\n    }\n}\n",
            "PhaseService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.repository.PhaseRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class PhaseService {\n\n    @Autowired\n    private PhaseRepository phaseRepository;\n\n    // 특정 고객 ID로 Phase 리스트를 조회하는 메서드\n    public List<Phase> getPhasesByCustomerId(Integer customerId) {\n        return phaseRepository.findByCustomerId(customerId);\n    }\n}\n"
        }
    }
}